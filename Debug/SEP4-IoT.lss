
SEP4-IoT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000638  00800200  000065fa  0000668e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000065fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001029  00800838  00800838  00006cc6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006cc6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006d24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a60  00000000  00000000  00006d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000d98a  00000000  00000000  000077c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000034c0  00000000  00000000  0001514e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000069f8  00000000  00000000  0001860e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002618  00000000  00000000  0001f008  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000042ba  00000000  00000000  00021620  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c56b  00000000  00000000  000258da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a20  00000000  00000000  00031e45  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	e5 c0       	rjmp	.+458    	; 0x1cc <__ctors_end>
       2:	00 00       	nop
       4:	04 c1       	rjmp	.+520    	; 0x20e <__bad_interrupt>
       6:	00 00       	nop
       8:	02 c1       	rjmp	.+516    	; 0x20e <__bad_interrupt>
       a:	00 00       	nop
       c:	00 c1       	rjmp	.+512    	; 0x20e <__bad_interrupt>
       e:	00 00       	nop
      10:	fe c0       	rjmp	.+508    	; 0x20e <__bad_interrupt>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__bad_interrupt>
      16:	00 00       	nop
      18:	fa c0       	rjmp	.+500    	; 0x20e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	f8 c0       	rjmp	.+496    	; 0x20e <__bad_interrupt>
      1e:	00 00       	nop
      20:	f6 c0       	rjmp	.+492    	; 0x20e <__bad_interrupt>
      22:	00 00       	nop
      24:	f4 c0       	rjmp	.+488    	; 0x20e <__bad_interrupt>
      26:	00 00       	nop
      28:	f2 c0       	rjmp	.+484    	; 0x20e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	f0 c0       	rjmp	.+480    	; 0x20e <__bad_interrupt>
      2e:	00 00       	nop
      30:	dc c3       	rjmp	.+1976   	; 0x7ea <__vector_12>
      32:	00 00       	nop
      34:	ec c0       	rjmp	.+472    	; 0x20e <__bad_interrupt>
      36:	00 00       	nop
      38:	ea c0       	rjmp	.+468    	; 0x20e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	e8 c0       	rjmp	.+464    	; 0x20e <__bad_interrupt>
      3e:	00 00       	nop
      40:	e6 c0       	rjmp	.+460    	; 0x20e <__bad_interrupt>
      42:	00 00       	nop
      44:	e4 c0       	rjmp	.+456    	; 0x20e <__bad_interrupt>
      46:	00 00       	nop
      48:	e2 c0       	rjmp	.+452    	; 0x20e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e0 c0       	rjmp	.+448    	; 0x20e <__bad_interrupt>
      4e:	00 00       	nop
      50:	de c0       	rjmp	.+444    	; 0x20e <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 85 1c 	jmp	0x390a	; 0x390a <__vector_21>
      58:	da c0       	rjmp	.+436    	; 0x20e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c0       	rjmp	.+432    	; 0x20e <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 41 28 	jmp	0x5082	; 0x5082 <__vector_24>
      64:	0c 94 22 24 	jmp	0x4844	; 0x4844 <__vector_25>
      68:	0c 94 74 24 	jmp	0x48e8	; 0x48e8 <__vector_26>
      6c:	d0 c0       	rjmp	.+416    	; 0x20e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ce c0       	rjmp	.+412    	; 0x20e <__bad_interrupt>
      72:	00 00       	nop
      74:	cc c0       	rjmp	.+408    	; 0x20e <__bad_interrupt>
      76:	00 00       	nop
      78:	ca c0       	rjmp	.+404    	; 0x20e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	c8 c0       	rjmp	.+400    	; 0x20e <__bad_interrupt>
      7e:	00 00       	nop
      80:	c6 c0       	rjmp	.+396    	; 0x20e <__bad_interrupt>
      82:	00 00       	nop
      84:	c4 c0       	rjmp	.+392    	; 0x20e <__bad_interrupt>
      86:	00 00       	nop
      88:	c2 c0       	rjmp	.+388    	; 0x20e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c0 c0       	rjmp	.+384    	; 0x20e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 b8 24 	jmp	0x4970	; 0x4970 <__vector_36>
      94:	0c 94 0a 25 	jmp	0x4a14	; 0x4a14 <__vector_37>
      98:	ba c0       	rjmp	.+372    	; 0x20e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 4d 2b 	jmp	0x569a	; 0x569a <__vector_39>
      a0:	b6 c0       	rjmp	.+364    	; 0x20e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	b4 c0       	rjmp	.+360    	; 0x20e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b2 c0       	rjmp	.+356    	; 0x20e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	b0 c0       	rjmp	.+352    	; 0x20e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ae c0       	rjmp	.+348    	; 0x20e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ac c0       	rjmp	.+344    	; 0x20e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	aa c0       	rjmp	.+340    	; 0x20e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	a8 c0       	rjmp	.+336    	; 0x20e <__bad_interrupt>
      be:	00 00       	nop
      c0:	a6 c0       	rjmp	.+332    	; 0x20e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	a4 c0       	rjmp	.+328    	; 0x20e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	a2 c0       	rjmp	.+324    	; 0x20e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 4e 25 	jmp	0x4a9c	; 0x4a9c <__vector_51>
      d0:	0c 94 a0 25 	jmp	0x4b40	; 0x4b40 <__vector_52>
      d4:	9c c0       	rjmp	.+312    	; 0x20e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 e4 25 	jmp	0x4bc8	; 0x4bc8 <__vector_54>
      dc:	0c 94 36 26 	jmp	0x4c6c	; 0x4c6c <__vector_55>
      e0:	96 c0       	rjmp	.+300    	; 0x20e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	bd 18       	sub	r11, r13
      e6:	bd 18       	sub	r11, r13
      e8:	bd 18       	sub	r11, r13
      ea:	f4 18       	sub	r15, r4
      ec:	fc 18       	sub	r15, r12
      ee:	11 19       	sub	r17, r1
      f0:	bd 18       	sub	r11, r13
      f2:	bd 18       	sub	r11, r13
      f4:	f4 18       	sub	r15, r4
      f6:	fc 18       	sub	r15, r12
      f8:	6f 2b       	or	r22, r31
      fa:	df 2b       	or	r29, r31
      fc:	df 2b       	or	r29, r31
      fe:	df 2b       	or	r29, r31
     100:	df 2b       	or	r29, r31
     102:	df 2b       	or	r29, r31
     104:	df 2b       	or	r29, r31
     106:	df 2b       	or	r29, r31
     108:	6f 2b       	or	r22, r31
     10a:	df 2b       	or	r29, r31
     10c:	df 2b       	or	r29, r31
     10e:	df 2b       	or	r29, r31
     110:	df 2b       	or	r29, r31
     112:	df 2b       	or	r29, r31
     114:	df 2b       	or	r29, r31
     116:	df 2b       	or	r29, r31
     118:	71 2b       	or	r23, r17
     11a:	df 2b       	or	r29, r31
     11c:	df 2b       	or	r29, r31
     11e:	df 2b       	or	r29, r31
     120:	df 2b       	or	r29, r31
     122:	df 2b       	or	r29, r31
     124:	df 2b       	or	r29, r31
     126:	df 2b       	or	r29, r31
     128:	df 2b       	or	r29, r31
     12a:	df 2b       	or	r29, r31
     12c:	df 2b       	or	r29, r31
     12e:	df 2b       	or	r29, r31
     130:	df 2b       	or	r29, r31
     132:	df 2b       	or	r29, r31
     134:	df 2b       	or	r29, r31
     136:	df 2b       	or	r29, r31
     138:	71 2b       	or	r23, r17
     13a:	df 2b       	or	r29, r31
     13c:	df 2b       	or	r29, r31
     13e:	df 2b       	or	r29, r31
     140:	df 2b       	or	r29, r31
     142:	df 2b       	or	r29, r31
     144:	df 2b       	or	r29, r31
     146:	df 2b       	or	r29, r31
     148:	df 2b       	or	r29, r31
     14a:	df 2b       	or	r29, r31
     14c:	df 2b       	or	r29, r31
     14e:	df 2b       	or	r29, r31
     150:	df 2b       	or	r29, r31
     152:	df 2b       	or	r29, r31
     154:	df 2b       	or	r29, r31
     156:	df 2b       	or	r29, r31
     158:	db 2b       	or	r29, r27
     15a:	df 2b       	or	r29, r31
     15c:	df 2b       	or	r29, r31
     15e:	df 2b       	or	r29, r31
     160:	df 2b       	or	r29, r31
     162:	df 2b       	or	r29, r31
     164:	df 2b       	or	r29, r31
     166:	df 2b       	or	r29, r31
     168:	a6 2b       	or	r26, r22
     16a:	df 2b       	or	r29, r31
     16c:	df 2b       	or	r29, r31
     16e:	df 2b       	or	r29, r31
     170:	df 2b       	or	r29, r31
     172:	df 2b       	or	r29, r31
     174:	df 2b       	or	r29, r31
     176:	df 2b       	or	r29, r31
     178:	df 2b       	or	r29, r31
     17a:	df 2b       	or	r29, r31
     17c:	df 2b       	or	r29, r31
     17e:	df 2b       	or	r29, r31
     180:	df 2b       	or	r29, r31
     182:	df 2b       	or	r29, r31
     184:	df 2b       	or	r29, r31
     186:	df 2b       	or	r29, r31
     188:	9a 2b       	or	r25, r26
     18a:	df 2b       	or	r29, r31
     18c:	df 2b       	or	r29, r31
     18e:	df 2b       	or	r29, r31
     190:	df 2b       	or	r29, r31
     192:	df 2b       	or	r29, r31
     194:	df 2b       	or	r29, r31
     196:	df 2b       	or	r29, r31
     198:	be 2b       	or	r27, r30

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0e 94 0d 0c 	call	0x181a	; 0x181a <prvCheckTasksWaitingTermination>
     19e:	80 91 45 16 	lds	r24, 0x1645	; 0x801645 <pxReadyTasksLists>
     1a2:	82 30       	cpi	r24, 0x02	; 2
     1a4:	08 f0       	brcs	.+2      	; 0x1a8 <prvIdleTask+0xe>
     1a6:	5b d2       	rcall	.+1206   	; 0x65e <vPortYield>
     1a8:	0e 94 3a 19 	call	0x3274	; 0x3274 <vApplicationIdleHook>
     1ac:	f6 cf       	rjmp	.-20     	; 0x19a <prvIdleTask>

000001ae <prvTimerTask>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	1f 92       	push	r1
     1b4:	cd b7       	in	r28, 0x3d	; 61
     1b6:	de b7       	in	r29, 0x3e	; 62
     1b8:	ce 01       	movw	r24, r28
     1ba:	01 96       	adiw	r24, 0x01	; 1
     1bc:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <prvGetNextExpireTime>
     1c0:	49 81       	ldd	r20, Y+1	; 0x01
     1c2:	0e 94 2f 18 	call	0x305e	; 0x305e <prvProcessTimerOrBlockTask>
     1c6:	0e 94 86 18 	call	0x310c	; 0x310c <prvProcessReceivedCommands>
     1ca:	f6 cf       	rjmp	.-20     	; 0x1b8 <prvTimerTask+0xa>

000001cc <__ctors_end>:
     1cc:	11 24       	eor	r1, r1
     1ce:	1f be       	out	0x3f, r1	; 63
     1d0:	cf ef       	ldi	r28, 0xFF	; 255
     1d2:	d1 e2       	ldi	r29, 0x21	; 33
     1d4:	de bf       	out	0x3e, r29	; 62
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	00 e0       	ldi	r16, 0x00	; 0
     1da:	0c bf       	out	0x3c, r16	; 60

000001dc <__do_copy_data>:
     1dc:	18 e0       	ldi	r17, 0x08	; 8
     1de:	a0 e0       	ldi	r26, 0x00	; 0
     1e0:	b2 e0       	ldi	r27, 0x02	; 2
     1e2:	ea ef       	ldi	r30, 0xFA	; 250
     1e4:	f5 e6       	ldi	r31, 0x65	; 101
     1e6:	00 e0       	ldi	r16, 0x00	; 0
     1e8:	0b bf       	out	0x3b, r16	; 59
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x14>
     1ec:	07 90       	elpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a8 33       	cpi	r26, 0x38	; 56
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0x10>

000001f6 <__do_clear_bss>:
     1f6:	28 e1       	ldi	r18, 0x18	; 24
     1f8:	a8 e3       	ldi	r26, 0x38	; 56
     1fa:	b8 e0       	ldi	r27, 0x08	; 8
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	a1 36       	cpi	r26, 0x61	; 97
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 16 1c 	call	0x382c	; 0x382c <main>
     20a:	0c 94 fb 32 	jmp	0x65f6	; 0x65f6 <_exit>

0000020e <__bad_interrupt>:
     20e:	f8 ce       	rjmp	.-528    	; 0x0 <__vectors>

00000210 <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     210:	e4 e4       	ldi	r30, 0x44	; 68
     212:	f8 e0       	ldi	r31, 0x08	; 8
     214:	a8 e4       	ldi	r26, 0x48	; 72
     216:	b8 e0       	ldi	r27, 0x08	; 8
     218:	b1 83       	std	Z+1, r27	; 0x01
     21a:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     21c:	13 82       	std	Z+3, r1	; 0x03
     21e:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     220:	e0 ef       	ldi	r30, 0xF0	; 240
     222:	f5 e1       	ldi	r31, 0x15	; 21
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     224:	f0 93 43 08 	sts	0x0843, r31	; 0x800843 <pxEnd+0x1>
     228:	e0 93 42 08 	sts	0x0842, r30	; 0x800842 <pxEnd>
    pxEnd->xBlockSize = 0;
     22c:	13 82       	std	Z+3, r1	; 0x03
     22e:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     230:	11 82       	std	Z+1, r1	; 0x01
     232:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     234:	88 ea       	ldi	r24, 0xA8	; 168
     236:	9d e0       	ldi	r25, 0x0D	; 13
     238:	13 96       	adiw	r26, 0x03	; 3
     23a:	9c 93       	st	X, r25
     23c:	8e 93       	st	-X, r24
     23e:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     240:	ed 93       	st	X+, r30
     242:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     244:	90 93 3f 08 	sts	0x083F, r25	; 0x80083f <xMinimumEverFreeBytesRemaining+0x1>
     248:	80 93 3e 08 	sts	0x083E, r24	; 0x80083e <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     24c:	90 93 41 08 	sts	0x0841, r25	; 0x800841 <xFreeBytesRemaining+0x1>
     250:	80 93 40 08 	sts	0x0840, r24	; 0x800840 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	90 e8       	ldi	r25, 0x80	; 128
     258:	90 93 39 08 	sts	0x0839, r25	; 0x800839 <__data_end+0x1>
     25c:	80 93 38 08 	sts	0x0838, r24	; 0x800838 <__data_end>
     260:	08 95       	ret

00000262 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
     266:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     268:	a4 e4       	ldi	r26, 0x44	; 68
     26a:	b8 e0       	ldi	r27, 0x08	; 8
     26c:	01 c0       	rjmp	.+2      	; 0x270 <prvInsertBlockIntoFreeList+0xe>
     26e:	df 01       	movw	r26, r30
     270:	ed 91       	ld	r30, X+
     272:	fc 91       	ld	r31, X
     274:	11 97       	sbiw	r26, 0x01	; 1
     276:	ec 17       	cp	r30, r28
     278:	fd 07       	cpc	r31, r29
     27a:	c8 f3       	brcs	.-14     	; 0x26e <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     27c:	12 96       	adiw	r26, 0x02	; 2
     27e:	8d 91       	ld	r24, X+
     280:	9c 91       	ld	r25, X
     282:	13 97       	sbiw	r26, 0x03	; 3
     284:	9d 01       	movw	r18, r26
     286:	28 0f       	add	r18, r24
     288:	39 1f       	adc	r19, r25
     28a:	c2 17       	cp	r28, r18
     28c:	d3 07       	cpc	r29, r19
     28e:	49 f4       	brne	.+18     	; 0x2a2 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     290:	2a 81       	ldd	r18, Y+2	; 0x02
     292:	3b 81       	ldd	r19, Y+3	; 0x03
     294:	82 0f       	add	r24, r18
     296:	93 1f       	adc	r25, r19
     298:	13 96       	adiw	r26, 0x03	; 3
     29a:	9c 93       	st	X, r25
     29c:	8e 93       	st	-X, r24
     29e:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     2a0:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     2a2:	8a 81       	ldd	r24, Y+2	; 0x02
     2a4:	9b 81       	ldd	r25, Y+3	; 0x03
     2a6:	9e 01       	movw	r18, r28
     2a8:	28 0f       	add	r18, r24
     2aa:	39 1f       	adc	r19, r25
     2ac:	e2 17       	cp	r30, r18
     2ae:	f3 07       	cpc	r31, r19
     2b0:	c1 f4       	brne	.+48     	; 0x2e2 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     2b2:	20 91 42 08 	lds	r18, 0x0842	; 0x800842 <pxEnd>
     2b6:	30 91 43 08 	lds	r19, 0x0843	; 0x800843 <pxEnd+0x1>
     2ba:	e2 17       	cp	r30, r18
     2bc:	f3 07       	cpc	r31, r19
     2be:	71 f0       	breq	.+28     	; 0x2dc <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     2c0:	22 81       	ldd	r18, Z+2	; 0x02
     2c2:	33 81       	ldd	r19, Z+3	; 0x03
     2c4:	82 0f       	add	r24, r18
     2c6:	93 1f       	adc	r25, r19
     2c8:	9b 83       	std	Y+3, r25	; 0x03
     2ca:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     2cc:	ed 91       	ld	r30, X+
     2ce:	fc 91       	ld	r31, X
     2d0:	11 97       	sbiw	r26, 0x01	; 1
     2d2:	80 81       	ld	r24, Z
     2d4:	91 81       	ldd	r25, Z+1	; 0x01
     2d6:	99 83       	std	Y+1, r25	; 0x01
     2d8:	88 83       	st	Y, r24
     2da:	05 c0       	rjmp	.+10     	; 0x2e6 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     2dc:	39 83       	std	Y+1, r19	; 0x01
     2de:	28 83       	st	Y, r18
     2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     2e2:	f9 83       	std	Y+1, r31	; 0x01
     2e4:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     2e6:	ca 17       	cp	r28, r26
     2e8:	db 07       	cpc	r29, r27
     2ea:	11 f0       	breq	.+4      	; 0x2f0 <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     2ec:	cd 93       	st	X+, r28
     2ee:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	08 95       	ret

000002f6 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     2f6:	ef 92       	push	r14
     2f8:	ff 92       	push	r15
     2fa:	0f 93       	push	r16
     2fc:	1f 93       	push	r17
     2fe:	cf 93       	push	r28
     300:	df 93       	push	r29
     302:	8c 01       	movw	r16, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     304:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     308:	80 91 42 08 	lds	r24, 0x0842	; 0x800842 <pxEnd>
     30c:	90 91 43 08 	lds	r25, 0x0843	; 0x800843 <pxEnd+0x1>
     310:	89 2b       	or	r24, r25
     312:	09 f4       	brne	.+2      	; 0x316 <pvPortMalloc+0x20>
        {
            prvHeapInit();
     314:	7d df       	rcall	.-262    	; 0x210 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     316:	80 91 38 08 	lds	r24, 0x0838	; 0x800838 <__data_end>
     31a:	90 91 39 08 	lds	r25, 0x0839	; 0x800839 <__data_end+0x1>
     31e:	80 23       	and	r24, r16
     320:	91 23       	and	r25, r17
     322:	89 2b       	or	r24, r25
     324:	09 f0       	breq	.+2      	; 0x328 <pvPortMalloc+0x32>
     326:	76 c0       	rjmp	.+236    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     328:	01 15       	cp	r16, r1
     32a:	11 05       	cpc	r17, r1
     32c:	49 f0       	breq	.+18     	; 0x340 <pvPortMalloc+0x4a>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     32e:	c8 01       	movw	r24, r16
     330:	04 96       	adiw	r24, 0x04	; 4
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     332:	08 17       	cp	r16, r24
     334:	19 07       	cpc	r17, r25
     336:	18 f0       	brcs	.+6      	; 0x33e <pvPortMalloc+0x48>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
     338:	00 e0       	ldi	r16, 0x00	; 0
     33a:	10 e0       	ldi	r17, 0x00	; 0
     33c:	01 c0       	rjmp	.+2      	; 0x340 <pvPortMalloc+0x4a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
            {
                xWantedSize += xHeapStructSize;
     33e:	8c 01       	movw	r16, r24
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     340:	01 15       	cp	r16, r1
     342:	11 05       	cpc	r17, r1
     344:	09 f4       	brne	.+2      	; 0x348 <pvPortMalloc+0x52>
     346:	69 c0       	rjmp	.+210    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     348:	80 91 40 08 	lds	r24, 0x0840	; 0x800840 <xFreeBytesRemaining>
     34c:	90 91 41 08 	lds	r25, 0x0841	; 0x800841 <xFreeBytesRemaining+0x1>
     350:	80 17       	cp	r24, r16
     352:	91 07       	cpc	r25, r17
     354:	08 f4       	brcc	.+2      	; 0x358 <pvPortMalloc+0x62>
     356:	64 c0       	rjmp	.+200    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     358:	c0 91 44 08 	lds	r28, 0x0844	; 0x800844 <xStart>
     35c:	d0 91 45 08 	lds	r29, 0x0845	; 0x800845 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     360:	e4 e4       	ldi	r30, 0x44	; 68
     362:	f8 e0       	ldi	r31, 0x08	; 8
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     364:	02 c0       	rjmp	.+4      	; 0x36a <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
     366:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     368:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     36a:	8a 81       	ldd	r24, Y+2	; 0x02
     36c:	9b 81       	ldd	r25, Y+3	; 0x03
     36e:	80 17       	cp	r24, r16
     370:	91 07       	cpc	r25, r17
     372:	20 f4       	brcc	.+8      	; 0x37c <pvPortMalloc+0x86>
     374:	88 81       	ld	r24, Y
     376:	99 81       	ldd	r25, Y+1	; 0x01
     378:	00 97       	sbiw	r24, 0x00	; 0
     37a:	a9 f7       	brne	.-22     	; 0x366 <pvPortMalloc+0x70>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     37c:	80 91 42 08 	lds	r24, 0x0842	; 0x800842 <pxEnd>
     380:	90 91 43 08 	lds	r25, 0x0843	; 0x800843 <pxEnd+0x1>
     384:	c8 17       	cp	r28, r24
     386:	d9 07       	cpc	r29, r25
     388:	09 f4       	brne	.+2      	; 0x38c <pvPortMalloc+0x96>
     38a:	4d c0       	rjmp	.+154    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     38c:	e0 80       	ld	r14, Z
     38e:	f1 80       	ldd	r15, Z+1	; 0x01
     390:	84 e0       	ldi	r24, 0x04	; 4
     392:	e8 0e       	add	r14, r24
     394:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     396:	88 81       	ld	r24, Y
     398:	99 81       	ldd	r25, Y+1	; 0x01
     39a:	91 83       	std	Z+1, r25	; 0x01
     39c:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     39e:	2a 81       	ldd	r18, Y+2	; 0x02
     3a0:	3b 81       	ldd	r19, Y+3	; 0x03
     3a2:	20 1b       	sub	r18, r16
     3a4:	31 0b       	sbc	r19, r17
     3a6:	29 30       	cpi	r18, 0x09	; 9
     3a8:	31 05       	cpc	r19, r1
     3aa:	48 f0       	brcs	.+18     	; 0x3be <pvPortMalloc+0xc8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     3ac:	ce 01       	movw	r24, r28
     3ae:	80 0f       	add	r24, r16
     3b0:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     3b2:	fc 01       	movw	r30, r24
     3b4:	33 83       	std	Z+3, r19	; 0x03
     3b6:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     3b8:	1b 83       	std	Y+3, r17	; 0x03

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     3ba:	0a 83       	std	Y+2, r16	; 0x02
     3bc:	52 df       	rcall	.-348    	; 0x262 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     3be:	2a 81       	ldd	r18, Y+2	; 0x02
     3c0:	3b 81       	ldd	r19, Y+3	; 0x03
     3c2:	80 91 40 08 	lds	r24, 0x0840	; 0x800840 <xFreeBytesRemaining>
     3c6:	90 91 41 08 	lds	r25, 0x0841	; 0x800841 <xFreeBytesRemaining+0x1>
     3ca:	82 1b       	sub	r24, r18
     3cc:	93 0b       	sbc	r25, r19
     3ce:	90 93 41 08 	sts	0x0841, r25	; 0x800841 <xFreeBytesRemaining+0x1>
     3d2:	80 93 40 08 	sts	0x0840, r24	; 0x800840 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     3d6:	40 91 3e 08 	lds	r20, 0x083E	; 0x80083e <xMinimumEverFreeBytesRemaining>
     3da:	50 91 3f 08 	lds	r21, 0x083F	; 0x80083f <xMinimumEverFreeBytesRemaining+0x1>
     3de:	84 17       	cp	r24, r20
     3e0:	95 07       	cpc	r25, r21
     3e2:	20 f4       	brcc	.+8      	; 0x3ec <pvPortMalloc+0xf6>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     3e4:	90 93 3f 08 	sts	0x083F, r25	; 0x80083f <xMinimumEverFreeBytesRemaining+0x1>
     3e8:	80 93 3e 08 	sts	0x083E, r24	; 0x80083e <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     3ec:	80 91 38 08 	lds	r24, 0x0838	; 0x800838 <__data_end>
     3f0:	90 91 39 08 	lds	r25, 0x0839	; 0x800839 <__data_end+0x1>
     3f4:	28 2b       	or	r18, r24
     3f6:	39 2b       	or	r19, r25
     3f8:	3b 83       	std	Y+3, r19	; 0x03
     3fa:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     3fc:	19 82       	std	Y+1, r1	; 0x01
     3fe:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     400:	80 91 3c 08 	lds	r24, 0x083C	; 0x80083c <xNumberOfSuccessfulAllocations>
     404:	90 91 3d 08 	lds	r25, 0x083D	; 0x80083d <xNumberOfSuccessfulAllocations+0x1>
     408:	01 96       	adiw	r24, 0x01	; 1
     40a:	90 93 3d 08 	sts	0x083D, r25	; 0x80083d <xNumberOfSuccessfulAllocations+0x1>
     40e:	80 93 3c 08 	sts	0x083C, r24	; 0x80083c <xNumberOfSuccessfulAllocations>
     412:	0b c0       	rjmp	.+22     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
     414:	e1 2c       	mov	r14, r1
     416:	f1 2c       	mov	r15, r1
     418:	08 c0       	rjmp	.+16     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     41a:	e1 2c       	mov	r14, r1
     41c:	f1 2c       	mov	r15, r1
     41e:	05 c0       	rjmp	.+10     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     420:	e1 2c       	mov	r14, r1
     422:	f1 2c       	mov	r15, r1
     424:	02 c0       	rjmp	.+4      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     426:	e1 2c       	mov	r14, r1
     428:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     42a:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     42e:	e1 14       	cp	r14, r1
     430:	f1 04       	cpc	r15, r1
     432:	11 f4       	brne	.+4      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     434:	0e 94 46 19 	call	0x328c	; 0x328c <vApplicationMallocFailedHook>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     438:	c7 01       	movw	r24, r14
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	1f 91       	pop	r17
     440:	0f 91       	pop	r16
     442:	ff 90       	pop	r15
     444:	ef 90       	pop	r14
     446:	08 95       	ret

00000448 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     448:	0f 93       	push	r16
     44a:	1f 93       	push	r17
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     450:	00 97       	sbiw	r24, 0x00	; 0
     452:	91 f1       	breq	.+100    	; 0x4b8 <vPortFree+0x70>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     454:	ec 01       	movw	r28, r24
     456:	24 97       	sbiw	r28, 0x04	; 4

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     458:	4a 81       	ldd	r20, Y+2	; 0x02
     45a:	5b 81       	ldd	r21, Y+3	; 0x03
     45c:	20 91 38 08 	lds	r18, 0x0838	; 0x800838 <__data_end>
     460:	30 91 39 08 	lds	r19, 0x0839	; 0x800839 <__data_end+0x1>
     464:	ba 01       	movw	r22, r20
     466:	62 23       	and	r22, r18
     468:	73 23       	and	r23, r19
     46a:	67 2b       	or	r22, r23
     46c:	29 f1       	breq	.+74     	; 0x4b8 <vPortFree+0x70>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     46e:	68 81       	ld	r22, Y
     470:	79 81       	ldd	r23, Y+1	; 0x01
     472:	67 2b       	or	r22, r23
     474:	09 f5       	brne	.+66     	; 0x4b8 <vPortFree+0x70>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     476:	20 95       	com	r18
     478:	30 95       	com	r19
     47a:	24 23       	and	r18, r20
     47c:	35 23       	and	r19, r21
     47e:	3b 83       	std	Y+3, r19	; 0x03
     480:	2a 83       	std	Y+2, r18	; 0x02

                vTaskSuspendAll();
     482:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     486:	8a 81       	ldd	r24, Y+2	; 0x02
     488:	9b 81       	ldd	r25, Y+3	; 0x03
     48a:	20 91 40 08 	lds	r18, 0x0840	; 0x800840 <xFreeBytesRemaining>
     48e:	30 91 41 08 	lds	r19, 0x0841	; 0x800841 <xFreeBytesRemaining+0x1>
     492:	82 0f       	add	r24, r18
     494:	93 1f       	adc	r25, r19
     496:	90 93 41 08 	sts	0x0841, r25	; 0x800841 <xFreeBytesRemaining+0x1>
     49a:	80 93 40 08 	sts	0x0840, r24	; 0x800840 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     49e:	ce 01       	movw	r24, r28
     4a0:	e0 de       	rcall	.-576    	; 0x262 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     4a2:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <xNumberOfSuccessfulFrees>
     4a6:	90 91 3b 08 	lds	r25, 0x083B	; 0x80083b <xNumberOfSuccessfulFrees+0x1>
     4aa:	01 96       	adiw	r24, 0x01	; 1
     4ac:	90 93 3b 08 	sts	0x083B, r25	; 0x80083b <xNumberOfSuccessfulFrees+0x1>
     4b0:	80 93 3a 08 	sts	0x083A, r24	; 0x80083a <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     4b4:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	1f 91       	pop	r17
     4be:	0f 91       	pop	r16
     4c0:	08 95       	ret

000004c2 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     4c2:	fc 01       	movw	r30, r24
     4c4:	03 96       	adiw	r24, 0x03	; 3
     4c6:	92 83       	std	Z+2, r25	; 0x02
     4c8:	81 83       	std	Z+1, r24	; 0x01
     4ca:	4f ef       	ldi	r20, 0xFF	; 255
     4cc:	5f ef       	ldi	r21, 0xFF	; 255
     4ce:	ba 01       	movw	r22, r20
     4d0:	43 83       	std	Z+3, r20	; 0x03
     4d2:	54 83       	std	Z+4, r21	; 0x04
     4d4:	65 83       	std	Z+5, r22	; 0x05
     4d6:	76 83       	std	Z+6, r23	; 0x06
     4d8:	90 87       	std	Z+8, r25	; 0x08
     4da:	87 83       	std	Z+7, r24	; 0x07
     4dc:	92 87       	std	Z+10, r25	; 0x0a
     4de:	81 87       	std	Z+9, r24	; 0x09
     4e0:	10 82       	st	Z, r1
     4e2:	08 95       	ret

000004e4 <vListInitialiseItem>:
     4e4:	fc 01       	movw	r30, r24
     4e6:	13 86       	std	Z+11, r1	; 0x0b
     4e8:	12 86       	std	Z+10, r1	; 0x0a
     4ea:	08 95       	ret

000004ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     4ec:	0f 93       	push	r16
     4ee:	1f 93       	push	r17
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
     4f4:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     4f6:	08 81       	ld	r16, Y
     4f8:	19 81       	ldd	r17, Y+1	; 0x01
     4fa:	2a 81       	ldd	r18, Y+2	; 0x02
     4fc:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     4fe:	0f 3f       	cpi	r16, 0xFF	; 255
     500:	4f ef       	ldi	r20, 0xFF	; 255
     502:	14 07       	cpc	r17, r20
     504:	24 07       	cpc	r18, r20
     506:	34 07       	cpc	r19, r20
     508:	21 f4       	brne	.+8      	; 0x512 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     50a:	fc 01       	movw	r30, r24
     50c:	a1 85       	ldd	r26, Z+9	; 0x09
     50e:	b2 85       	ldd	r27, Z+10	; 0x0a
     510:	11 c0       	rjmp	.+34     	; 0x534 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     512:	dc 01       	movw	r26, r24
     514:	13 96       	adiw	r26, 0x03	; 3
     516:	01 c0       	rjmp	.+2      	; 0x51a <vListInsert+0x2e>
     518:	df 01       	movw	r26, r30
     51a:	14 96       	adiw	r26, 0x04	; 4
     51c:	ed 91       	ld	r30, X+
     51e:	fc 91       	ld	r31, X
     520:	15 97       	sbiw	r26, 0x05	; 5
     522:	40 81       	ld	r20, Z
     524:	51 81       	ldd	r21, Z+1	; 0x01
     526:	62 81       	ldd	r22, Z+2	; 0x02
     528:	73 81       	ldd	r23, Z+3	; 0x03
     52a:	04 17       	cp	r16, r20
     52c:	15 07       	cpc	r17, r21
     52e:	26 07       	cpc	r18, r22
     530:	37 07       	cpc	r19, r23
     532:	90 f7       	brcc	.-28     	; 0x518 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     534:	14 96       	adiw	r26, 0x04	; 4
     536:	ed 91       	ld	r30, X+
     538:	fc 91       	ld	r31, X
     53a:	15 97       	sbiw	r26, 0x05	; 5
     53c:	fd 83       	std	Y+5, r31	; 0x05
     53e:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     540:	d7 83       	std	Z+7, r29	; 0x07
     542:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     544:	bf 83       	std	Y+7, r27	; 0x07
     546:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     548:	15 96       	adiw	r26, 0x05	; 5
     54a:	dc 93       	st	X, r29
     54c:	ce 93       	st	-X, r28
     54e:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     550:	9b 87       	std	Y+11, r25	; 0x0b
     552:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     554:	fc 01       	movw	r30, r24
     556:	20 81       	ld	r18, Z
     558:	2f 5f       	subi	r18, 0xFF	; 255
     55a:	20 83       	st	Z, r18
}
     55c:	df 91       	pop	r29
     55e:	cf 91       	pop	r28
     560:	1f 91       	pop	r17
     562:	0f 91       	pop	r16
     564:	08 95       	ret

00000566 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     56c:	a2 85       	ldd	r26, Z+10	; 0x0a
     56e:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     570:	c4 81       	ldd	r28, Z+4	; 0x04
     572:	d5 81       	ldd	r29, Z+5	; 0x05
     574:	86 81       	ldd	r24, Z+6	; 0x06
     576:	97 81       	ldd	r25, Z+7	; 0x07
     578:	9f 83       	std	Y+7, r25	; 0x07
     57a:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     57c:	c6 81       	ldd	r28, Z+6	; 0x06
     57e:	d7 81       	ldd	r29, Z+7	; 0x07
     580:	84 81       	ldd	r24, Z+4	; 0x04
     582:	95 81       	ldd	r25, Z+5	; 0x05
     584:	9d 83       	std	Y+5, r25	; 0x05
     586:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     588:	11 96       	adiw	r26, 0x01	; 1
     58a:	8d 91       	ld	r24, X+
     58c:	9c 91       	ld	r25, X
     58e:	12 97       	sbiw	r26, 0x02	; 2
     590:	e8 17       	cp	r30, r24
     592:	f9 07       	cpc	r31, r25
     594:	31 f4       	brne	.+12     	; 0x5a2 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     596:	86 81       	ldd	r24, Z+6	; 0x06
     598:	97 81       	ldd	r25, Z+7	; 0x07
     59a:	12 96       	adiw	r26, 0x02	; 2
     59c:	9c 93       	st	X, r25
     59e:	8e 93       	st	-X, r24
     5a0:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     5a2:	13 86       	std	Z+11, r1	; 0x0b
     5a4:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     5a6:	8c 91       	ld	r24, X
     5a8:	81 50       	subi	r24, 0x01	; 1
     5aa:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     5ac:	8c 91       	ld	r24, X
}
     5ae:	df 91       	pop	r29
     5b0:	cf 91       	pop	r28
     5b2:	08 95       	ret

000005b4 <prvSetupTimerInterrupt>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     5b4:	a8 95       	wdr
     5b6:	90 ec       	ldi	r25, 0xC0	; 192
     5b8:	88 e1       	ldi	r24, 0x18	; 24
     5ba:	0f b6       	in	r0, 0x3f	; 63
     5bc:	f8 94       	cli
     5be:	a8 95       	wdr
     5c0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     5c4:	0f be       	out	0x3f, r0	; 63
     5c6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7c0060>
     5ca:	08 95       	ret

000005cc <pxPortInitialiseStack>:
     5cc:	fc 01       	movw	r30, r24
     5ce:	60 83       	st	Z, r22
     5d0:	31 97       	sbiw	r30, 0x01	; 1
     5d2:	70 83       	st	Z, r23
     5d4:	31 97       	sbiw	r30, 0x01	; 1
     5d6:	10 82       	st	Z, r1
     5d8:	31 97       	sbiw	r30, 0x01	; 1
     5da:	10 82       	st	Z, r1
     5dc:	31 97       	sbiw	r30, 0x01	; 1
     5de:	20 e8       	ldi	r18, 0x80	; 128
     5e0:	20 83       	st	Z, r18
     5e2:	31 97       	sbiw	r30, 0x01	; 1
     5e4:	10 82       	st	Z, r1
     5e6:	31 97       	sbiw	r30, 0x01	; 1
     5e8:	10 82       	st	Z, r1
     5ea:	31 97       	sbiw	r30, 0x01	; 1
     5ec:	10 82       	st	Z, r1
     5ee:	77 97       	sbiw	r30, 0x17	; 23
     5f0:	40 83       	st	Z, r20
     5f2:	31 97       	sbiw	r30, 0x01	; 1
     5f4:	50 83       	st	Z, r21
     5f6:	86 97       	sbiw	r24, 0x26	; 38
     5f8:	08 95       	ret

000005fa <xPortStartScheduler>:
     5fa:	dc df       	rcall	.-72     	; 0x5b4 <prvSetupTimerInterrupt>
     5fc:	a0 91 b3 16 	lds	r26, 0x16B3	; 0x8016b3 <pxCurrentTCB>
     600:	b0 91 b4 16 	lds	r27, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
     604:	cd 91       	ld	r28, X+
     606:	cd bf       	out	0x3d, r28	; 61
     608:	dd 91       	ld	r29, X+
     60a:	de bf       	out	0x3e, r29	; 62
     60c:	ff 91       	pop	r31
     60e:	ef 91       	pop	r30
     610:	df 91       	pop	r29
     612:	cf 91       	pop	r28
     614:	bf 91       	pop	r27
     616:	af 91       	pop	r26
     618:	9f 91       	pop	r25
     61a:	8f 91       	pop	r24
     61c:	7f 91       	pop	r23
     61e:	6f 91       	pop	r22
     620:	5f 91       	pop	r21
     622:	4f 91       	pop	r20
     624:	3f 91       	pop	r19
     626:	2f 91       	pop	r18
     628:	1f 91       	pop	r17
     62a:	0f 91       	pop	r16
     62c:	ff 90       	pop	r15
     62e:	ef 90       	pop	r14
     630:	df 90       	pop	r13
     632:	cf 90       	pop	r12
     634:	bf 90       	pop	r11
     636:	af 90       	pop	r10
     638:	9f 90       	pop	r9
     63a:	8f 90       	pop	r8
     63c:	7f 90       	pop	r7
     63e:	6f 90       	pop	r6
     640:	5f 90       	pop	r5
     642:	4f 90       	pop	r4
     644:	3f 90       	pop	r3
     646:	2f 90       	pop	r2
     648:	1f 90       	pop	r1
     64a:	0f 90       	pop	r0
     64c:	0c be       	out	0x3c, r0	; 60
     64e:	0f 90       	pop	r0
     650:	0b be       	out	0x3b, r0	; 59
     652:	0f 90       	pop	r0
     654:	0f be       	out	0x3f, r0	; 63
     656:	0f 90       	pop	r0
     658:	08 95       	ret
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	08 95       	ret

0000065e <vPortYield>:
     65e:	0f 92       	push	r0
     660:	0f b6       	in	r0, 0x3f	; 63
     662:	f8 94       	cli
     664:	0f 92       	push	r0
     666:	0b b6       	in	r0, 0x3b	; 59
     668:	0f 92       	push	r0
     66a:	0c b6       	in	r0, 0x3c	; 60
     66c:	0f 92       	push	r0
     66e:	1f 92       	push	r1
     670:	11 24       	eor	r1, r1
     672:	2f 92       	push	r2
     674:	3f 92       	push	r3
     676:	4f 92       	push	r4
     678:	5f 92       	push	r5
     67a:	6f 92       	push	r6
     67c:	7f 92       	push	r7
     67e:	8f 92       	push	r8
     680:	9f 92       	push	r9
     682:	af 92       	push	r10
     684:	bf 92       	push	r11
     686:	cf 92       	push	r12
     688:	df 92       	push	r13
     68a:	ef 92       	push	r14
     68c:	ff 92       	push	r15
     68e:	0f 93       	push	r16
     690:	1f 93       	push	r17
     692:	2f 93       	push	r18
     694:	3f 93       	push	r19
     696:	4f 93       	push	r20
     698:	5f 93       	push	r21
     69a:	6f 93       	push	r22
     69c:	7f 93       	push	r23
     69e:	8f 93       	push	r24
     6a0:	9f 93       	push	r25
     6a2:	af 93       	push	r26
     6a4:	bf 93       	push	r27
     6a6:	cf 93       	push	r28
     6a8:	df 93       	push	r29
     6aa:	ef 93       	push	r30
     6ac:	ff 93       	push	r31
     6ae:	a0 91 b3 16 	lds	r26, 0x16B3	; 0x8016b3 <pxCurrentTCB>
     6b2:	b0 91 b4 16 	lds	r27, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
     6b6:	0d b6       	in	r0, 0x3d	; 61
     6b8:	0d 92       	st	X+, r0
     6ba:	0e b6       	in	r0, 0x3e	; 62
     6bc:	0d 92       	st	X+, r0
     6be:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <vTaskSwitchContext>
     6c2:	a0 91 b3 16 	lds	r26, 0x16B3	; 0x8016b3 <pxCurrentTCB>
     6c6:	b0 91 b4 16 	lds	r27, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
     6ca:	cd 91       	ld	r28, X+
     6cc:	cd bf       	out	0x3d, r28	; 61
     6ce:	dd 91       	ld	r29, X+
     6d0:	de bf       	out	0x3e, r29	; 62
     6d2:	ff 91       	pop	r31
     6d4:	ef 91       	pop	r30
     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28
     6da:	bf 91       	pop	r27
     6dc:	af 91       	pop	r26
     6de:	9f 91       	pop	r25
     6e0:	8f 91       	pop	r24
     6e2:	7f 91       	pop	r23
     6e4:	6f 91       	pop	r22
     6e6:	5f 91       	pop	r21
     6e8:	4f 91       	pop	r20
     6ea:	3f 91       	pop	r19
     6ec:	2f 91       	pop	r18
     6ee:	1f 91       	pop	r17
     6f0:	0f 91       	pop	r16
     6f2:	ff 90       	pop	r15
     6f4:	ef 90       	pop	r14
     6f6:	df 90       	pop	r13
     6f8:	cf 90       	pop	r12
     6fa:	bf 90       	pop	r11
     6fc:	af 90       	pop	r10
     6fe:	9f 90       	pop	r9
     700:	8f 90       	pop	r8
     702:	7f 90       	pop	r7
     704:	6f 90       	pop	r6
     706:	5f 90       	pop	r5
     708:	4f 90       	pop	r4
     70a:	3f 90       	pop	r3
     70c:	2f 90       	pop	r2
     70e:	1f 90       	pop	r1
     710:	0f 90       	pop	r0
     712:	0c be       	out	0x3c, r0	; 60
     714:	0f 90       	pop	r0
     716:	0b be       	out	0x3b, r0	; 59
     718:	0f 90       	pop	r0
     71a:	0f be       	out	0x3f, r0	; 63
     71c:	0f 90       	pop	r0
     71e:	08 95       	ret

00000720 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     720:	0f 92       	push	r0
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	f8 94       	cli
     726:	0f 92       	push	r0
     728:	0b b6       	in	r0, 0x3b	; 59
     72a:	0f 92       	push	r0
     72c:	0c b6       	in	r0, 0x3c	; 60
     72e:	0f 92       	push	r0
     730:	1f 92       	push	r1
     732:	11 24       	eor	r1, r1
     734:	2f 92       	push	r2
     736:	3f 92       	push	r3
     738:	4f 92       	push	r4
     73a:	5f 92       	push	r5
     73c:	6f 92       	push	r6
     73e:	7f 92       	push	r7
     740:	8f 92       	push	r8
     742:	9f 92       	push	r9
     744:	af 92       	push	r10
     746:	bf 92       	push	r11
     748:	cf 92       	push	r12
     74a:	df 92       	push	r13
     74c:	ef 92       	push	r14
     74e:	ff 92       	push	r15
     750:	0f 93       	push	r16
     752:	1f 93       	push	r17
     754:	2f 93       	push	r18
     756:	3f 93       	push	r19
     758:	4f 93       	push	r20
     75a:	5f 93       	push	r21
     75c:	6f 93       	push	r22
     75e:	7f 93       	push	r23
     760:	8f 93       	push	r24
     762:	9f 93       	push	r25
     764:	af 93       	push	r26
     766:	bf 93       	push	r27
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
     76c:	ef 93       	push	r30
     76e:	ff 93       	push	r31
     770:	a0 91 b3 16 	lds	r26, 0x16B3	; 0x8016b3 <pxCurrentTCB>
     774:	b0 91 b4 16 	lds	r27, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
     778:	0d b6       	in	r0, 0x3d	; 61
     77a:	0d 92       	st	X+, r0
     77c:	0e b6       	in	r0, 0x3e	; 62
     77e:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     780:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     782:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <xTaskIncrementTick>
     786:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     788:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     78c:	a0 91 b3 16 	lds	r26, 0x16B3	; 0x8016b3 <pxCurrentTCB>
     790:	b0 91 b4 16 	lds	r27, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
     794:	cd 91       	ld	r28, X+
     796:	cd bf       	out	0x3d, r28	; 61
     798:	dd 91       	ld	r29, X+
     79a:	de bf       	out	0x3e, r29	; 62
     79c:	ff 91       	pop	r31
     79e:	ef 91       	pop	r30
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	bf 91       	pop	r27
     7a6:	af 91       	pop	r26
     7a8:	9f 91       	pop	r25
     7aa:	8f 91       	pop	r24
     7ac:	7f 91       	pop	r23
     7ae:	6f 91       	pop	r22
     7b0:	5f 91       	pop	r21
     7b2:	4f 91       	pop	r20
     7b4:	3f 91       	pop	r19
     7b6:	2f 91       	pop	r18
     7b8:	1f 91       	pop	r17
     7ba:	0f 91       	pop	r16
     7bc:	ff 90       	pop	r15
     7be:	ef 90       	pop	r14
     7c0:	df 90       	pop	r13
     7c2:	cf 90       	pop	r12
     7c4:	bf 90       	pop	r11
     7c6:	af 90       	pop	r10
     7c8:	9f 90       	pop	r9
     7ca:	8f 90       	pop	r8
     7cc:	7f 90       	pop	r7
     7ce:	6f 90       	pop	r6
     7d0:	5f 90       	pop	r5
     7d2:	4f 90       	pop	r4
     7d4:	3f 90       	pop	r3
     7d6:	2f 90       	pop	r2
     7d8:	1f 90       	pop	r1
     7da:	0f 90       	pop	r0
     7dc:	0c be       	out	0x3c, r0	; 60
     7de:	0f 90       	pop	r0
     7e0:	0b be       	out	0x3b, r0	; 59
     7e2:	0f 90       	pop	r0
     7e4:	0f be       	out	0x3f, r0	; 63
     7e6:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     7e8:	08 95       	ret

000007ea <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     7ea:	9a df       	rcall	.-204    	; 0x720 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     7ec:	18 95       	reti

000007ee <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     7ee:	dc 01       	movw	r26, r24
     7f0:	53 96       	adiw	r26, 0x13	; 19
     7f2:	2c 91       	ld	r18, X
     7f4:	53 97       	sbiw	r26, 0x13	; 19
     7f6:	22 23       	and	r18, r18
     7f8:	41 f0       	breq	.+16     	; 0x80a <prvGetDisinheritPriorityAfterTimeout+0x1c>
     7fa:	5a 96       	adiw	r26, 0x1a	; 26
     7fc:	ed 91       	ld	r30, X+
     7fe:	fc 91       	ld	r31, X
     800:	5b 97       	sbiw	r26, 0x1b	; 27
     802:	90 81       	ld	r25, Z
     804:	8a e0       	ldi	r24, 0x0A	; 10
     806:	89 1b       	sub	r24, r25
     808:	08 95       	ret
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	08 95       	ret

0000080e <prvIsQueueEmpty>:
     80e:	0f b6       	in	r0, 0x3f	; 63
     810:	f8 94       	cli
     812:	0f 92       	push	r0
     814:	fc 01       	movw	r30, r24
     816:	86 8d       	ldd	r24, Z+30	; 0x1e
     818:	81 11       	cpse	r24, r1
     81a:	02 c0       	rjmp	.+4      	; 0x820 <prvIsQueueEmpty+0x12>
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	01 c0       	rjmp	.+2      	; 0x822 <prvIsQueueEmpty+0x14>
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	0f 90       	pop	r0
     824:	0f be       	out	0x3f, r0	; 63
     826:	08 95       	ret

00000828 <prvIsQueueFull>:
     828:	0f b6       	in	r0, 0x3f	; 63
     82a:	f8 94       	cli
     82c:	0f 92       	push	r0
     82e:	fc 01       	movw	r30, r24
     830:	26 8d       	ldd	r18, Z+30	; 0x1e
     832:	87 8d       	ldd	r24, Z+31	; 0x1f
     834:	28 13       	cpse	r18, r24
     836:	02 c0       	rjmp	.+4      	; 0x83c <prvIsQueueFull+0x14>
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	01 c0       	rjmp	.+2      	; 0x83e <prvIsQueueFull+0x16>
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	0f 90       	pop	r0
     840:	0f be       	out	0x3f, r0	; 63
     842:	08 95       	ret

00000844 <prvCopyDataToQueue>:
     844:	0f 93       	push	r16
     846:	1f 93       	push	r17
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	ec 01       	movw	r28, r24
     84e:	04 2f       	mov	r16, r20
     850:	1e 8d       	ldd	r17, Y+30	; 0x1e
     852:	48 a1       	ldd	r20, Y+32	; 0x20
     854:	41 11       	cpse	r20, r1
     856:	0c c0       	rjmp	.+24     	; 0x870 <prvCopyDataToQueue+0x2c>
     858:	88 81       	ld	r24, Y
     85a:	99 81       	ldd	r25, Y+1	; 0x01
     85c:	89 2b       	or	r24, r25
     85e:	09 f0       	breq	.+2      	; 0x862 <prvCopyDataToQueue+0x1e>
     860:	42 c0       	rjmp	.+132    	; 0x8e6 <prvCopyDataToQueue+0xa2>
     862:	8c 81       	ldd	r24, Y+4	; 0x04
     864:	9d 81       	ldd	r25, Y+5	; 0x05
     866:	0e 94 8c 12 	call	0x2518	; 0x2518 <xTaskPriorityDisinherit>
     86a:	1d 82       	std	Y+5, r1	; 0x05
     86c:	1c 82       	std	Y+4, r1	; 0x04
     86e:	42 c0       	rjmp	.+132    	; 0x8f4 <prvCopyDataToQueue+0xb0>
     870:	01 11       	cpse	r16, r1
     872:	17 c0       	rjmp	.+46     	; 0x8a2 <prvCopyDataToQueue+0x5e>
     874:	50 e0       	ldi	r21, 0x00	; 0
     876:	8a 81       	ldd	r24, Y+2	; 0x02
     878:	9b 81       	ldd	r25, Y+3	; 0x03
     87a:	0e 94 7e 2f 	call	0x5efc	; 0x5efc <memcpy>
     87e:	28 a1       	ldd	r18, Y+32	; 0x20
     880:	8a 81       	ldd	r24, Y+2	; 0x02
     882:	9b 81       	ldd	r25, Y+3	; 0x03
     884:	82 0f       	add	r24, r18
     886:	91 1d       	adc	r25, r1
     888:	9b 83       	std	Y+3, r25	; 0x03
     88a:	8a 83       	std	Y+2, r24	; 0x02
     88c:	2c 81       	ldd	r18, Y+4	; 0x04
     88e:	3d 81       	ldd	r19, Y+5	; 0x05
     890:	82 17       	cp	r24, r18
     892:	93 07       	cpc	r25, r19
     894:	50 f1       	brcs	.+84     	; 0x8ea <prvCopyDataToQueue+0xa6>
     896:	88 81       	ld	r24, Y
     898:	99 81       	ldd	r25, Y+1	; 0x01
     89a:	9b 83       	std	Y+3, r25	; 0x03
     89c:	8a 83       	std	Y+2, r24	; 0x02
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	29 c0       	rjmp	.+82     	; 0x8f4 <prvCopyDataToQueue+0xb0>
     8a2:	50 e0       	ldi	r21, 0x00	; 0
     8a4:	8e 81       	ldd	r24, Y+6	; 0x06
     8a6:	9f 81       	ldd	r25, Y+7	; 0x07
     8a8:	0e 94 7e 2f 	call	0x5efc	; 0x5efc <memcpy>
     8ac:	88 a1       	ldd	r24, Y+32	; 0x20
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	91 95       	neg	r25
     8b2:	81 95       	neg	r24
     8b4:	91 09       	sbc	r25, r1
     8b6:	2e 81       	ldd	r18, Y+6	; 0x06
     8b8:	3f 81       	ldd	r19, Y+7	; 0x07
     8ba:	28 0f       	add	r18, r24
     8bc:	39 1f       	adc	r19, r25
     8be:	3f 83       	std	Y+7, r19	; 0x07
     8c0:	2e 83       	std	Y+6, r18	; 0x06
     8c2:	48 81       	ld	r20, Y
     8c4:	59 81       	ldd	r21, Y+1	; 0x01
     8c6:	24 17       	cp	r18, r20
     8c8:	35 07       	cpc	r19, r21
     8ca:	30 f4       	brcc	.+12     	; 0x8d8 <prvCopyDataToQueue+0x94>
     8cc:	2c 81       	ldd	r18, Y+4	; 0x04
     8ce:	3d 81       	ldd	r19, Y+5	; 0x05
     8d0:	82 0f       	add	r24, r18
     8d2:	93 1f       	adc	r25, r19
     8d4:	9f 83       	std	Y+7, r25	; 0x07
     8d6:	8e 83       	std	Y+6, r24	; 0x06
     8d8:	02 30       	cpi	r16, 0x02	; 2
     8da:	49 f4       	brne	.+18     	; 0x8ee <prvCopyDataToQueue+0xaa>
     8dc:	11 23       	and	r17, r17
     8de:	49 f0       	breq	.+18     	; 0x8f2 <prvCopyDataToQueue+0xae>
     8e0:	11 50       	subi	r17, 0x01	; 1
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	07 c0       	rjmp	.+14     	; 0x8f4 <prvCopyDataToQueue+0xb0>
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	05 c0       	rjmp	.+10     	; 0x8f4 <prvCopyDataToQueue+0xb0>
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	03 c0       	rjmp	.+6      	; 0x8f4 <prvCopyDataToQueue+0xb0>
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	01 c0       	rjmp	.+2      	; 0x8f4 <prvCopyDataToQueue+0xb0>
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	1f 5f       	subi	r17, 0xFF	; 255
     8f6:	1e 8f       	std	Y+30, r17	; 0x1e
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	0f 91       	pop	r16
     900:	08 95       	ret

00000902 <prvCopyDataFromQueue>:
     902:	fc 01       	movw	r30, r24
     904:	40 a1       	ldd	r20, Z+32	; 0x20
     906:	44 23       	and	r20, r20
     908:	a9 f0       	breq	.+42     	; 0x934 <prvCopyDataFromQueue+0x32>
     90a:	50 e0       	ldi	r21, 0x00	; 0
     90c:	26 81       	ldd	r18, Z+6	; 0x06
     90e:	37 81       	ldd	r19, Z+7	; 0x07
     910:	24 0f       	add	r18, r20
     912:	35 1f       	adc	r19, r21
     914:	37 83       	std	Z+7, r19	; 0x07
     916:	26 83       	std	Z+6, r18	; 0x06
     918:	84 81       	ldd	r24, Z+4	; 0x04
     91a:	95 81       	ldd	r25, Z+5	; 0x05
     91c:	28 17       	cp	r18, r24
     91e:	39 07       	cpc	r19, r25
     920:	20 f0       	brcs	.+8      	; 0x92a <prvCopyDataFromQueue+0x28>
     922:	80 81       	ld	r24, Z
     924:	91 81       	ldd	r25, Z+1	; 0x01
     926:	97 83       	std	Z+7, r25	; 0x07
     928:	86 83       	std	Z+6, r24	; 0x06
     92a:	cb 01       	movw	r24, r22
     92c:	66 81       	ldd	r22, Z+6	; 0x06
     92e:	77 81       	ldd	r23, Z+7	; 0x07
     930:	0c 94 7e 2f 	jmp	0x5efc	; 0x5efc <memcpy>
     934:	08 95       	ret

00000936 <prvUnlockQueue>:
     936:	1f 93       	push	r17
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
     93c:	ec 01       	movw	r28, r24
     93e:	0f b6       	in	r0, 0x3f	; 63
     940:	f8 94       	cli
     942:	0f 92       	push	r0
     944:	1a a1       	ldd	r17, Y+34	; 0x22
     946:	0b c0       	rjmp	.+22     	; 0x95e <prvUnlockQueue+0x28>
     948:	8b 89       	ldd	r24, Y+19	; 0x13
     94a:	88 23       	and	r24, r24
     94c:	51 f0       	breq	.+20     	; 0x962 <prvUnlockQueue+0x2c>
     94e:	ce 01       	movw	r24, r28
     950:	43 96       	adiw	r24, 0x13	; 19
     952:	0e 94 b2 10 	call	0x2164	; 0x2164 <xTaskRemoveFromEventList>
     956:	81 11       	cpse	r24, r1
     958:	0e 94 ee 11 	call	0x23dc	; 0x23dc <vTaskMissedYield>
     95c:	11 50       	subi	r17, 0x01	; 1
     95e:	11 16       	cp	r1, r17
     960:	9c f3       	brlt	.-26     	; 0x948 <prvUnlockQueue+0x12>
     962:	8f ef       	ldi	r24, 0xFF	; 255
     964:	8a a3       	std	Y+34, r24	; 0x22
     966:	0f 90       	pop	r0
     968:	0f be       	out	0x3f, r0	; 63
     96a:	0f b6       	in	r0, 0x3f	; 63
     96c:	f8 94       	cli
     96e:	0f 92       	push	r0
     970:	19 a1       	ldd	r17, Y+33	; 0x21
     972:	0b c0       	rjmp	.+22     	; 0x98a <prvUnlockQueue+0x54>
     974:	88 85       	ldd	r24, Y+8	; 0x08
     976:	88 23       	and	r24, r24
     978:	51 f0       	breq	.+20     	; 0x98e <prvUnlockQueue+0x58>
     97a:	ce 01       	movw	r24, r28
     97c:	08 96       	adiw	r24, 0x08	; 8
     97e:	0e 94 b2 10 	call	0x2164	; 0x2164 <xTaskRemoveFromEventList>
     982:	81 11       	cpse	r24, r1
     984:	0e 94 ee 11 	call	0x23dc	; 0x23dc <vTaskMissedYield>
     988:	11 50       	subi	r17, 0x01	; 1
     98a:	11 16       	cp	r1, r17
     98c:	9c f3       	brlt	.-26     	; 0x974 <prvUnlockQueue+0x3e>
     98e:	8f ef       	ldi	r24, 0xFF	; 255
     990:	89 a3       	std	Y+33, r24	; 0x21
     992:	0f 90       	pop	r0
     994:	0f be       	out	0x3f, r0	; 63
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	1f 91       	pop	r17
     99c:	08 95       	ret

0000099e <xQueueGenericReset>:
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	ec 01       	movw	r28, r24
     9a4:	0f b6       	in	r0, 0x3f	; 63
     9a6:	f8 94       	cli
     9a8:	0f 92       	push	r0
     9aa:	e8 81       	ld	r30, Y
     9ac:	f9 81       	ldd	r31, Y+1	; 0x01
     9ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
     9b0:	28 a1       	ldd	r18, Y+32	; 0x20
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	82 9f       	mul	r24, r18
     9b8:	a0 01       	movw	r20, r0
     9ba:	83 9f       	mul	r24, r19
     9bc:	50 0d       	add	r21, r0
     9be:	92 9f       	mul	r25, r18
     9c0:	50 0d       	add	r21, r0
     9c2:	11 24       	eor	r1, r1
     9c4:	4e 0f       	add	r20, r30
     9c6:	5f 1f       	adc	r21, r31
     9c8:	5d 83       	std	Y+5, r21	; 0x05
     9ca:	4c 83       	std	Y+4, r20	; 0x04
     9cc:	1e 8e       	std	Y+30, r1	; 0x1e
     9ce:	fb 83       	std	Y+3, r31	; 0x03
     9d0:	ea 83       	std	Y+2, r30	; 0x02
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	28 9f       	mul	r18, r24
     9d6:	a0 01       	movw	r20, r0
     9d8:	29 9f       	mul	r18, r25
     9da:	50 0d       	add	r21, r0
     9dc:	38 9f       	mul	r19, r24
     9de:	50 0d       	add	r21, r0
     9e0:	11 24       	eor	r1, r1
     9e2:	cf 01       	movw	r24, r30
     9e4:	84 0f       	add	r24, r20
     9e6:	95 1f       	adc	r25, r21
     9e8:	9f 83       	std	Y+7, r25	; 0x07
     9ea:	8e 83       	std	Y+6, r24	; 0x06
     9ec:	8f ef       	ldi	r24, 0xFF	; 255
     9ee:	89 a3       	std	Y+33, r24	; 0x21
     9f0:	8a a3       	std	Y+34, r24	; 0x22
     9f2:	61 11       	cpse	r22, r1
     9f4:	0b c0       	rjmp	.+22     	; 0xa0c <xQueueGenericReset+0x6e>
     9f6:	88 85       	ldd	r24, Y+8	; 0x08
     9f8:	88 23       	and	r24, r24
     9fa:	71 f0       	breq	.+28     	; 0xa18 <xQueueGenericReset+0x7a>
     9fc:	ce 01       	movw	r24, r28
     9fe:	08 96       	adiw	r24, 0x08	; 8
     a00:	0e 94 b2 10 	call	0x2164	; 0x2164 <xTaskRemoveFromEventList>
     a04:	88 23       	and	r24, r24
     a06:	41 f0       	breq	.+16     	; 0xa18 <xQueueGenericReset+0x7a>
     a08:	2a de       	rcall	.-940    	; 0x65e <vPortYield>
     a0a:	06 c0       	rjmp	.+12     	; 0xa18 <xQueueGenericReset+0x7a>
     a0c:	ce 01       	movw	r24, r28
     a0e:	08 96       	adiw	r24, 0x08	; 8
     a10:	58 dd       	rcall	.-1360   	; 0x4c2 <vListInitialise>
     a12:	ce 01       	movw	r24, r28
     a14:	43 96       	adiw	r24, 0x13	; 19
     a16:	55 dd       	rcall	.-1366   	; 0x4c2 <vListInitialise>
     a18:	0f 90       	pop	r0
     a1a:	0f be       	out	0x3f, r0	; 63
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	df 91       	pop	r29
     a20:	cf 91       	pop	r28
     a22:	08 95       	ret

00000a24 <prvInitialiseNewQueue>:
     a24:	0f 93       	push	r16
     a26:	1f 93       	push	r17
     a28:	f8 01       	movw	r30, r16
     a2a:	61 11       	cpse	r22, r1
     a2c:	03 c0       	rjmp	.+6      	; 0xa34 <prvInitialiseNewQueue+0x10>
     a2e:	11 83       	std	Z+1, r17	; 0x01
     a30:	00 83       	st	Z, r16
     a32:	02 c0       	rjmp	.+4      	; 0xa38 <prvInitialiseNewQueue+0x14>
     a34:	51 83       	std	Z+1, r21	; 0x01
     a36:	40 83       	st	Z, r20
     a38:	87 8f       	std	Z+31, r24	; 0x1f
     a3a:	60 a3       	std	Z+32, r22	; 0x20
     a3c:	61 e0       	ldi	r22, 0x01	; 1
     a3e:	cf 01       	movw	r24, r30
     a40:	ae df       	rcall	.-164    	; 0x99e <xQueueGenericReset>
     a42:	1f 91       	pop	r17
     a44:	0f 91       	pop	r16
     a46:	08 95       	ret

00000a48 <xQueueGenericCreate>:
     a48:	df 92       	push	r13
     a4a:	ef 92       	push	r14
     a4c:	ff 92       	push	r15
     a4e:	0f 93       	push	r16
     a50:	1f 93       	push	r17
     a52:	cf 93       	push	r28
     a54:	df 93       	push	r29
     a56:	f8 2e       	mov	r15, r24
     a58:	e6 2e       	mov	r14, r22
     a5a:	d4 2e       	mov	r13, r20
     a5c:	86 9f       	mul	r24, r22
     a5e:	c0 01       	movw	r24, r0
     a60:	11 24       	eor	r1, r1
     a62:	83 96       	adiw	r24, 0x23	; 35
     a64:	48 dc       	rcall	.-1904   	; 0x2f6 <pvPortMalloc>
     a66:	ec 01       	movw	r28, r24
     a68:	00 97       	sbiw	r24, 0x00	; 0
     a6a:	41 f0       	breq	.+16     	; 0xa7c <xQueueGenericCreate+0x34>
     a6c:	8c 01       	movw	r16, r24
     a6e:	2d 2d       	mov	r18, r13
     a70:	ac 01       	movw	r20, r24
     a72:	4d 5d       	subi	r20, 0xDD	; 221
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	6e 2d       	mov	r22, r14
     a78:	8f 2d       	mov	r24, r15
     a7a:	d4 df       	rcall	.-88     	; 0xa24 <prvInitialiseNewQueue>
     a7c:	ce 01       	movw	r24, r28
     a7e:	df 91       	pop	r29
     a80:	cf 91       	pop	r28
     a82:	1f 91       	pop	r17
     a84:	0f 91       	pop	r16
     a86:	ff 90       	pop	r15
     a88:	ef 90       	pop	r14
     a8a:	df 90       	pop	r13
     a8c:	08 95       	ret

00000a8e <xQueueGenericSend>:
     a8e:	cf 92       	push	r12
     a90:	df 92       	push	r13
     a92:	ef 92       	push	r14
     a94:	ff 92       	push	r15
     a96:	0f 93       	push	r16
     a98:	1f 93       	push	r17
     a9a:	cf 93       	push	r28
     a9c:	df 93       	push	r29
     a9e:	cd b7       	in	r28, 0x3d	; 61
     aa0:	de b7       	in	r29, 0x3e	; 62
     aa2:	29 97       	sbiw	r28, 0x09	; 9
     aa4:	0f b6       	in	r0, 0x3f	; 63
     aa6:	f8 94       	cli
     aa8:	de bf       	out	0x3e, r29	; 62
     aaa:	0f be       	out	0x3f, r0	; 63
     aac:	cd bf       	out	0x3d, r28	; 61
     aae:	7c 01       	movw	r14, r24
     ab0:	6b 01       	movw	r12, r22
     ab2:	2e 83       	std	Y+6, r18	; 0x06
     ab4:	3f 83       	std	Y+7, r19	; 0x07
     ab6:	48 87       	std	Y+8, r20	; 0x08
     ab8:	59 87       	std	Y+9, r21	; 0x09
     aba:	10 e0       	ldi	r17, 0x00	; 0
     abc:	0f b6       	in	r0, 0x3f	; 63
     abe:	f8 94       	cli
     ac0:	0f 92       	push	r0
     ac2:	f7 01       	movw	r30, r14
     ac4:	96 8d       	ldd	r25, Z+30	; 0x1e
     ac6:	87 8d       	ldd	r24, Z+31	; 0x1f
     ac8:	98 17       	cp	r25, r24
     aca:	10 f0       	brcs	.+4      	; 0xad0 <xQueueGenericSend+0x42>
     acc:	02 30       	cpi	r16, 0x02	; 2
     ace:	b1 f4       	brne	.+44     	; 0xafc <xQueueGenericSend+0x6e>
     ad0:	40 2f       	mov	r20, r16
     ad2:	b6 01       	movw	r22, r12
     ad4:	c7 01       	movw	r24, r14
     ad6:	b6 de       	rcall	.-660    	; 0x844 <prvCopyDataToQueue>
     ad8:	f7 01       	movw	r30, r14
     ada:	93 89       	ldd	r25, Z+19	; 0x13
     adc:	99 23       	and	r25, r25
     ade:	41 f0       	breq	.+16     	; 0xaf0 <xQueueGenericSend+0x62>
     ae0:	c7 01       	movw	r24, r14
     ae2:	43 96       	adiw	r24, 0x13	; 19
     ae4:	0e 94 b2 10 	call	0x2164	; 0x2164 <xTaskRemoveFromEventList>
     ae8:	88 23       	and	r24, r24
     aea:	21 f0       	breq	.+8      	; 0xaf4 <xQueueGenericSend+0x66>
     aec:	b8 dd       	rcall	.-1168   	; 0x65e <vPortYield>
     aee:	02 c0       	rjmp	.+4      	; 0xaf4 <xQueueGenericSend+0x66>
     af0:	81 11       	cpse	r24, r1
     af2:	b5 dd       	rcall	.-1174   	; 0x65e <vPortYield>
     af4:	0f 90       	pop	r0
     af6:	0f be       	out	0x3f, r0	; 63
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	4c c0       	rjmp	.+152    	; 0xb94 <xQueueGenericSend+0x106>
     afc:	8e 81       	ldd	r24, Y+6	; 0x06
     afe:	9f 81       	ldd	r25, Y+7	; 0x07
     b00:	a8 85       	ldd	r26, Y+8	; 0x08
     b02:	b9 85       	ldd	r27, Y+9	; 0x09
     b04:	89 2b       	or	r24, r25
     b06:	8a 2b       	or	r24, r26
     b08:	8b 2b       	or	r24, r27
     b0a:	21 f4       	brne	.+8      	; 0xb14 <xQueueGenericSend+0x86>
     b0c:	0f 90       	pop	r0
     b0e:	0f be       	out	0x3f, r0	; 63
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	40 c0       	rjmp	.+128    	; 0xb94 <xQueueGenericSend+0x106>
     b14:	11 11       	cpse	r17, r1
     b16:	05 c0       	rjmp	.+10     	; 0xb22 <xQueueGenericSend+0x94>
     b18:	ce 01       	movw	r24, r28
     b1a:	01 96       	adiw	r24, 0x01	; 1
     b1c:	0e 94 77 11 	call	0x22ee	; 0x22ee <vTaskInternalSetTimeOutState>
     b20:	11 e0       	ldi	r17, 0x01	; 1
     b22:	0f 90       	pop	r0
     b24:	0f be       	out	0x3f, r0	; 63
     b26:	c4 d7       	rcall	.+3976   	; 0x1ab0 <vTaskSuspendAll>
     b28:	0f b6       	in	r0, 0x3f	; 63
     b2a:	f8 94       	cli
     b2c:	0f 92       	push	r0
     b2e:	f7 01       	movw	r30, r14
     b30:	81 a1       	ldd	r24, Z+33	; 0x21
     b32:	8f 3f       	cpi	r24, 0xFF	; 255
     b34:	09 f4       	brne	.+2      	; 0xb38 <xQueueGenericSend+0xaa>
     b36:	11 a2       	std	Z+33, r1	; 0x21
     b38:	f7 01       	movw	r30, r14
     b3a:	82 a1       	ldd	r24, Z+34	; 0x22
     b3c:	8f 3f       	cpi	r24, 0xFF	; 255
     b3e:	09 f4       	brne	.+2      	; 0xb42 <xQueueGenericSend+0xb4>
     b40:	12 a2       	std	Z+34, r1	; 0x22
     b42:	0f 90       	pop	r0
     b44:	0f be       	out	0x3f, r0	; 63
     b46:	be 01       	movw	r22, r28
     b48:	6a 5f       	subi	r22, 0xFA	; 250
     b4a:	7f 4f       	sbci	r23, 0xFF	; 255
     b4c:	ce 01       	movw	r24, r28
     b4e:	01 96       	adiw	r24, 0x01	; 1
     b50:	0e 94 88 11 	call	0x2310	; 0x2310 <xTaskCheckForTimeOut>
     b54:	81 11       	cpse	r24, r1
     b56:	19 c0       	rjmp	.+50     	; 0xb8a <xQueueGenericSend+0xfc>
     b58:	c7 01       	movw	r24, r14
     b5a:	66 de       	rcall	.-820    	; 0x828 <prvIsQueueFull>
     b5c:	88 23       	and	r24, r24
     b5e:	81 f0       	breq	.+32     	; 0xb80 <xQueueGenericSend+0xf2>
     b60:	4e 81       	ldd	r20, Y+6	; 0x06
     b62:	5f 81       	ldd	r21, Y+7	; 0x07
     b64:	68 85       	ldd	r22, Y+8	; 0x08
     b66:	79 85       	ldd	r23, Y+9	; 0x09
     b68:	c7 01       	movw	r24, r14
     b6a:	08 96       	adiw	r24, 0x08	; 8
     b6c:	0e 94 59 10 	call	0x20b2	; 0x20b2 <vTaskPlaceOnEventList>
     b70:	c7 01       	movw	r24, r14
     b72:	e1 de       	rcall	.-574    	; 0x936 <prvUnlockQueue>
     b74:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <xTaskResumeAll>
     b78:	81 11       	cpse	r24, r1
     b7a:	a0 cf       	rjmp	.-192    	; 0xabc <xQueueGenericSend+0x2e>
     b7c:	70 dd       	rcall	.-1312   	; 0x65e <vPortYield>
     b7e:	9e cf       	rjmp	.-196    	; 0xabc <xQueueGenericSend+0x2e>
     b80:	c7 01       	movw	r24, r14
     b82:	d9 de       	rcall	.-590    	; 0x936 <prvUnlockQueue>
     b84:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <xTaskResumeAll>
     b88:	99 cf       	rjmp	.-206    	; 0xabc <xQueueGenericSend+0x2e>
     b8a:	c7 01       	movw	r24, r14
     b8c:	d4 de       	rcall	.-600    	; 0x936 <prvUnlockQueue>
     b8e:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <xTaskResumeAll>
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	29 96       	adiw	r28, 0x09	; 9
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	f8 94       	cli
     b9a:	de bf       	out	0x3e, r29	; 62
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	cd bf       	out	0x3d, r28	; 61
     ba0:	df 91       	pop	r29
     ba2:	cf 91       	pop	r28
     ba4:	1f 91       	pop	r17
     ba6:	0f 91       	pop	r16
     ba8:	ff 90       	pop	r15
     baa:	ef 90       	pop	r14
     bac:	df 90       	pop	r13
     bae:	cf 90       	pop	r12
     bb0:	08 95       	ret

00000bb2 <prvInitialiseMutex>:
     bb2:	0f 93       	push	r16
     bb4:	00 97       	sbiw	r24, 0x00	; 0
     bb6:	69 f0       	breq	.+26     	; 0xbd2 <prvInitialiseMutex+0x20>
     bb8:	fc 01       	movw	r30, r24
     bba:	15 82       	std	Z+5, r1	; 0x05
     bbc:	14 82       	std	Z+4, r1	; 0x04
     bbe:	11 82       	std	Z+1, r1	; 0x01
     bc0:	10 82       	st	Z, r1
     bc2:	16 82       	std	Z+6, r1	; 0x06
     bc4:	00 e0       	ldi	r16, 0x00	; 0
     bc6:	20 e0       	ldi	r18, 0x00	; 0
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	a9 01       	movw	r20, r18
     bcc:	60 e0       	ldi	r22, 0x00	; 0
     bce:	70 e0       	ldi	r23, 0x00	; 0
     bd0:	5e df       	rcall	.-324    	; 0xa8e <xQueueGenericSend>
     bd2:	0f 91       	pop	r16
     bd4:	08 95       	ret

00000bd6 <xQueueCreateMutex>:
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
     bda:	48 2f       	mov	r20, r24
     bdc:	60 e0       	ldi	r22, 0x00	; 0
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	33 df       	rcall	.-410    	; 0xa48 <xQueueGenericCreate>
     be2:	ec 01       	movw	r28, r24
     be4:	e6 df       	rcall	.-52     	; 0xbb2 <prvInitialiseMutex>
     be6:	ce 01       	movw	r24, r28
     be8:	df 91       	pop	r29
     bea:	cf 91       	pop	r28
     bec:	08 95       	ret

00000bee <xQueueGenericSendFromISR>:
     bee:	ef 92       	push	r14
     bf0:	ff 92       	push	r15
     bf2:	0f 93       	push	r16
     bf4:	1f 93       	push	r17
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
     bfa:	8a 01       	movw	r16, r20
     bfc:	fc 01       	movw	r30, r24
     bfe:	56 8d       	ldd	r21, Z+30	; 0x1e
     c00:	37 8d       	ldd	r19, Z+31	; 0x1f
     c02:	53 17       	cp	r21, r19
     c04:	10 f0       	brcs	.+4      	; 0xc0a <xQueueGenericSendFromISR+0x1c>
     c06:	22 30       	cpi	r18, 0x02	; 2
     c08:	f9 f4       	brne	.+62     	; 0xc48 <xQueueGenericSendFromISR+0x5a>
     c0a:	42 2f       	mov	r20, r18
     c0c:	78 01       	movw	r14, r16
     c0e:	ec 01       	movw	r28, r24
     c10:	1a a1       	ldd	r17, Y+34	; 0x22
     c12:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c14:	ce 01       	movw	r24, r28
     c16:	16 de       	rcall	.-980    	; 0x844 <prvCopyDataToQueue>
     c18:	1f 3f       	cpi	r17, 0xFF	; 255
     c1a:	81 f4       	brne	.+32     	; 0xc3c <xQueueGenericSendFromISR+0x4e>
     c1c:	8b 89       	ldd	r24, Y+19	; 0x13
     c1e:	88 23       	and	r24, r24
     c20:	a9 f0       	breq	.+42     	; 0xc4c <xQueueGenericSendFromISR+0x5e>
     c22:	ce 01       	movw	r24, r28
     c24:	43 96       	adiw	r24, 0x13	; 19
     c26:	0e 94 b2 10 	call	0x2164	; 0x2164 <xTaskRemoveFromEventList>
     c2a:	88 23       	and	r24, r24
     c2c:	89 f0       	breq	.+34     	; 0xc50 <xQueueGenericSendFromISR+0x62>
     c2e:	e1 14       	cp	r14, r1
     c30:	f1 04       	cpc	r15, r1
     c32:	81 f0       	breq	.+32     	; 0xc54 <xQueueGenericSendFromISR+0x66>
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	f7 01       	movw	r30, r14
     c38:	80 83       	st	Z, r24
     c3a:	0d c0       	rjmp	.+26     	; 0xc56 <xQueueGenericSendFromISR+0x68>
     c3c:	ff 24       	eor	r15, r15
     c3e:	f3 94       	inc	r15
     c40:	f1 0e       	add	r15, r17
     c42:	fa a2       	std	Y+34, r15	; 0x22
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	07 c0       	rjmp	.+14     	; 0xc56 <xQueueGenericSendFromISR+0x68>
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	05 c0       	rjmp	.+10     	; 0xc56 <xQueueGenericSendFromISR+0x68>
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	03 c0       	rjmp	.+6      	; 0xc56 <xQueueGenericSendFromISR+0x68>
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	01 c0       	rjmp	.+2      	; 0xc56 <xQueueGenericSendFromISR+0x68>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	df 91       	pop	r29
     c58:	cf 91       	pop	r28
     c5a:	1f 91       	pop	r17
     c5c:	0f 91       	pop	r16
     c5e:	ff 90       	pop	r15
     c60:	ef 90       	pop	r14
     c62:	08 95       	ret

00000c64 <xQueueReceive>:
     c64:	cf 92       	push	r12
     c66:	df 92       	push	r13
     c68:	ef 92       	push	r14
     c6a:	ff 92       	push	r15
     c6c:	0f 93       	push	r16
     c6e:	1f 93       	push	r17
     c70:	cf 93       	push	r28
     c72:	df 93       	push	r29
     c74:	cd b7       	in	r28, 0x3d	; 61
     c76:	de b7       	in	r29, 0x3e	; 62
     c78:	29 97       	sbiw	r28, 0x09	; 9
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	f8 94       	cli
     c7e:	de bf       	out	0x3e, r29	; 62
     c80:	0f be       	out	0x3f, r0	; 63
     c82:	cd bf       	out	0x3d, r28	; 61
     c84:	8c 01       	movw	r16, r24
     c86:	6b 01       	movw	r12, r22
     c88:	2e 83       	std	Y+6, r18	; 0x06
     c8a:	3f 83       	std	Y+7, r19	; 0x07
     c8c:	48 87       	std	Y+8, r20	; 0x08
     c8e:	59 87       	std	Y+9, r21	; 0x09
     c90:	e1 2c       	mov	r14, r1
     c92:	0f b6       	in	r0, 0x3f	; 63
     c94:	f8 94       	cli
     c96:	0f 92       	push	r0
     c98:	f8 01       	movw	r30, r16
     c9a:	f6 8c       	ldd	r15, Z+30	; 0x1e
     c9c:	ff 20       	and	r15, r15
     c9e:	99 f0       	breq	.+38     	; 0xcc6 <xQueueReceive+0x62>
     ca0:	b6 01       	movw	r22, r12
     ca2:	c8 01       	movw	r24, r16
     ca4:	2e de       	rcall	.-932    	; 0x902 <prvCopyDataFromQueue>
     ca6:	fa 94       	dec	r15
     ca8:	f8 01       	movw	r30, r16
     caa:	f6 8e       	std	Z+30, r15	; 0x1e
     cac:	80 85       	ldd	r24, Z+8	; 0x08
     cae:	88 23       	and	r24, r24
     cb0:	31 f0       	breq	.+12     	; 0xcbe <xQueueReceive+0x5a>
     cb2:	c8 01       	movw	r24, r16
     cb4:	08 96       	adiw	r24, 0x08	; 8
     cb6:	0e 94 b2 10 	call	0x2164	; 0x2164 <xTaskRemoveFromEventList>
     cba:	81 11       	cpse	r24, r1
     cbc:	d0 dc       	rcall	.-1632   	; 0x65e <vPortYield>
     cbe:	0f 90       	pop	r0
     cc0:	0f be       	out	0x3f, r0	; 63
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	4f c0       	rjmp	.+158    	; 0xd64 <xQueueReceive+0x100>
     cc6:	8e 81       	ldd	r24, Y+6	; 0x06
     cc8:	9f 81       	ldd	r25, Y+7	; 0x07
     cca:	a8 85       	ldd	r26, Y+8	; 0x08
     ccc:	b9 85       	ldd	r27, Y+9	; 0x09
     cce:	89 2b       	or	r24, r25
     cd0:	8a 2b       	or	r24, r26
     cd2:	8b 2b       	or	r24, r27
     cd4:	21 f4       	brne	.+8      	; 0xcde <xQueueReceive+0x7a>
     cd6:	0f 90       	pop	r0
     cd8:	0f be       	out	0x3f, r0	; 63
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	43 c0       	rjmp	.+134    	; 0xd64 <xQueueReceive+0x100>
     cde:	e1 10       	cpse	r14, r1
     ce0:	06 c0       	rjmp	.+12     	; 0xcee <xQueueReceive+0x8a>
     ce2:	ce 01       	movw	r24, r28
     ce4:	01 96       	adiw	r24, 0x01	; 1
     ce6:	0e 94 77 11 	call	0x22ee	; 0x22ee <vTaskInternalSetTimeOutState>
     cea:	ee 24       	eor	r14, r14
     cec:	e3 94       	inc	r14
     cee:	0f 90       	pop	r0
     cf0:	0f be       	out	0x3f, r0	; 63
     cf2:	de d6       	rcall	.+3516   	; 0x1ab0 <vTaskSuspendAll>
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	f8 94       	cli
     cf8:	0f 92       	push	r0
     cfa:	f8 01       	movw	r30, r16
     cfc:	81 a1       	ldd	r24, Z+33	; 0x21
     cfe:	8f 3f       	cpi	r24, 0xFF	; 255
     d00:	09 f4       	brne	.+2      	; 0xd04 <xQueueReceive+0xa0>
     d02:	11 a2       	std	Z+33, r1	; 0x21
     d04:	f8 01       	movw	r30, r16
     d06:	82 a1       	ldd	r24, Z+34	; 0x22
     d08:	8f 3f       	cpi	r24, 0xFF	; 255
     d0a:	09 f4       	brne	.+2      	; 0xd0e <xQueueReceive+0xaa>
     d0c:	12 a2       	std	Z+34, r1	; 0x22
     d0e:	0f 90       	pop	r0
     d10:	0f be       	out	0x3f, r0	; 63
     d12:	be 01       	movw	r22, r28
     d14:	6a 5f       	subi	r22, 0xFA	; 250
     d16:	7f 4f       	sbci	r23, 0xFF	; 255
     d18:	ce 01       	movw	r24, r28
     d1a:	01 96       	adiw	r24, 0x01	; 1
     d1c:	0e 94 88 11 	call	0x2310	; 0x2310 <xTaskCheckForTimeOut>
     d20:	81 11       	cpse	r24, r1
     d22:	17 c0       	rjmp	.+46     	; 0xd52 <xQueueReceive+0xee>
     d24:	c8 01       	movw	r24, r16
     d26:	73 dd       	rcall	.-1306   	; 0x80e <prvIsQueueEmpty>
     d28:	88 23       	and	r24, r24
     d2a:	79 f0       	breq	.+30     	; 0xd4a <xQueueReceive+0xe6>
     d2c:	4e 81       	ldd	r20, Y+6	; 0x06
     d2e:	5f 81       	ldd	r21, Y+7	; 0x07
     d30:	68 85       	ldd	r22, Y+8	; 0x08
     d32:	79 85       	ldd	r23, Y+9	; 0x09
     d34:	c8 01       	movw	r24, r16
     d36:	43 96       	adiw	r24, 0x13	; 19
     d38:	0e 94 59 10 	call	0x20b2	; 0x20b2 <vTaskPlaceOnEventList>
     d3c:	c8 01       	movw	r24, r16
     d3e:	fb dd       	rcall	.-1034   	; 0x936 <prvUnlockQueue>
     d40:	f7 d7       	rcall	.+4078   	; 0x1d30 <xTaskResumeAll>
     d42:	81 11       	cpse	r24, r1
     d44:	a6 cf       	rjmp	.-180    	; 0xc92 <xQueueReceive+0x2e>
     d46:	8b dc       	rcall	.-1770   	; 0x65e <vPortYield>
     d48:	a4 cf       	rjmp	.-184    	; 0xc92 <xQueueReceive+0x2e>
     d4a:	c8 01       	movw	r24, r16
     d4c:	f4 dd       	rcall	.-1048   	; 0x936 <prvUnlockQueue>
     d4e:	f0 d7       	rcall	.+4064   	; 0x1d30 <xTaskResumeAll>
     d50:	a0 cf       	rjmp	.-192    	; 0xc92 <xQueueReceive+0x2e>
     d52:	c8 01       	movw	r24, r16
     d54:	f0 dd       	rcall	.-1056   	; 0x936 <prvUnlockQueue>
     d56:	ec d7       	rcall	.+4056   	; 0x1d30 <xTaskResumeAll>
     d58:	c8 01       	movw	r24, r16
     d5a:	59 dd       	rcall	.-1358   	; 0x80e <prvIsQueueEmpty>
     d5c:	88 23       	and	r24, r24
     d5e:	09 f4       	brne	.+2      	; 0xd62 <xQueueReceive+0xfe>
     d60:	98 cf       	rjmp	.-208    	; 0xc92 <xQueueReceive+0x2e>
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	29 96       	adiw	r28, 0x09	; 9
     d66:	0f b6       	in	r0, 0x3f	; 63
     d68:	f8 94       	cli
     d6a:	de bf       	out	0x3e, r29	; 62
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	cd bf       	out	0x3d, r28	; 61
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	1f 91       	pop	r17
     d76:	0f 91       	pop	r16
     d78:	ff 90       	pop	r15
     d7a:	ef 90       	pop	r14
     d7c:	df 90       	pop	r13
     d7e:	cf 90       	pop	r12
     d80:	08 95       	ret

00000d82 <xQueueSemaphoreTake>:
     d82:	ef 92       	push	r14
     d84:	ff 92       	push	r15
     d86:	0f 93       	push	r16
     d88:	1f 93       	push	r17
     d8a:	cf 93       	push	r28
     d8c:	df 93       	push	r29
     d8e:	cd b7       	in	r28, 0x3d	; 61
     d90:	de b7       	in	r29, 0x3e	; 62
     d92:	29 97       	sbiw	r28, 0x09	; 9
     d94:	0f b6       	in	r0, 0x3f	; 63
     d96:	f8 94       	cli
     d98:	de bf       	out	0x3e, r29	; 62
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	cd bf       	out	0x3d, r28	; 61
     d9e:	8c 01       	movw	r16, r24
     da0:	4e 83       	std	Y+6, r20	; 0x06
     da2:	5f 83       	std	Y+7, r21	; 0x07
     da4:	68 87       	std	Y+8, r22	; 0x08
     da6:	79 87       	std	Y+9, r23	; 0x09
     da8:	e1 2c       	mov	r14, r1
     daa:	f1 2c       	mov	r15, r1
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	f8 94       	cli
     db0:	0f 92       	push	r0
     db2:	f8 01       	movw	r30, r16
     db4:	86 8d       	ldd	r24, Z+30	; 0x1e
     db6:	88 23       	and	r24, r24
     db8:	c9 f0       	breq	.+50     	; 0xdec <xQueueSemaphoreTake+0x6a>
     dba:	81 50       	subi	r24, 0x01	; 1
     dbc:	86 8f       	std	Z+30, r24	; 0x1e
     dbe:	80 81       	ld	r24, Z
     dc0:	91 81       	ldd	r25, Z+1	; 0x01
     dc2:	89 2b       	or	r24, r25
     dc4:	29 f4       	brne	.+10     	; 0xdd0 <xQueueSemaphoreTake+0x4e>
     dc6:	0e 94 4e 13 	call	0x269c	; 0x269c <pvTaskIncrementMutexHeldCount>
     dca:	f8 01       	movw	r30, r16
     dcc:	95 83       	std	Z+5, r25	; 0x05
     dce:	84 83       	std	Z+4, r24	; 0x04
     dd0:	f8 01       	movw	r30, r16
     dd2:	80 85       	ldd	r24, Z+8	; 0x08
     dd4:	88 23       	and	r24, r24
     dd6:	31 f0       	breq	.+12     	; 0xde4 <xQueueSemaphoreTake+0x62>
     dd8:	c8 01       	movw	r24, r16
     dda:	08 96       	adiw	r24, 0x08	; 8
     ddc:	0e 94 b2 10 	call	0x2164	; 0x2164 <xTaskRemoveFromEventList>
     de0:	81 11       	cpse	r24, r1
     de2:	3d dc       	rcall	.-1926   	; 0x65e <vPortYield>
     de4:	0f 90       	pop	r0
     de6:	0f be       	out	0x3f, r0	; 63
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	6f c0       	rjmp	.+222    	; 0xeca <xQueueSemaphoreTake+0x148>
     dec:	8e 81       	ldd	r24, Y+6	; 0x06
     dee:	9f 81       	ldd	r25, Y+7	; 0x07
     df0:	a8 85       	ldd	r26, Y+8	; 0x08
     df2:	b9 85       	ldd	r27, Y+9	; 0x09
     df4:	89 2b       	or	r24, r25
     df6:	8a 2b       	or	r24, r26
     df8:	8b 2b       	or	r24, r27
     dfa:	21 f4       	brne	.+8      	; 0xe04 <xQueueSemaphoreTake+0x82>
     dfc:	0f 90       	pop	r0
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	63 c0       	rjmp	.+198    	; 0xeca <xQueueSemaphoreTake+0x148>
     e04:	f1 10       	cpse	r15, r1
     e06:	06 c0       	rjmp	.+12     	; 0xe14 <xQueueSemaphoreTake+0x92>
     e08:	ce 01       	movw	r24, r28
     e0a:	01 96       	adiw	r24, 0x01	; 1
     e0c:	0e 94 77 11 	call	0x22ee	; 0x22ee <vTaskInternalSetTimeOutState>
     e10:	ff 24       	eor	r15, r15
     e12:	f3 94       	inc	r15
     e14:	0f 90       	pop	r0
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	4b d6       	rcall	.+3222   	; 0x1ab0 <vTaskSuspendAll>
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	f8 94       	cli
     e1e:	0f 92       	push	r0
     e20:	f8 01       	movw	r30, r16
     e22:	81 a1       	ldd	r24, Z+33	; 0x21
     e24:	8f 3f       	cpi	r24, 0xFF	; 255
     e26:	09 f4       	brne	.+2      	; 0xe2a <xQueueSemaphoreTake+0xa8>
     e28:	11 a2       	std	Z+33, r1	; 0x21
     e2a:	f8 01       	movw	r30, r16
     e2c:	82 a1       	ldd	r24, Z+34	; 0x22
     e2e:	8f 3f       	cpi	r24, 0xFF	; 255
     e30:	09 f4       	brne	.+2      	; 0xe34 <xQueueSemaphoreTake+0xb2>
     e32:	12 a2       	std	Z+34, r1	; 0x22
     e34:	0f 90       	pop	r0
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	be 01       	movw	r22, r28
     e3a:	6a 5f       	subi	r22, 0xFA	; 250
     e3c:	7f 4f       	sbci	r23, 0xFF	; 255
     e3e:	ce 01       	movw	r24, r28
     e40:	01 96       	adiw	r24, 0x01	; 1
     e42:	0e 94 88 11 	call	0x2310	; 0x2310 <xTaskCheckForTimeOut>
     e46:	81 11       	cpse	r24, r1
     e48:	26 c0       	rjmp	.+76     	; 0xe96 <xQueueSemaphoreTake+0x114>
     e4a:	c8 01       	movw	r24, r16
     e4c:	e0 dc       	rcall	.-1600   	; 0x80e <prvIsQueueEmpty>
     e4e:	88 23       	and	r24, r24
     e50:	f1 f0       	breq	.+60     	; 0xe8e <xQueueSemaphoreTake+0x10c>
     e52:	f8 01       	movw	r30, r16
     e54:	80 81       	ld	r24, Z
     e56:	91 81       	ldd	r25, Z+1	; 0x01
     e58:	89 2b       	or	r24, r25
     e5a:	51 f4       	brne	.+20     	; 0xe70 <xQueueSemaphoreTake+0xee>
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	f8 94       	cli
     e60:	0f 92       	push	r0
     e62:	84 81       	ldd	r24, Z+4	; 0x04
     e64:	95 81       	ldd	r25, Z+5	; 0x05
     e66:	0e 94 05 12 	call	0x240a	; 0x240a <xTaskPriorityInherit>
     e6a:	e8 2e       	mov	r14, r24
     e6c:	0f 90       	pop	r0
     e6e:	0f be       	out	0x3f, r0	; 63
     e70:	4e 81       	ldd	r20, Y+6	; 0x06
     e72:	5f 81       	ldd	r21, Y+7	; 0x07
     e74:	68 85       	ldd	r22, Y+8	; 0x08
     e76:	79 85       	ldd	r23, Y+9	; 0x09
     e78:	c8 01       	movw	r24, r16
     e7a:	43 96       	adiw	r24, 0x13	; 19
     e7c:	0e 94 59 10 	call	0x20b2	; 0x20b2 <vTaskPlaceOnEventList>
     e80:	c8 01       	movw	r24, r16
     e82:	59 dd       	rcall	.-1358   	; 0x936 <prvUnlockQueue>
     e84:	55 d7       	rcall	.+3754   	; 0x1d30 <xTaskResumeAll>
     e86:	81 11       	cpse	r24, r1
     e88:	91 cf       	rjmp	.-222    	; 0xdac <xQueueSemaphoreTake+0x2a>
     e8a:	e9 db       	rcall	.-2094   	; 0x65e <vPortYield>
     e8c:	8f cf       	rjmp	.-226    	; 0xdac <xQueueSemaphoreTake+0x2a>
     e8e:	c8 01       	movw	r24, r16
     e90:	52 dd       	rcall	.-1372   	; 0x936 <prvUnlockQueue>
     e92:	4e d7       	rcall	.+3740   	; 0x1d30 <xTaskResumeAll>
     e94:	8b cf       	rjmp	.-234    	; 0xdac <xQueueSemaphoreTake+0x2a>
     e96:	c8 01       	movw	r24, r16
     e98:	4e dd       	rcall	.-1380   	; 0x936 <prvUnlockQueue>
     e9a:	4a d7       	rcall	.+3732   	; 0x1d30 <xTaskResumeAll>
     e9c:	c8 01       	movw	r24, r16
     e9e:	b7 dc       	rcall	.-1682   	; 0x80e <prvIsQueueEmpty>
     ea0:	88 23       	and	r24, r24
     ea2:	09 f4       	brne	.+2      	; 0xea6 <xQueueSemaphoreTake+0x124>
     ea4:	83 cf       	rjmp	.-250    	; 0xdac <xQueueSemaphoreTake+0x2a>
     ea6:	ee 20       	and	r14, r14
     ea8:	79 f0       	breq	.+30     	; 0xec8 <xQueueSemaphoreTake+0x146>
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	f8 94       	cli
     eae:	0f 92       	push	r0
     eb0:	c8 01       	movw	r24, r16
     eb2:	9d dc       	rcall	.-1734   	; 0x7ee <prvGetDisinheritPriorityAfterTimeout>
     eb4:	68 2f       	mov	r22, r24
     eb6:	f8 01       	movw	r30, r16
     eb8:	84 81       	ldd	r24, Z+4	; 0x04
     eba:	95 81       	ldd	r25, Z+5	; 0x05
     ebc:	0e 94 e7 12 	call	0x25ce	; 0x25ce <vTaskPriorityDisinheritAfterTimeout>
     ec0:	0f 90       	pop	r0
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	01 c0       	rjmp	.+2      	; 0xeca <xQueueSemaphoreTake+0x148>
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	29 96       	adiw	r28, 0x09	; 9
     ecc:	0f b6       	in	r0, 0x3f	; 63
     ece:	f8 94       	cli
     ed0:	de bf       	out	0x3e, r29	; 62
     ed2:	0f be       	out	0x3f, r0	; 63
     ed4:	cd bf       	out	0x3d, r28	; 61
     ed6:	df 91       	pop	r29
     ed8:	cf 91       	pop	r28
     eda:	1f 91       	pop	r17
     edc:	0f 91       	pop	r16
     ede:	ff 90       	pop	r15
     ee0:	ef 90       	pop	r14
     ee2:	08 95       	ret

00000ee4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     ee4:	cf 93       	push	r28
     ee6:	df 93       	push	r29
     ee8:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	f8 94       	cli
     eee:	0f 92       	push	r0
     ef0:	89 a1       	ldd	r24, Y+33	; 0x21
     ef2:	8f 3f       	cpi	r24, 0xFF	; 255
     ef4:	09 f4       	brne	.+2      	; 0xef8 <vQueueWaitForMessageRestricted+0x14>
     ef6:	19 a2       	std	Y+33, r1	; 0x21
     ef8:	8a a1       	ldd	r24, Y+34	; 0x22
     efa:	8f 3f       	cpi	r24, 0xFF	; 255
     efc:	09 f4       	brne	.+2      	; 0xf00 <vQueueWaitForMessageRestricted+0x1c>
     efe:	1a a2       	std	Y+34, r1	; 0x22
     f00:	0f 90       	pop	r0
     f02:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     f04:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f06:	81 11       	cpse	r24, r1
     f08:	04 c0       	rjmp	.+8      	; 0xf12 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     f0a:	ce 01       	movw	r24, r28
     f0c:	43 96       	adiw	r24, 0x13	; 19
     f0e:	0e 94 70 10 	call	0x20e0	; 0x20e0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     f12:	ce 01       	movw	r24, r28
     f14:	10 dd       	rcall	.-1504   	; 0x936 <prvUnlockQueue>
    }
     f16:	df 91       	pop	r29
     f18:	cf 91       	pop	r28
     f1a:	08 95       	ret

00000f1c <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
     f1c:	fc 01       	movw	r30, r24
     f1e:	44 81       	ldd	r20, Z+4	; 0x04
     f20:	55 81       	ldd	r21, Z+5	; 0x05
     f22:	22 81       	ldd	r18, Z+2	; 0x02
     f24:	33 81       	ldd	r19, Z+3	; 0x03
     f26:	24 0f       	add	r18, r20
     f28:	35 1f       	adc	r19, r21
     f2a:	80 81       	ld	r24, Z
     f2c:	91 81       	ldd	r25, Z+1	; 0x01
     f2e:	b9 01       	movw	r22, r18
     f30:	68 1b       	sub	r22, r24
     f32:	79 0b       	sbc	r23, r25
     f34:	cb 01       	movw	r24, r22
     f36:	64 17       	cp	r22, r20
     f38:	75 07       	cpc	r23, r21
     f3a:	10 f0       	brcs	.+4      	; 0xf40 <prvBytesInBuffer+0x24>
     f3c:	84 1b       	sub	r24, r20
     f3e:	95 0b       	sbc	r25, r21
     f40:	08 95       	ret

00000f42 <prvInitialiseNewStreamBuffer>:
     f42:	0f 93       	push	r16
     f44:	fc 01       	movw	r30, r24
     f46:	8f e0       	ldi	r24, 0x0F	; 15
     f48:	df 01       	movw	r26, r30
     f4a:	1d 92       	st	X+, r1
     f4c:	8a 95       	dec	r24
     f4e:	e9 f7       	brne	.-6      	; 0xf4a <prvInitialiseNewStreamBuffer+0x8>
     f50:	75 87       	std	Z+13, r23	; 0x0d
     f52:	64 87       	std	Z+12, r22	; 0x0c
     f54:	55 83       	std	Z+5, r21	; 0x05
     f56:	44 83       	std	Z+4, r20	; 0x04
     f58:	37 83       	std	Z+7, r19	; 0x07
     f5a:	26 83       	std	Z+6, r18	; 0x06
     f5c:	06 87       	std	Z+14, r16	; 0x0e
     f5e:	0f 91       	pop	r16
     f60:	08 95       	ret

00000f62 <prvWriteBytesToBuffer>:
     f62:	af 92       	push	r10
     f64:	bf 92       	push	r11
     f66:	cf 92       	push	r12
     f68:	df 92       	push	r13
     f6a:	ef 92       	push	r14
     f6c:	ff 92       	push	r15
     f6e:	0f 93       	push	r16
     f70:	1f 93       	push	r17
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	6c 01       	movw	r12, r24
     f78:	5b 01       	movw	r10, r22
     f7a:	7a 01       	movw	r14, r20
     f7c:	fc 01       	movw	r30, r24
     f7e:	c2 81       	ldd	r28, Z+2	; 0x02
     f80:	d3 81       	ldd	r29, Z+3	; 0x03
     f82:	04 81       	ldd	r16, Z+4	; 0x04
     f84:	15 81       	ldd	r17, Z+5	; 0x05
     f86:	0c 1b       	sub	r16, r28
     f88:	1d 0b       	sbc	r17, r29
     f8a:	40 17       	cp	r20, r16
     f8c:	51 07       	cpc	r21, r17
     f8e:	08 f4       	brcc	.+2      	; 0xf92 <prvWriteBytesToBuffer+0x30>
     f90:	8a 01       	movw	r16, r20
     f92:	f6 01       	movw	r30, r12
     f94:	84 85       	ldd	r24, Z+12	; 0x0c
     f96:	95 85       	ldd	r25, Z+13	; 0x0d
     f98:	a8 01       	movw	r20, r16
     f9a:	b5 01       	movw	r22, r10
     f9c:	8c 0f       	add	r24, r28
     f9e:	9d 1f       	adc	r25, r29
     fa0:	0e 94 7e 2f 	call	0x5efc	; 0x5efc <memcpy>
     fa4:	0e 15       	cp	r16, r14
     fa6:	1f 05       	cpc	r17, r15
     fa8:	58 f4       	brcc	.+22     	; 0xfc0 <prvWriteBytesToBuffer+0x5e>
     faa:	a7 01       	movw	r20, r14
     fac:	40 1b       	sub	r20, r16
     fae:	51 0b       	sbc	r21, r17
     fb0:	b5 01       	movw	r22, r10
     fb2:	60 0f       	add	r22, r16
     fb4:	71 1f       	adc	r23, r17
     fb6:	f6 01       	movw	r30, r12
     fb8:	84 85       	ldd	r24, Z+12	; 0x0c
     fba:	95 85       	ldd	r25, Z+13	; 0x0d
     fbc:	0e 94 7e 2f 	call	0x5efc	; 0x5efc <memcpy>
     fc0:	ce 01       	movw	r24, r28
     fc2:	8e 0d       	add	r24, r14
     fc4:	9f 1d       	adc	r25, r15
     fc6:	f6 01       	movw	r30, r12
     fc8:	24 81       	ldd	r18, Z+4	; 0x04
     fca:	35 81       	ldd	r19, Z+5	; 0x05
     fcc:	82 17       	cp	r24, r18
     fce:	93 07       	cpc	r25, r19
     fd0:	10 f0       	brcs	.+4      	; 0xfd6 <prvWriteBytesToBuffer+0x74>
     fd2:	82 1b       	sub	r24, r18
     fd4:	93 0b       	sbc	r25, r19
     fd6:	f6 01       	movw	r30, r12
     fd8:	93 83       	std	Z+3, r25	; 0x03
     fda:	82 83       	std	Z+2, r24	; 0x02
     fdc:	c7 01       	movw	r24, r14
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	1f 91       	pop	r17
     fe4:	0f 91       	pop	r16
     fe6:	ff 90       	pop	r15
     fe8:	ef 90       	pop	r14
     fea:	df 90       	pop	r13
     fec:	cf 90       	pop	r12
     fee:	bf 90       	pop	r11
     ff0:	af 90       	pop	r10
     ff2:	08 95       	ret

00000ff4 <prvWriteMessageToBuffer>:
     ff4:	cf 92       	push	r12
     ff6:	df 92       	push	r13
     ff8:	ef 92       	push	r14
     ffa:	ff 92       	push	r15
     ffc:	0f 93       	push	r16
     ffe:	1f 93       	push	r17
    1000:	cf 93       	push	r28
    1002:	df 93       	push	r29
    1004:	1f 92       	push	r1
    1006:	1f 92       	push	r1
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    100c:	7c 01       	movw	r14, r24
    100e:	6b 01       	movw	r12, r22
    1010:	5a 83       	std	Y+2, r21	; 0x02
    1012:	49 83       	std	Y+1, r20	; 0x01
    1014:	21 15       	cp	r18, r1
    1016:	31 05       	cpc	r19, r1
    1018:	c1 f0       	breq	.+48     	; 0x104a <__EEPROM_REGION_LENGTH__+0x4a>
    101a:	fc 01       	movw	r30, r24
    101c:	86 85       	ldd	r24, Z+14	; 0x0e
    101e:	80 fd       	sbrc	r24, 0
    1020:	08 c0       	rjmp	.+16     	; 0x1032 <__EEPROM_REGION_LENGTH__+0x32>
    1022:	42 17       	cp	r20, r18
    1024:	53 07       	cpc	r21, r19
    1026:	08 f4       	brcc	.+2      	; 0x102a <__EEPROM_REGION_LENGTH__+0x2a>
    1028:	9a 01       	movw	r18, r20
    102a:	3a 83       	std	Y+2, r19	; 0x02
    102c:	29 83       	std	Y+1, r18	; 0x01
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	0f c0       	rjmp	.+30     	; 0x1050 <__EEPROM_REGION_LENGTH__+0x50>
    1032:	20 17       	cp	r18, r16
    1034:	31 07       	cpc	r19, r17
    1036:	58 f0       	brcs	.+22     	; 0x104e <__EEPROM_REGION_LENGTH__+0x4e>
    1038:	42 e0       	ldi	r20, 0x02	; 2
    103a:	50 e0       	ldi	r21, 0x00	; 0
    103c:	be 01       	movw	r22, r28
    103e:	6f 5f       	subi	r22, 0xFF	; 255
    1040:	7f 4f       	sbci	r23, 0xFF	; 255
    1042:	c7 01       	movw	r24, r14
    1044:	8e df       	rcall	.-228    	; 0xf62 <prvWriteBytesToBuffer>
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	03 c0       	rjmp	.+6      	; 0x1050 <__EEPROM_REGION_LENGTH__+0x50>
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	01 c0       	rjmp	.+2      	; 0x1050 <__EEPROM_REGION_LENGTH__+0x50>
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	88 23       	and	r24, r24
    1052:	31 f0       	breq	.+12     	; 0x1060 <__EEPROM_REGION_LENGTH__+0x60>
    1054:	49 81       	ldd	r20, Y+1	; 0x01
    1056:	5a 81       	ldd	r21, Y+2	; 0x02
    1058:	b6 01       	movw	r22, r12
    105a:	c7 01       	movw	r24, r14
    105c:	82 df       	rcall	.-252    	; 0xf62 <prvWriteBytesToBuffer>
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <__EEPROM_REGION_LENGTH__+0x64>
    1060:	80 e0       	ldi	r24, 0x00	; 0
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	df 91       	pop	r29
    106a:	cf 91       	pop	r28
    106c:	1f 91       	pop	r17
    106e:	0f 91       	pop	r16
    1070:	ff 90       	pop	r15
    1072:	ef 90       	pop	r14
    1074:	df 90       	pop	r13
    1076:	cf 90       	pop	r12
    1078:	08 95       	ret

0000107a <prvReadBytesFromBuffer>:
    107a:	af 92       	push	r10
    107c:	bf 92       	push	r11
    107e:	cf 92       	push	r12
    1080:	df 92       	push	r13
    1082:	ef 92       	push	r14
    1084:	ff 92       	push	r15
    1086:	0f 93       	push	r16
    1088:	1f 93       	push	r17
    108a:	cf 93       	push	r28
    108c:	df 93       	push	r29
    108e:	7c 01       	movw	r14, r24
    1090:	5b 01       	movw	r10, r22
    1092:	e9 01       	movw	r28, r18
    1094:	42 17       	cp	r20, r18
    1096:	53 07       	cpc	r21, r19
    1098:	08 f4       	brcc	.+2      	; 0x109c <prvReadBytesFromBuffer+0x22>
    109a:	ea 01       	movw	r28, r20
    109c:	20 97       	sbiw	r28, 0x00	; 0
    109e:	81 f1       	breq	.+96     	; 0x1100 <prvReadBytesFromBuffer+0x86>
    10a0:	f7 01       	movw	r30, r14
    10a2:	00 81       	ld	r16, Z
    10a4:	11 81       	ldd	r17, Z+1	; 0x01
    10a6:	84 81       	ldd	r24, Z+4	; 0x04
    10a8:	95 81       	ldd	r25, Z+5	; 0x05
    10aa:	80 1b       	sub	r24, r16
    10ac:	91 0b       	sbc	r25, r17
    10ae:	6e 01       	movw	r12, r28
    10b0:	8c 17       	cp	r24, r28
    10b2:	9d 07       	cpc	r25, r29
    10b4:	08 f4       	brcc	.+2      	; 0x10b8 <prvReadBytesFromBuffer+0x3e>
    10b6:	6c 01       	movw	r12, r24
    10b8:	f7 01       	movw	r30, r14
    10ba:	64 85       	ldd	r22, Z+12	; 0x0c
    10bc:	75 85       	ldd	r23, Z+13	; 0x0d
    10be:	60 0f       	add	r22, r16
    10c0:	71 1f       	adc	r23, r17
    10c2:	a6 01       	movw	r20, r12
    10c4:	c5 01       	movw	r24, r10
    10c6:	0e 94 7e 2f 	call	0x5efc	; 0x5efc <memcpy>
    10ca:	cc 16       	cp	r12, r28
    10cc:	dd 06       	cpc	r13, r29
    10ce:	58 f4       	brcc	.+22     	; 0x10e6 <prvReadBytesFromBuffer+0x6c>
    10d0:	ae 01       	movw	r20, r28
    10d2:	4c 19       	sub	r20, r12
    10d4:	5d 09       	sbc	r21, r13
    10d6:	f7 01       	movw	r30, r14
    10d8:	64 85       	ldd	r22, Z+12	; 0x0c
    10da:	75 85       	ldd	r23, Z+13	; 0x0d
    10dc:	c5 01       	movw	r24, r10
    10de:	8c 0d       	add	r24, r12
    10e0:	9d 1d       	adc	r25, r13
    10e2:	0e 94 7e 2f 	call	0x5efc	; 0x5efc <memcpy>
    10e6:	0c 0f       	add	r16, r28
    10e8:	1d 1f       	adc	r17, r29
    10ea:	f7 01       	movw	r30, r14
    10ec:	84 81       	ldd	r24, Z+4	; 0x04
    10ee:	95 81       	ldd	r25, Z+5	; 0x05
    10f0:	08 17       	cp	r16, r24
    10f2:	19 07       	cpc	r17, r25
    10f4:	10 f0       	brcs	.+4      	; 0x10fa <prvReadBytesFromBuffer+0x80>
    10f6:	08 1b       	sub	r16, r24
    10f8:	19 0b       	sbc	r17, r25
    10fa:	f7 01       	movw	r30, r14
    10fc:	11 83       	std	Z+1, r17	; 0x01
    10fe:	00 83       	st	Z, r16
    1100:	ce 01       	movw	r24, r28
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	1f 91       	pop	r17
    1108:	0f 91       	pop	r16
    110a:	ff 90       	pop	r15
    110c:	ef 90       	pop	r14
    110e:	df 90       	pop	r13
    1110:	cf 90       	pop	r12
    1112:	bf 90       	pop	r11
    1114:	af 90       	pop	r10
    1116:	08 95       	ret

00001118 <prvReadMessageFromBuffer>:
    1118:	6f 92       	push	r6
    111a:	7f 92       	push	r7
    111c:	8f 92       	push	r8
    111e:	9f 92       	push	r9
    1120:	af 92       	push	r10
    1122:	bf 92       	push	r11
    1124:	cf 92       	push	r12
    1126:	df 92       	push	r13
    1128:	ef 92       	push	r14
    112a:	ff 92       	push	r15
    112c:	0f 93       	push	r16
    112e:	1f 93       	push	r17
    1130:	cf 93       	push	r28
    1132:	df 93       	push	r29
    1134:	1f 92       	push	r1
    1136:	1f 92       	push	r1
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	6c 01       	movw	r12, r24
    113e:	4b 01       	movw	r8, r22
    1140:	5a 01       	movw	r10, r20
    1142:	79 01       	movw	r14, r18
    1144:	01 15       	cp	r16, r1
    1146:	11 05       	cpc	r17, r1
    1148:	b1 f0       	breq	.+44     	; 0x1176 <prvReadMessageFromBuffer+0x5e>
    114a:	fc 01       	movw	r30, r24
    114c:	60 80       	ld	r6, Z
    114e:	71 80       	ldd	r7, Z+1	; 0x01
    1150:	a8 01       	movw	r20, r16
    1152:	be 01       	movw	r22, r28
    1154:	6f 5f       	subi	r22, 0xFF	; 255
    1156:	7f 4f       	sbci	r23, 0xFF	; 255
    1158:	90 df       	rcall	.-224    	; 0x107a <prvReadBytesFromBuffer>
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	9a 81       	ldd	r25, Y+2	; 0x02
    115e:	e0 1a       	sub	r14, r16
    1160:	f1 0a       	sbc	r15, r17
    1162:	a8 16       	cp	r10, r24
    1164:	b9 06       	cpc	r11, r25
    1166:	30 f4       	brcc	.+12     	; 0x1174 <prvReadMessageFromBuffer+0x5c>
    1168:	f6 01       	movw	r30, r12
    116a:	71 82       	std	Z+1, r7	; 0x01
    116c:	60 82       	st	Z, r6
    116e:	a1 2c       	mov	r10, r1
    1170:	b1 2c       	mov	r11, r1
    1172:	01 c0       	rjmp	.+2      	; 0x1176 <prvReadMessageFromBuffer+0x5e>
    1174:	5c 01       	movw	r10, r24
    1176:	97 01       	movw	r18, r14
    1178:	a5 01       	movw	r20, r10
    117a:	b4 01       	movw	r22, r8
    117c:	c6 01       	movw	r24, r12
    117e:	7d df       	rcall	.-262    	; 0x107a <prvReadBytesFromBuffer>
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	df 91       	pop	r29
    1186:	cf 91       	pop	r28
    1188:	1f 91       	pop	r17
    118a:	0f 91       	pop	r16
    118c:	ff 90       	pop	r15
    118e:	ef 90       	pop	r14
    1190:	df 90       	pop	r13
    1192:	cf 90       	pop	r12
    1194:	bf 90       	pop	r11
    1196:	af 90       	pop	r10
    1198:	9f 90       	pop	r9
    119a:	8f 90       	pop	r8
    119c:	7f 90       	pop	r7
    119e:	6f 90       	pop	r6
    11a0:	08 95       	ret

000011a2 <xStreamBufferGenericCreate>:
    11a2:	cf 92       	push	r12
    11a4:	df 92       	push	r13
    11a6:	ef 92       	push	r14
    11a8:	ff 92       	push	r15
    11aa:	0f 93       	push	r16
    11ac:	cf 93       	push	r28
    11ae:	df 93       	push	r29
    11b0:	ec 01       	movw	r28, r24
    11b2:	6b 01       	movw	r12, r22
    11b4:	41 30       	cpi	r20, 0x01	; 1
    11b6:	11 f4       	brne	.+4      	; 0x11bc <xStreamBufferGenericCreate+0x1a>
    11b8:	01 e0       	ldi	r16, 0x01	; 1
    11ba:	01 c0       	rjmp	.+2      	; 0x11be <xStreamBufferGenericCreate+0x1c>
    11bc:	00 e0       	ldi	r16, 0x00	; 0
    11be:	c1 14       	cp	r12, r1
    11c0:	d1 04       	cpc	r13, r1
    11c2:	19 f4       	brne	.+6      	; 0x11ca <xStreamBufferGenericCreate+0x28>
    11c4:	cc 24       	eor	r12, r12
    11c6:	c3 94       	inc	r12
    11c8:	d1 2c       	mov	r13, r1
    11ca:	ce 01       	movw	r24, r28
    11cc:	40 96       	adiw	r24, 0x10	; 16
    11ce:	c8 17       	cp	r28, r24
    11d0:	d9 07       	cpc	r29, r25
    11d2:	20 f4       	brcc	.+8      	; 0x11dc <xStreamBufferGenericCreate+0x3a>
    11d4:	21 96       	adiw	r28, 0x01	; 1
    11d6:	8f d8       	rcall	.-3810   	; 0x2f6 <pvPortMalloc>
    11d8:	7c 01       	movw	r14, r24
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <xStreamBufferGenericCreate+0x3e>
    11dc:	e1 2c       	mov	r14, r1
    11de:	f1 2c       	mov	r15, r1
    11e0:	e1 14       	cp	r14, r1
    11e2:	f1 04       	cpc	r15, r1
    11e4:	39 f0       	breq	.+14     	; 0x11f4 <xStreamBufferGenericCreate+0x52>
    11e6:	96 01       	movw	r18, r12
    11e8:	ae 01       	movw	r20, r28
    11ea:	b7 01       	movw	r22, r14
    11ec:	61 5f       	subi	r22, 0xF1	; 241
    11ee:	7f 4f       	sbci	r23, 0xFF	; 255
    11f0:	c7 01       	movw	r24, r14
    11f2:	a7 de       	rcall	.-690    	; 0xf42 <prvInitialiseNewStreamBuffer>
    11f4:	c7 01       	movw	r24, r14
    11f6:	df 91       	pop	r29
    11f8:	cf 91       	pop	r28
    11fa:	0f 91       	pop	r16
    11fc:	ff 90       	pop	r15
    11fe:	ef 90       	pop	r14
    1200:	df 90       	pop	r13
    1202:	cf 90       	pop	r12
    1204:	08 95       	ret

00001206 <xStreamBufferReset>:
    1206:	0f 93       	push	r16
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	f8 94       	cli
    120c:	0f 92       	push	r0
    120e:	fc 01       	movw	r30, r24
    1210:	20 85       	ldd	r18, Z+8	; 0x08
    1212:	31 85       	ldd	r19, Z+9	; 0x09
    1214:	23 2b       	or	r18, r19
    1216:	71 f4       	brne	.+28     	; 0x1234 <xStreamBufferReset+0x2e>
    1218:	22 85       	ldd	r18, Z+10	; 0x0a
    121a:	33 85       	ldd	r19, Z+11	; 0x0b
    121c:	23 2b       	or	r18, r19
    121e:	61 f4       	brne	.+24     	; 0x1238 <xStreamBufferReset+0x32>
    1220:	26 81       	ldd	r18, Z+6	; 0x06
    1222:	37 81       	ldd	r19, Z+7	; 0x07
    1224:	44 81       	ldd	r20, Z+4	; 0x04
    1226:	55 81       	ldd	r21, Z+5	; 0x05
    1228:	64 85       	ldd	r22, Z+12	; 0x0c
    122a:	75 85       	ldd	r23, Z+13	; 0x0d
    122c:	06 85       	ldd	r16, Z+14	; 0x0e
    122e:	89 de       	rcall	.-750    	; 0xf42 <prvInitialiseNewStreamBuffer>
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	03 c0       	rjmp	.+6      	; 0x123a <xStreamBufferReset+0x34>
    1234:	80 e0       	ldi	r24, 0x00	; 0
    1236:	01 c0       	rjmp	.+2      	; 0x123a <xStreamBufferReset+0x34>
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	0f 90       	pop	r0
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	0f 91       	pop	r16
    1240:	08 95       	ret

00001242 <xStreamBufferSpacesAvailable>:
    1242:	fc 01       	movw	r30, r24
    1244:	24 81       	ldd	r18, Z+4	; 0x04
    1246:	35 81       	ldd	r19, Z+5	; 0x05
    1248:	80 81       	ld	r24, Z
    124a:	91 81       	ldd	r25, Z+1	; 0x01
    124c:	82 0f       	add	r24, r18
    124e:	93 1f       	adc	r25, r19
    1250:	42 81       	ldd	r20, Z+2	; 0x02
    1252:	53 81       	ldd	r21, Z+3	; 0x03
    1254:	84 1b       	sub	r24, r20
    1256:	95 0b       	sbc	r25, r21
    1258:	01 97       	sbiw	r24, 0x01	; 1
    125a:	82 17       	cp	r24, r18
    125c:	93 07       	cpc	r25, r19
    125e:	10 f0       	brcs	.+4      	; 0x1264 <xStreamBufferSpacesAvailable+0x22>
    1260:	82 1b       	sub	r24, r18
    1262:	93 0b       	sbc	r25, r19
    1264:	08 95       	ret

00001266 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1266:	2f 92       	push	r2
    1268:	3f 92       	push	r3
    126a:	4f 92       	push	r4
    126c:	5f 92       	push	r5
    126e:	6f 92       	push	r6
    1270:	7f 92       	push	r7
    1272:	8f 92       	push	r8
    1274:	9f 92       	push	r9
    1276:	af 92       	push	r10
    1278:	bf 92       	push	r11
    127a:	cf 92       	push	r12
    127c:	df 92       	push	r13
    127e:	ef 92       	push	r14
    1280:	ff 92       	push	r15
    1282:	0f 93       	push	r16
    1284:	1f 93       	push	r17
    1286:	cf 93       	push	r28
    1288:	df 93       	push	r29
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
    128e:	2b 97       	sbiw	r28, 0x0b	; 11
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	f8 94       	cli
    1294:	de bf       	out	0x3e, r29	; 62
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	cd bf       	out	0x3d, r28	; 61
    129a:	4c 01       	movw	r8, r24
    129c:	7b 87       	std	Y+11, r23	; 0x0b
    129e:	6a 87       	std	Y+10, r22	; 0x0a
    12a0:	1a 01       	movw	r2, r20
    12a2:	0e 83       	std	Y+6, r16	; 0x06
    12a4:	1f 83       	std	Y+7, r17	; 0x07
    12a6:	28 87       	std	Y+8, r18	; 0x08
    12a8:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    12aa:	fc 01       	movw	r30, r24
    12ac:	84 81       	ldd	r24, Z+4	; 0x04
    12ae:	95 81       	ldd	r25, Z+5	; 0x05
    12b0:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    12b2:	26 85       	ldd	r18, Z+14	; 0x0e
    12b4:	20 ff       	sbrs	r18, 0
    12b6:	0c c0       	rjmp	.+24     	; 0x12d0 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    12b8:	2a 01       	movw	r4, r20
    12ba:	f2 e0       	ldi	r31, 0x02	; 2
    12bc:	4f 0e       	add	r4, r31
    12be:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    12c0:	84 15       	cp	r24, r4
    12c2:	95 05       	cpc	r25, r5
    12c4:	58 f4       	brcc	.+22     	; 0x12dc <xStreamBufferSend+0x76>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    12c6:	1e 82       	std	Y+6, r1	; 0x06
    12c8:	1f 82       	std	Y+7, r1	; 0x07
    12ca:	18 86       	std	Y+8, r1	; 0x08
    12cc:	19 86       	std	Y+9, r1	; 0x09
    12ce:	06 c0       	rjmp	.+12     	; 0x12dc <xStreamBufferSend+0x76>
    else
    {
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
    12d0:	84 17       	cp	r24, r20
    12d2:	95 07       	cpc	r25, r21
    12d4:	10 f0       	brcs	.+4      	; 0x12da <xStreamBufferSend+0x74>
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    size_t xRequiredSpace = xDataLengthBytes;
    12d6:	2a 01       	movw	r4, r20
    12d8:	01 c0       	rjmp	.+2      	; 0x12dc <xStreamBufferSend+0x76>
        /* If this is a stream buffer then it is acceptable to write only part
         * of the message to the buffer.  Cap the length to the total length of
         * the buffer. */
        if( xRequiredSpace > xMaxReportedSpace )
        {
            xRequiredSpace = xMaxReportedSpace;
    12da:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    12dc:	8e 81       	ldd	r24, Y+6	; 0x06
    12de:	9f 81       	ldd	r25, Y+7	; 0x07
    12e0:	a8 85       	ldd	r26, Y+8	; 0x08
    12e2:	b9 85       	ldd	r27, Y+9	; 0x09
    12e4:	89 2b       	or	r24, r25
    12e6:	8a 2b       	or	r24, r26
    12e8:	8b 2b       	or	r24, r27
    12ea:	09 f4       	brne	.+2      	; 0x12ee <xStreamBufferSend+0x88>
    12ec:	36 c0       	rjmp	.+108    	; 0x135a <xStreamBufferSend+0xf4>
    {
        vTaskSetTimeOutState( &xTimeOut );
    12ee:	ce 01       	movw	r24, r28
    12f0:	01 96       	adiw	r24, 0x01	; 1
    12f2:	e7 d7       	rcall	.+4046   	; 0x22c2 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    12f4:	0f b6       	in	r0, 0x3f	; 63
    12f6:	f8 94       	cli
    12f8:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    12fa:	c4 01       	movw	r24, r8
    12fc:	a2 df       	rcall	.-188    	; 0x1242 <xStreamBufferSpacesAvailable>
    12fe:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1300:	84 15       	cp	r24, r4
    1302:	95 05       	cpc	r25, r5
    1304:	38 f5       	brcc	.+78     	; 0x1354 <xStreamBufferSend+0xee>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1306:	60 e0       	ldi	r22, 0x00	; 0
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	0e 94 20 16 	call	0x2c40	; 0x2c40 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1310:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <xTaskGetCurrentTaskHandle>
    1314:	f4 01       	movw	r30, r8
    1316:	93 87       	std	Z+11, r25	; 0x0b
    1318:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    131a:	0f 90       	pop	r0
    131c:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    131e:	ae 80       	ldd	r10, Y+6	; 0x06
    1320:	bf 80       	ldd	r11, Y+7	; 0x07
    1322:	c8 84       	ldd	r12, Y+8	; 0x08
    1324:	d9 84       	ldd	r13, Y+9	; 0x09
    1326:	e1 2c       	mov	r14, r1
    1328:	f1 2c       	mov	r15, r1
    132a:	00 e0       	ldi	r16, 0x00	; 0
    132c:	10 e0       	ldi	r17, 0x00	; 0
    132e:	98 01       	movw	r18, r16
    1330:	40 e0       	ldi	r20, 0x00	; 0
    1332:	50 e0       	ldi	r21, 0x00	; 0
    1334:	ba 01       	movw	r22, r20
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	0e 94 60 13 	call	0x26c0	; 0x26c0 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    133c:	f4 01       	movw	r30, r8
    133e:	13 86       	std	Z+11, r1	; 0x0b
    1340:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1342:	be 01       	movw	r22, r28
    1344:	6a 5f       	subi	r22, 0xFA	; 250
    1346:	7f 4f       	sbci	r23, 0xFF	; 255
    1348:	ce 01       	movw	r24, r28
    134a:	01 96       	adiw	r24, 0x01	; 1
    134c:	e1 d7       	rcall	.+4034   	; 0x2310 <xTaskCheckForTimeOut>
    134e:	88 23       	and	r24, r24
    1350:	89 f2       	breq	.-94     	; 0x12f4 <xStreamBufferSend+0x8e>
    1352:	05 c0       	rjmp	.+10     	; 0x135e <xStreamBufferSend+0xf8>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    1354:	0f 90       	pop	r0
    1356:	0f be       	out	0x3f, r0	; 63
                    break;
    1358:	02 c0       	rjmp	.+4      	; 0x135e <xStreamBufferSend+0xf8>
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace = 0;
    135a:	61 2c       	mov	r6, r1
    135c:	71 2c       	mov	r7, r1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    135e:	61 14       	cp	r6, r1
    1360:	71 04       	cpc	r7, r1
    1362:	19 f4       	brne	.+6      	; 0x136a <xStreamBufferSend+0x104>
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1364:	c4 01       	movw	r24, r8
    1366:	6d df       	rcall	.-294    	; 0x1242 <xStreamBufferSpacesAvailable>
    1368:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    136a:	82 01       	movw	r16, r4
    136c:	93 01       	movw	r18, r6
    136e:	a1 01       	movw	r20, r2
    1370:	6a 85       	ldd	r22, Y+10	; 0x0a
    1372:	7b 85       	ldd	r23, Y+11	; 0x0b
    1374:	c4 01       	movw	r24, r8
    1376:	3e de       	rcall	.-900    	; 0xff4 <prvWriteMessageToBuffer>
    1378:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    137a:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    137c:	e9 f0       	breq	.+58     	; 0x13b8 <xStreamBufferSend+0x152>
    137e:	c4 01       	movw	r24, r8
    1380:	cd dd       	rcall	.-1126   	; 0xf1c <prvBytesInBuffer>
    1382:	f4 01       	movw	r30, r8
    1384:	26 81       	ldd	r18, Z+6	; 0x06
    1386:	37 81       	ldd	r19, Z+7	; 0x07
    1388:	82 17       	cp	r24, r18
    138a:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    138c:	a8 f0       	brcs	.+42     	; 0x13b8 <xStreamBufferSend+0x152>
    138e:	90 d3       	rcall	.+1824   	; 0x1ab0 <vTaskSuspendAll>
    1390:	f4 01       	movw	r30, r8
    1392:	80 85       	ldd	r24, Z+8	; 0x08
    1394:	91 85       	ldd	r25, Z+9	; 0x09
    1396:	89 2b       	or	r24, r25
    1398:	71 f0       	breq	.+28     	; 0x13b6 <xStreamBufferSend+0x150>
    139a:	80 85       	ldd	r24, Z+8	; 0x08
    139c:	91 85       	ldd	r25, Z+9	; 0x09
    139e:	e1 2c       	mov	r14, r1
    13a0:	f1 2c       	mov	r15, r1
    13a2:	00 e0       	ldi	r16, 0x00	; 0
    13a4:	20 e0       	ldi	r18, 0x00	; 0
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	a9 01       	movw	r20, r18
    13aa:	60 e0       	ldi	r22, 0x00	; 0
    13ac:	0e 94 07 14 	call	0x280e	; 0x280e <xTaskGenericNotify>
    13b0:	f4 01       	movw	r30, r8
    13b2:	11 86       	std	Z+9, r1	; 0x09
    13b4:	10 86       	std	Z+8, r1	; 0x08
    13b6:	bc d4       	rcall	.+2424   	; 0x1d30 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    13b8:	c6 01       	movw	r24, r12
    13ba:	2b 96       	adiw	r28, 0x0b	; 11
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	f8 94       	cli
    13c0:	de bf       	out	0x3e, r29	; 62
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	cd bf       	out	0x3d, r28	; 61
    13c6:	df 91       	pop	r29
    13c8:	cf 91       	pop	r28
    13ca:	1f 91       	pop	r17
    13cc:	0f 91       	pop	r16
    13ce:	ff 90       	pop	r15
    13d0:	ef 90       	pop	r14
    13d2:	df 90       	pop	r13
    13d4:	cf 90       	pop	r12
    13d6:	bf 90       	pop	r11
    13d8:	af 90       	pop	r10
    13da:	9f 90       	pop	r9
    13dc:	8f 90       	pop	r8
    13de:	7f 90       	pop	r7
    13e0:	6f 90       	pop	r6
    13e2:	5f 90       	pop	r5
    13e4:	4f 90       	pop	r4
    13e6:	3f 90       	pop	r3
    13e8:	2f 90       	pop	r2
    13ea:	08 95       	ret

000013ec <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    13ec:	af 92       	push	r10
    13ee:	bf 92       	push	r11
    13f0:	cf 92       	push	r12
    13f2:	df 92       	push	r13
    13f4:	ef 92       	push	r14
    13f6:	ff 92       	push	r15
    13f8:	0f 93       	push	r16
    13fa:	1f 93       	push	r17
    13fc:	cf 93       	push	r28
    13fe:	df 93       	push	r29
    1400:	ec 01       	movw	r28, r24
    1402:	7b 01       	movw	r14, r22
    1404:	5a 01       	movw	r10, r20
    1406:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1408:	8e 85       	ldd	r24, Y+14	; 0x0e
    140a:	80 ff       	sbrs	r24, 0
    140c:	04 c0       	rjmp	.+8      	; 0x1416 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    140e:	8a 01       	movw	r16, r20
    1410:	0e 5f       	subi	r16, 0xFE	; 254
    1412:	1f 4f       	sbci	r17, 0xFF	; 255
    1414:	01 c0       	rjmp	.+2      	; 0x1418 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1416:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1418:	ce 01       	movw	r24, r28
    141a:	13 df       	rcall	.-474    	; 0x1242 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    141c:	9c 01       	movw	r18, r24
    141e:	a5 01       	movw	r20, r10
    1420:	b7 01       	movw	r22, r14
    1422:	ce 01       	movw	r24, r28
    1424:	e7 dd       	rcall	.-1074   	; 0xff4 <prvWriteMessageToBuffer>
    1426:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1428:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    142a:	c1 f0       	breq	.+48     	; 0x145c <xStreamBufferSendFromISR+0x70>
    142c:	ce 01       	movw	r24, r28
    142e:	76 dd       	rcall	.-1300   	; 0xf1c <prvBytesInBuffer>
    1430:	2e 81       	ldd	r18, Y+6	; 0x06
    1432:	3f 81       	ldd	r19, Y+7	; 0x07
    1434:	82 17       	cp	r24, r18
    1436:	93 07       	cpc	r25, r19
    1438:	88 f0       	brcs	.+34     	; 0x145c <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    143a:	88 85       	ldd	r24, Y+8	; 0x08
    143c:	99 85       	ldd	r25, Y+9	; 0x09
    143e:	89 2b       	or	r24, r25
    1440:	69 f0       	breq	.+26     	; 0x145c <xStreamBufferSendFromISR+0x70>
    1442:	88 85       	ldd	r24, Y+8	; 0x08
    1444:	99 85       	ldd	r25, Y+9	; 0x09
    1446:	e1 2c       	mov	r14, r1
    1448:	f1 2c       	mov	r15, r1
    144a:	00 e0       	ldi	r16, 0x00	; 0
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	a9 01       	movw	r20, r18
    1452:	60 e0       	ldi	r22, 0x00	; 0
    1454:	0e 94 fe 14 	call	0x29fc	; 0x29fc <xTaskGenericNotifyFromISR>
    1458:	19 86       	std	Y+9, r1	; 0x09
    145a:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    145c:	c5 01       	movw	r24, r10
    145e:	df 91       	pop	r29
    1460:	cf 91       	pop	r28
    1462:	1f 91       	pop	r17
    1464:	0f 91       	pop	r16
    1466:	ff 90       	pop	r15
    1468:	ef 90       	pop	r14
    146a:	df 90       	pop	r13
    146c:	cf 90       	pop	r12
    146e:	bf 90       	pop	r11
    1470:	af 90       	pop	r10
    1472:	08 95       	ret

00001474 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1474:	4f 92       	push	r4
    1476:	5f 92       	push	r5
    1478:	6f 92       	push	r6
    147a:	7f 92       	push	r7
    147c:	8f 92       	push	r8
    147e:	9f 92       	push	r9
    1480:	af 92       	push	r10
    1482:	bf 92       	push	r11
    1484:	cf 92       	push	r12
    1486:	df 92       	push	r13
    1488:	ef 92       	push	r14
    148a:	ff 92       	push	r15
    148c:	0f 93       	push	r16
    148e:	1f 93       	push	r17
    1490:	cf 93       	push	r28
    1492:	df 93       	push	r29
    1494:	ec 01       	movw	r28, r24
    1496:	2b 01       	movw	r4, r22
    1498:	3a 01       	movw	r6, r20
    149a:	58 01       	movw	r10, r16
    149c:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    149e:	8e 85       	ldd	r24, Y+14	; 0x0e
    14a0:	80 ff       	sbrs	r24, 0
    14a2:	05 c0       	rjmp	.+10     	; 0x14ae <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    14a4:	68 94       	set
    14a6:	88 24       	eor	r8, r8
    14a8:	81 f8       	bld	r8, 1
    14aa:	91 2c       	mov	r9, r1
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <xStreamBufferReceive+0x3e>
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    14ae:	81 2c       	mov	r8, r1
    14b0:	91 2c       	mov	r9, r1
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    14b2:	a1 14       	cp	r10, r1
    14b4:	b1 04       	cpc	r11, r1
    14b6:	c1 04       	cpc	r12, r1
    14b8:	d1 04       	cpc	r13, r1
    14ba:	39 f1       	breq	.+78     	; 0x150a <xStreamBufferReceive+0x96>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    14bc:	0f b6       	in	r0, 0x3f	; 63
    14be:	f8 94       	cli
    14c0:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    14c2:	ce 01       	movw	r24, r28
    14c4:	2b dd       	rcall	.-1450   	; 0xf1c <prvBytesInBuffer>
    14c6:	7c 01       	movw	r14, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    14c8:	88 16       	cp	r8, r24
    14ca:	99 06       	cpc	r9, r25
    14cc:	40 f0       	brcs	.+16     	; 0x14de <xStreamBufferReceive+0x6a>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    14ce:	60 e0       	ldi	r22, 0x00	; 0
    14d0:	80 e0       	ldi	r24, 0x00	; 0
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	0e 94 20 16 	call	0x2c40	; 0x2c40 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    14d8:	85 d7       	rcall	.+3850   	; 0x23e4 <xTaskGetCurrentTaskHandle>
    14da:	99 87       	std	Y+9, r25	; 0x09
    14dc:	88 87       	std	Y+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    14de:	0f 90       	pop	r0
    14e0:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    14e2:	8e 14       	cp	r8, r14
    14e4:	9f 04       	cpc	r9, r15
    14e6:	a0 f0       	brcs	.+40     	; 0x1510 <xStreamBufferReceive+0x9c>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    14e8:	e1 2c       	mov	r14, r1
    14ea:	f1 2c       	mov	r15, r1
    14ec:	00 e0       	ldi	r16, 0x00	; 0
    14ee:	10 e0       	ldi	r17, 0x00	; 0
    14f0:	98 01       	movw	r18, r16
    14f2:	40 e0       	ldi	r20, 0x00	; 0
    14f4:	50 e0       	ldi	r21, 0x00	; 0
    14f6:	ba 01       	movw	r22, r20
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	0e 94 60 13 	call	0x26c0	; 0x26c0 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    14fe:	19 86       	std	Y+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1500:	18 86       	std	Y+8, r1	; 0x08
    1502:	ce 01       	movw	r24, r28
    1504:	0b dd       	rcall	.-1514   	; 0xf1c <prvBytesInBuffer>
    1506:	7c 01       	movw	r14, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1508:	03 c0       	rjmp	.+6      	; 0x1510 <xStreamBufferReceive+0x9c>
    150a:	ce 01       	movw	r24, r28
    150c:	07 dd       	rcall	.-1522   	; 0xf1c <prvBytesInBuffer>
    150e:	7c 01       	movw	r14, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1510:	8e 14       	cp	r8, r14
    1512:	9f 04       	cpc	r9, r15
    1514:	e8 f4       	brcc	.+58     	; 0x1550 <xStreamBufferReceive+0xdc>
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
    1516:	84 01       	movw	r16, r8
    1518:	97 01       	movw	r18, r14
    151a:	a3 01       	movw	r20, r6
    151c:	b2 01       	movw	r22, r4
    151e:	ce 01       	movw	r24, r28
    1520:	fb dd       	rcall	.-1034   	; 0x1118 <prvReadMessageFromBuffer>

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1522:	6c 01       	movw	r12, r24
    1524:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1526:	b1 f0       	breq	.+44     	; 0x1554 <xStreamBufferReceive+0xe0>
    1528:	c3 d2       	rcall	.+1414   	; 0x1ab0 <vTaskSuspendAll>
    152a:	8a 85       	ldd	r24, Y+10	; 0x0a
    152c:	9b 85       	ldd	r25, Y+11	; 0x0b
    152e:	89 2b       	or	r24, r25
    1530:	69 f0       	breq	.+26     	; 0x154c <xStreamBufferReceive+0xd8>
    1532:	8a 85       	ldd	r24, Y+10	; 0x0a
    1534:	9b 85       	ldd	r25, Y+11	; 0x0b
    1536:	e1 2c       	mov	r14, r1
    1538:	f1 2c       	mov	r15, r1
    153a:	00 e0       	ldi	r16, 0x00	; 0
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	a9 01       	movw	r20, r18
    1542:	60 e0       	ldi	r22, 0x00	; 0
    1544:	0e 94 07 14 	call	0x280e	; 0x280e <xTaskGenericNotify>
    1548:	1b 86       	std	Y+11, r1	; 0x0b
    154a:	1a 86       	std	Y+10, r1	; 0x0a
    154c:	f1 d3       	rcall	.+2018   	; 0x1d30 <xTaskResumeAll>
    154e:	02 c0       	rjmp	.+4      	; 0x1554 <xStreamBufferReceive+0xe0>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1550:	c1 2c       	mov	r12, r1
    1552:	d1 2c       	mov	r13, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1554:	c6 01       	movw	r24, r12
    1556:	df 91       	pop	r29
    1558:	cf 91       	pop	r28
    155a:	1f 91       	pop	r17
    155c:	0f 91       	pop	r16
    155e:	ff 90       	pop	r15
    1560:	ef 90       	pop	r14
    1562:	df 90       	pop	r13
    1564:	cf 90       	pop	r12
    1566:	bf 90       	pop	r11
    1568:	af 90       	pop	r10
    156a:	9f 90       	pop	r9
    156c:	8f 90       	pop	r8
    156e:	7f 90       	pop	r7
    1570:	6f 90       	pop	r6
    1572:	5f 90       	pop	r5
    1574:	4f 90       	pop	r4
    1576:	08 95       	ret

00001578 <prvResetNextTaskUnblockTime>:
    1578:	e0 91 2d 16 	lds	r30, 0x162D	; 0x80162d <pxDelayedTaskList>
    157c:	f0 91 2e 16 	lds	r31, 0x162E	; 0x80162e <pxDelayedTaskList+0x1>
    1580:	80 81       	ld	r24, Z
    1582:	81 11       	cpse	r24, r1
    1584:	0c c0       	rjmp	.+24     	; 0x159e <prvResetNextTaskUnblockTime+0x26>
    1586:	8f ef       	ldi	r24, 0xFF	; 255
    1588:	9f ef       	ldi	r25, 0xFF	; 255
    158a:	dc 01       	movw	r26, r24
    158c:	80 93 f7 15 	sts	0x15F7, r24	; 0x8015f7 <xNextTaskUnblockTime>
    1590:	90 93 f8 15 	sts	0x15F8, r25	; 0x8015f8 <xNextTaskUnblockTime+0x1>
    1594:	a0 93 f9 15 	sts	0x15F9, r26	; 0x8015f9 <xNextTaskUnblockTime+0x2>
    1598:	b0 93 fa 15 	sts	0x15FA, r27	; 0x8015fa <xNextTaskUnblockTime+0x3>
    159c:	08 95       	ret
    159e:	e0 91 2d 16 	lds	r30, 0x162D	; 0x80162d <pxDelayedTaskList>
    15a2:	f0 91 2e 16 	lds	r31, 0x162E	; 0x80162e <pxDelayedTaskList+0x1>
    15a6:	07 80       	ldd	r0, Z+7	; 0x07
    15a8:	f0 85       	ldd	r31, Z+8	; 0x08
    15aa:	e0 2d       	mov	r30, r0
    15ac:	80 81       	ld	r24, Z
    15ae:	91 81       	ldd	r25, Z+1	; 0x01
    15b0:	a2 81       	ldd	r26, Z+2	; 0x02
    15b2:	b3 81       	ldd	r27, Z+3	; 0x03
    15b4:	80 93 f7 15 	sts	0x15F7, r24	; 0x8015f7 <xNextTaskUnblockTime>
    15b8:	90 93 f8 15 	sts	0x15F8, r25	; 0x8015f8 <xNextTaskUnblockTime+0x1>
    15bc:	a0 93 f9 15 	sts	0x15F9, r26	; 0x8015f9 <xNextTaskUnblockTime+0x2>
    15c0:	b0 93 fa 15 	sts	0x15FA, r27	; 0x8015fa <xNextTaskUnblockTime+0x3>
    15c4:	08 95       	ret

000015c6 <prvDeleteTCB>:
    15c6:	cf 93       	push	r28
    15c8:	df 93       	push	r29
    15ca:	ec 01       	movw	r28, r24
    15cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15d0:	0e 94 24 02 	call	0x448	; 0x448 <vPortFree>
    15d4:	ce 01       	movw	r24, r28
    15d6:	0e 94 24 02 	call	0x448	; 0x448 <vPortFree>
    15da:	df 91       	pop	r29
    15dc:	cf 91       	pop	r28
    15de:	08 95       	ret

000015e0 <prvInitialiseNewTask>:
    15e0:	4f 92       	push	r4
    15e2:	5f 92       	push	r5
    15e4:	6f 92       	push	r6
    15e6:	7f 92       	push	r7
    15e8:	8f 92       	push	r8
    15ea:	9f 92       	push	r9
    15ec:	af 92       	push	r10
    15ee:	bf 92       	push	r11
    15f0:	cf 92       	push	r12
    15f2:	df 92       	push	r13
    15f4:	ef 92       	push	r14
    15f6:	ff 92       	push	r15
    15f8:	0f 93       	push	r16
    15fa:	cf 93       	push	r28
    15fc:	df 93       	push	r29
    15fe:	2c 01       	movw	r4, r24
    1600:	5b 01       	movw	r10, r22
    1602:	4a 01       	movw	r8, r20
    1604:	39 01       	movw	r6, r18
    1606:	e6 01       	movw	r28, r12
    1608:	65 ea       	ldi	r22, 0xA5	; 165
    160a:	70 e0       	ldi	r23, 0x00	; 0
    160c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    160e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1610:	0e 94 87 2f 	call	0x5f0e	; 0x5f0e <memset>
    1614:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1616:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1618:	21 e0       	ldi	r18, 0x01	; 1
    161a:	82 1a       	sub	r8, r18
    161c:	91 08       	sbc	r9, r1
    161e:	88 0e       	add	r8, r24
    1620:	99 1e       	adc	r9, r25
    1622:	a1 14       	cp	r10, r1
    1624:	b1 04       	cpc	r11, r1
    1626:	89 f4       	brne	.+34     	; 0x164a <prvInitialiseNewTask+0x6a>
    1628:	15 c0       	rjmp	.+42     	; 0x1654 <prvInitialiseNewTask+0x74>
    162a:	82 2f       	mov	r24, r18
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	f5 01       	movw	r30, r10
    1630:	e8 0f       	add	r30, r24
    1632:	f9 1f       	adc	r31, r25
    1634:	30 81       	ld	r19, Z
    1636:	de 01       	movw	r26, r28
    1638:	a8 0f       	add	r26, r24
    163a:	b9 1f       	adc	r27, r25
    163c:	5d 96       	adiw	r26, 0x1d	; 29
    163e:	3c 93       	st	X, r19
    1640:	80 81       	ld	r24, Z
    1642:	88 23       	and	r24, r24
    1644:	29 f0       	breq	.+10     	; 0x1650 <prvInitialiseNewTask+0x70>
    1646:	2f 5f       	subi	r18, 0xFF	; 255
    1648:	01 c0       	rjmp	.+2      	; 0x164c <prvInitialiseNewTask+0x6c>
    164a:	20 e0       	ldi	r18, 0x00	; 0
    164c:	20 31       	cpi	r18, 0x10	; 16
    164e:	68 f3       	brcs	.-38     	; 0x162a <prvInitialiseNewTask+0x4a>
    1650:	1c a6       	std	Y+44, r1	; 0x2c
    1652:	01 c0       	rjmp	.+2      	; 0x1656 <prvInitialiseNewTask+0x76>
    1654:	1d 8e       	std	Y+29, r1	; 0x1d
    1656:	0a 30       	cpi	r16, 0x0A	; 10
    1658:	08 f0       	brcs	.+2      	; 0x165c <prvInitialiseNewTask+0x7c>
    165a:	09 e0       	ldi	r16, 0x09	; 9
    165c:	0a 8f       	std	Y+26, r16	; 0x1a
    165e:	0d a7       	std	Y+45, r16	; 0x2d
    1660:	1e a6       	std	Y+46, r1	; 0x2e
    1662:	ce 01       	movw	r24, r28
    1664:	02 96       	adiw	r24, 0x02	; 2
    1666:	0e 94 72 02 	call	0x4e4	; 0x4e4 <vListInitialiseItem>
    166a:	ce 01       	movw	r24, r28
    166c:	0e 96       	adiw	r24, 0x0e	; 14
    166e:	0e 94 72 02 	call	0x4e4	; 0x4e4 <vListInitialiseItem>
    1672:	db 87       	std	Y+11, r29	; 0x0b
    1674:	ca 87       	std	Y+10, r28	; 0x0a
    1676:	8a e0       	ldi	r24, 0x0A	; 10
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	a0 e0       	ldi	r26, 0x00	; 0
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	80 1b       	sub	r24, r16
    1680:	91 09       	sbc	r25, r1
    1682:	a1 09       	sbc	r26, r1
    1684:	b1 09       	sbc	r27, r1
    1686:	8e 87       	std	Y+14, r24	; 0x0e
    1688:	9f 87       	std	Y+15, r25	; 0x0f
    168a:	a8 8b       	std	Y+16, r26	; 0x10
    168c:	b9 8b       	std	Y+17, r27	; 0x11
    168e:	df 8b       	std	Y+23, r29	; 0x17
    1690:	ce 8b       	std	Y+22, r28	; 0x16
    1692:	84 e0       	ldi	r24, 0x04	; 4
    1694:	fe 01       	movw	r30, r28
    1696:	bf 96       	adiw	r30, 0x2f	; 47
    1698:	df 01       	movw	r26, r30
    169a:	1d 92       	st	X+, r1
    169c:	8a 95       	dec	r24
    169e:	e9 f7       	brne	.-6      	; 0x169a <prvInitialiseNewTask+0xba>
    16a0:	1b aa       	std	Y+51, r1	; 0x33
    16a2:	a3 01       	movw	r20, r6
    16a4:	b2 01       	movw	r22, r4
    16a6:	c4 01       	movw	r24, r8
    16a8:	0e 94 e6 02 	call	0x5cc	; 0x5cc <pxPortInitialiseStack>
    16ac:	99 83       	std	Y+1, r25	; 0x01
    16ae:	88 83       	st	Y, r24
    16b0:	e1 14       	cp	r14, r1
    16b2:	f1 04       	cpc	r15, r1
    16b4:	19 f0       	breq	.+6      	; 0x16bc <prvInitialiseNewTask+0xdc>
    16b6:	f7 01       	movw	r30, r14
    16b8:	d1 83       	std	Z+1, r29	; 0x01
    16ba:	c0 83       	st	Z, r28
    16bc:	df 91       	pop	r29
    16be:	cf 91       	pop	r28
    16c0:	0f 91       	pop	r16
    16c2:	ff 90       	pop	r15
    16c4:	ef 90       	pop	r14
    16c6:	df 90       	pop	r13
    16c8:	cf 90       	pop	r12
    16ca:	bf 90       	pop	r11
    16cc:	af 90       	pop	r10
    16ce:	9f 90       	pop	r9
    16d0:	8f 90       	pop	r8
    16d2:	7f 90       	pop	r7
    16d4:	6f 90       	pop	r6
    16d6:	5f 90       	pop	r5
    16d8:	4f 90       	pop	r4
    16da:	08 95       	ret

000016dc <prvInitialiseTaskLists>:
    16dc:	cf 93       	push	r28
    16de:	c0 e0       	ldi	r28, 0x00	; 0
    16e0:	09 c0       	rjmp	.+18     	; 0x16f4 <prvInitialiseTaskLists+0x18>
    16e2:	2b e0       	ldi	r18, 0x0B	; 11
    16e4:	c2 9f       	mul	r28, r18
    16e6:	c0 01       	movw	r24, r0
    16e8:	11 24       	eor	r1, r1
    16ea:	8b 5b       	subi	r24, 0xBB	; 187
    16ec:	99 4e       	sbci	r25, 0xE9	; 233
    16ee:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInitialise>
    16f2:	cf 5f       	subi	r28, 0xFF	; 255
    16f4:	ca 30       	cpi	r28, 0x0A	; 10
    16f6:	a8 f3       	brcs	.-22     	; 0x16e2 <prvInitialiseTaskLists+0x6>
    16f8:	8a e3       	ldi	r24, 0x3A	; 58
    16fa:	96 e1       	ldi	r25, 0x16	; 22
    16fc:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInitialise>
    1700:	8f e2       	ldi	r24, 0x2F	; 47
    1702:	96 e1       	ldi	r25, 0x16	; 22
    1704:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInitialise>
    1708:	80 e2       	ldi	r24, 0x20	; 32
    170a:	96 e1       	ldi	r25, 0x16	; 22
    170c:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInitialise>
    1710:	85 e1       	ldi	r24, 0x15	; 21
    1712:	96 e1       	ldi	r25, 0x16	; 22
    1714:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInitialise>
    1718:	89 e0       	ldi	r24, 0x09	; 9
    171a:	96 e1       	ldi	r25, 0x16	; 22
    171c:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInitialise>
    1720:	8a e3       	ldi	r24, 0x3A	; 58
    1722:	96 e1       	ldi	r25, 0x16	; 22
    1724:	90 93 2e 16 	sts	0x162E, r25	; 0x80162e <pxDelayedTaskList+0x1>
    1728:	80 93 2d 16 	sts	0x162D, r24	; 0x80162d <pxDelayedTaskList>
    172c:	8f e2       	ldi	r24, 0x2F	; 47
    172e:	96 e1       	ldi	r25, 0x16	; 22
    1730:	90 93 2c 16 	sts	0x162C, r25	; 0x80162c <pxOverflowDelayedTaskList+0x1>
    1734:	80 93 2b 16 	sts	0x162B, r24	; 0x80162b <pxOverflowDelayedTaskList>
    1738:	cf 91       	pop	r28
    173a:	08 95       	ret

0000173c <prvAddNewTaskToReadyList>:
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
    1740:	ec 01       	movw	r28, r24
    1742:	0f b6       	in	r0, 0x3f	; 63
    1744:	f8 94       	cli
    1746:	0f 92       	push	r0
    1748:	80 91 08 16 	lds	r24, 0x1608	; 0x801608 <uxCurrentNumberOfTasks>
    174c:	8f 5f       	subi	r24, 0xFF	; 255
    174e:	80 93 08 16 	sts	0x1608, r24	; 0x801608 <uxCurrentNumberOfTasks>
    1752:	80 91 b3 16 	lds	r24, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    1756:	90 91 b4 16 	lds	r25, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    175a:	89 2b       	or	r24, r25
    175c:	51 f4       	brne	.+20     	; 0x1772 <prvAddNewTaskToReadyList+0x36>
    175e:	d0 93 b4 16 	sts	0x16B4, r29	; 0x8016b4 <pxCurrentTCB+0x1>
    1762:	c0 93 b3 16 	sts	0x16B3, r28	; 0x8016b3 <pxCurrentTCB>
    1766:	80 91 08 16 	lds	r24, 0x1608	; 0x801608 <uxCurrentNumberOfTasks>
    176a:	81 30       	cpi	r24, 0x01	; 1
    176c:	91 f4       	brne	.+36     	; 0x1792 <prvAddNewTaskToReadyList+0x56>
    176e:	b6 df       	rcall	.-148    	; 0x16dc <prvInitialiseTaskLists>
    1770:	10 c0       	rjmp	.+32     	; 0x1792 <prvAddNewTaskToReadyList+0x56>
    1772:	80 91 02 16 	lds	r24, 0x1602	; 0x801602 <xSchedulerRunning>
    1776:	81 11       	cpse	r24, r1
    1778:	0c c0       	rjmp	.+24     	; 0x1792 <prvAddNewTaskToReadyList+0x56>
    177a:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    177e:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    1782:	92 8d       	ldd	r25, Z+26	; 0x1a
    1784:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1786:	89 17       	cp	r24, r25
    1788:	20 f0       	brcs	.+8      	; 0x1792 <prvAddNewTaskToReadyList+0x56>
    178a:	d0 93 b4 16 	sts	0x16B4, r29	; 0x8016b4 <pxCurrentTCB+0x1>
    178e:	c0 93 b3 16 	sts	0x16B3, r28	; 0x8016b3 <pxCurrentTCB>
    1792:	80 91 fb 15 	lds	r24, 0x15FB	; 0x8015fb <uxTaskNumber>
    1796:	8f 5f       	subi	r24, 0xFF	; 255
    1798:	80 93 fb 15 	sts	0x15FB, r24	; 0x8015fb <uxTaskNumber>
    179c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    179e:	80 91 03 16 	lds	r24, 0x1603	; 0x801603 <uxTopReadyPriority>
    17a2:	8e 17       	cp	r24, r30
    17a4:	10 f4       	brcc	.+4      	; 0x17aa <prvAddNewTaskToReadyList+0x6e>
    17a6:	e0 93 03 16 	sts	0x1603, r30	; 0x801603 <uxTopReadyPriority>
    17aa:	8b e0       	ldi	r24, 0x0B	; 11
    17ac:	8e 9f       	mul	r24, r30
    17ae:	f0 01       	movw	r30, r0
    17b0:	11 24       	eor	r1, r1
    17b2:	eb 5b       	subi	r30, 0xBB	; 187
    17b4:	f9 4e       	sbci	r31, 0xE9	; 233
    17b6:	01 80       	ldd	r0, Z+1	; 0x01
    17b8:	f2 81       	ldd	r31, Z+2	; 0x02
    17ba:	e0 2d       	mov	r30, r0
    17bc:	ff 83       	std	Y+7, r31	; 0x07
    17be:	ee 83       	std	Y+6, r30	; 0x06
    17c0:	26 81       	ldd	r18, Z+6	; 0x06
    17c2:	37 81       	ldd	r19, Z+7	; 0x07
    17c4:	39 87       	std	Y+9, r19	; 0x09
    17c6:	28 87       	std	Y+8, r18	; 0x08
    17c8:	a6 81       	ldd	r26, Z+6	; 0x06
    17ca:	b7 81       	ldd	r27, Z+7	; 0x07
    17cc:	9e 01       	movw	r18, r28
    17ce:	2e 5f       	subi	r18, 0xFE	; 254
    17d0:	3f 4f       	sbci	r19, 0xFF	; 255
    17d2:	15 96       	adiw	r26, 0x05	; 5
    17d4:	3c 93       	st	X, r19
    17d6:	2e 93       	st	-X, r18
    17d8:	14 97       	sbiw	r26, 0x04	; 4
    17da:	37 83       	std	Z+7, r19	; 0x07
    17dc:	26 83       	std	Z+6, r18	; 0x06
    17de:	ea 8d       	ldd	r30, Y+26	; 0x1a
    17e0:	8e 9f       	mul	r24, r30
    17e2:	f0 01       	movw	r30, r0
    17e4:	11 24       	eor	r1, r1
    17e6:	eb 5b       	subi	r30, 0xBB	; 187
    17e8:	f9 4e       	sbci	r31, 0xE9	; 233
    17ea:	fd 87       	std	Y+13, r31	; 0x0d
    17ec:	ec 87       	std	Y+12, r30	; 0x0c
    17ee:	80 81       	ld	r24, Z
    17f0:	8f 5f       	subi	r24, 0xFF	; 255
    17f2:	80 83       	st	Z, r24
    17f4:	0f 90       	pop	r0
    17f6:	0f be       	out	0x3f, r0	; 63
    17f8:	80 91 02 16 	lds	r24, 0x1602	; 0x801602 <xSchedulerRunning>
    17fc:	88 23       	and	r24, r24
    17fe:	51 f0       	breq	.+20     	; 0x1814 <prvAddNewTaskToReadyList+0xd8>
    1800:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    1804:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    1808:	92 8d       	ldd	r25, Z+26	; 0x1a
    180a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    180c:	98 17       	cp	r25, r24
    180e:	10 f4       	brcc	.+4      	; 0x1814 <prvAddNewTaskToReadyList+0xd8>
    1810:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>
    1814:	df 91       	pop	r29
    1816:	cf 91       	pop	r28
    1818:	08 95       	ret

0000181a <prvCheckTasksWaitingTermination>:
    181a:	cf 93       	push	r28
    181c:	df 93       	push	r29
    181e:	1b c0       	rjmp	.+54     	; 0x1856 <prvCheckTasksWaitingTermination+0x3c>
    1820:	0f b6       	in	r0, 0x3f	; 63
    1822:	f8 94       	cli
    1824:	0f 92       	push	r0
    1826:	e0 91 1c 16 	lds	r30, 0x161C	; 0x80161c <xTasksWaitingTermination+0x7>
    182a:	f0 91 1d 16 	lds	r31, 0x161D	; 0x80161d <xTasksWaitingTermination+0x8>
    182e:	c0 85       	ldd	r28, Z+8	; 0x08
    1830:	d1 85       	ldd	r29, Z+9	; 0x09
    1832:	ce 01       	movw	r24, r28
    1834:	02 96       	adiw	r24, 0x02	; 2
    1836:	0e 94 b3 02 	call	0x566	; 0x566 <uxListRemove>
    183a:	80 91 08 16 	lds	r24, 0x1608	; 0x801608 <uxCurrentNumberOfTasks>
    183e:	81 50       	subi	r24, 0x01	; 1
    1840:	80 93 08 16 	sts	0x1608, r24	; 0x801608 <uxCurrentNumberOfTasks>
    1844:	80 91 14 16 	lds	r24, 0x1614	; 0x801614 <uxDeletedTasksWaitingCleanUp>
    1848:	81 50       	subi	r24, 0x01	; 1
    184a:	80 93 14 16 	sts	0x1614, r24	; 0x801614 <uxDeletedTasksWaitingCleanUp>
    184e:	0f 90       	pop	r0
    1850:	0f be       	out	0x3f, r0	; 63
    1852:	ce 01       	movw	r24, r28
    1854:	b8 de       	rcall	.-656    	; 0x15c6 <prvDeleteTCB>
    1856:	80 91 14 16 	lds	r24, 0x1614	; 0x801614 <uxDeletedTasksWaitingCleanUp>
    185a:	81 11       	cpse	r24, r1
    185c:	e1 cf       	rjmp	.-62     	; 0x1820 <prvCheckTasksWaitingTermination+0x6>
    185e:	df 91       	pop	r29
    1860:	cf 91       	pop	r28
    1862:	08 95       	ret

00001864 <prvAddCurrentTaskToDelayedList>:
    1864:	8f 92       	push	r8
    1866:	9f 92       	push	r9
    1868:	af 92       	push	r10
    186a:	bf 92       	push	r11
    186c:	cf 92       	push	r12
    186e:	df 92       	push	r13
    1870:	ef 92       	push	r14
    1872:	ff 92       	push	r15
    1874:	cf 93       	push	r28
    1876:	df 93       	push	r29
    1878:	6b 01       	movw	r12, r22
    187a:	7c 01       	movw	r14, r24
    187c:	c4 2f       	mov	r28, r20
    187e:	80 90 04 16 	lds	r8, 0x1604	; 0x801604 <xTickCount>
    1882:	90 90 05 16 	lds	r9, 0x1605	; 0x801605 <xTickCount+0x1>
    1886:	a0 90 06 16 	lds	r10, 0x1606	; 0x801606 <xTickCount+0x2>
    188a:	b0 90 07 16 	lds	r11, 0x1607	; 0x801607 <xTickCount+0x3>
    188e:	80 91 b3 16 	lds	r24, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    1892:	90 91 b4 16 	lds	r25, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    1896:	02 96       	adiw	r24, 0x02	; 2
    1898:	0e 94 b3 02 	call	0x566	; 0x566 <uxListRemove>
    189c:	8f ef       	ldi	r24, 0xFF	; 255
    189e:	c8 16       	cp	r12, r24
    18a0:	d8 06       	cpc	r13, r24
    18a2:	e8 06       	cpc	r14, r24
    18a4:	f8 06       	cpc	r15, r24
    18a6:	b1 f5       	brne	.+108    	; 0x1914 <prvAddCurrentTaskToDelayedList+0xb0>
    18a8:	cc 23       	and	r28, r28
    18aa:	a1 f1       	breq	.+104    	; 0x1914 <prvAddCurrentTaskToDelayedList+0xb0>
    18ac:	e9 e0       	ldi	r30, 0x09	; 9
    18ae:	f6 e1       	ldi	r31, 0x16	; 22
    18b0:	a1 81       	ldd	r26, Z+1	; 0x01
    18b2:	b2 81       	ldd	r27, Z+2	; 0x02
    18b4:	c0 91 b3 16 	lds	r28, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    18b8:	d0 91 b4 16 	lds	r29, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    18bc:	bf 83       	std	Y+7, r27	; 0x07
    18be:	ae 83       	std	Y+6, r26	; 0x06
    18c0:	c0 91 b3 16 	lds	r28, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    18c4:	d0 91 b4 16 	lds	r29, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    18c8:	16 96       	adiw	r26, 0x06	; 6
    18ca:	8d 91       	ld	r24, X+
    18cc:	9c 91       	ld	r25, X
    18ce:	17 97       	sbiw	r26, 0x07	; 7
    18d0:	99 87       	std	Y+9, r25	; 0x09
    18d2:	88 87       	std	Y+8, r24	; 0x08
    18d4:	16 96       	adiw	r26, 0x06	; 6
    18d6:	cd 91       	ld	r28, X+
    18d8:	dc 91       	ld	r29, X
    18da:	17 97       	sbiw	r26, 0x07	; 7
    18dc:	80 91 b3 16 	lds	r24, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    18e0:	90 91 b4 16 	lds	r25, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    18e4:	02 96       	adiw	r24, 0x02	; 2
    18e6:	9d 83       	std	Y+5, r25	; 0x05
    18e8:	8c 83       	std	Y+4, r24	; 0x04
    18ea:	80 91 b3 16 	lds	r24, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    18ee:	90 91 b4 16 	lds	r25, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    18f2:	02 96       	adiw	r24, 0x02	; 2
    18f4:	17 96       	adiw	r26, 0x07	; 7
    18f6:	9c 93       	st	X, r25
    18f8:	8e 93       	st	-X, r24
    18fa:	16 97       	sbiw	r26, 0x06	; 6
    18fc:	a0 91 b3 16 	lds	r26, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    1900:	b0 91 b4 16 	lds	r27, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    1904:	1d 96       	adiw	r26, 0x0d	; 13
    1906:	fc 93       	st	X, r31
    1908:	ee 93       	st	-X, r30
    190a:	1c 97       	sbiw	r26, 0x0c	; 12
    190c:	80 81       	ld	r24, Z
    190e:	8f 5f       	subi	r24, 0xFF	; 255
    1910:	80 83       	st	Z, r24
    1912:	3f c0       	rjmp	.+126    	; 0x1992 <prvAddCurrentTaskToDelayedList+0x12e>
    1914:	c8 0c       	add	r12, r8
    1916:	d9 1c       	adc	r13, r9
    1918:	ea 1c       	adc	r14, r10
    191a:	fb 1c       	adc	r15, r11
    191c:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    1920:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    1924:	c2 82       	std	Z+2, r12	; 0x02
    1926:	d3 82       	std	Z+3, r13	; 0x03
    1928:	e4 82       	std	Z+4, r14	; 0x04
    192a:	f5 82       	std	Z+5, r15	; 0x05
    192c:	c8 14       	cp	r12, r8
    192e:	d9 04       	cpc	r13, r9
    1930:	ea 04       	cpc	r14, r10
    1932:	fb 04       	cpc	r15, r11
    1934:	68 f4       	brcc	.+26     	; 0x1950 <prvAddCurrentTaskToDelayedList+0xec>
    1936:	60 91 b3 16 	lds	r22, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    193a:	70 91 b4 16 	lds	r23, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    193e:	80 91 2b 16 	lds	r24, 0x162B	; 0x80162b <pxOverflowDelayedTaskList>
    1942:	90 91 2c 16 	lds	r25, 0x162C	; 0x80162c <pxOverflowDelayedTaskList+0x1>
    1946:	6e 5f       	subi	r22, 0xFE	; 254
    1948:	7f 4f       	sbci	r23, 0xFF	; 255
    194a:	0e 94 76 02 	call	0x4ec	; 0x4ec <vListInsert>
    194e:	21 c0       	rjmp	.+66     	; 0x1992 <prvAddCurrentTaskToDelayedList+0x12e>
    1950:	60 91 b3 16 	lds	r22, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    1954:	70 91 b4 16 	lds	r23, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    1958:	80 91 2d 16 	lds	r24, 0x162D	; 0x80162d <pxDelayedTaskList>
    195c:	90 91 2e 16 	lds	r25, 0x162E	; 0x80162e <pxDelayedTaskList+0x1>
    1960:	6e 5f       	subi	r22, 0xFE	; 254
    1962:	7f 4f       	sbci	r23, 0xFF	; 255
    1964:	0e 94 76 02 	call	0x4ec	; 0x4ec <vListInsert>
    1968:	80 91 f7 15 	lds	r24, 0x15F7	; 0x8015f7 <xNextTaskUnblockTime>
    196c:	90 91 f8 15 	lds	r25, 0x15F8	; 0x8015f8 <xNextTaskUnblockTime+0x1>
    1970:	a0 91 f9 15 	lds	r26, 0x15F9	; 0x8015f9 <xNextTaskUnblockTime+0x2>
    1974:	b0 91 fa 15 	lds	r27, 0x15FA	; 0x8015fa <xNextTaskUnblockTime+0x3>
    1978:	c8 16       	cp	r12, r24
    197a:	d9 06       	cpc	r13, r25
    197c:	ea 06       	cpc	r14, r26
    197e:	fb 06       	cpc	r15, r27
    1980:	40 f4       	brcc	.+16     	; 0x1992 <prvAddCurrentTaskToDelayedList+0x12e>
    1982:	c0 92 f7 15 	sts	0x15F7, r12	; 0x8015f7 <xNextTaskUnblockTime>
    1986:	d0 92 f8 15 	sts	0x15F8, r13	; 0x8015f8 <xNextTaskUnblockTime+0x1>
    198a:	e0 92 f9 15 	sts	0x15F9, r14	; 0x8015f9 <xNextTaskUnblockTime+0x2>
    198e:	f0 92 fa 15 	sts	0x15FA, r15	; 0x8015fa <xNextTaskUnblockTime+0x3>
    1992:	df 91       	pop	r29
    1994:	cf 91       	pop	r28
    1996:	ff 90       	pop	r15
    1998:	ef 90       	pop	r14
    199a:	df 90       	pop	r13
    199c:	cf 90       	pop	r12
    199e:	bf 90       	pop	r11
    19a0:	af 90       	pop	r10
    19a2:	9f 90       	pop	r9
    19a4:	8f 90       	pop	r8
    19a6:	08 95       	ret

000019a8 <xTaskCreate>:
    19a8:	2f 92       	push	r2
    19aa:	3f 92       	push	r3
    19ac:	4f 92       	push	r4
    19ae:	5f 92       	push	r5
    19b0:	6f 92       	push	r6
    19b2:	7f 92       	push	r7
    19b4:	8f 92       	push	r8
    19b6:	9f 92       	push	r9
    19b8:	af 92       	push	r10
    19ba:	bf 92       	push	r11
    19bc:	cf 92       	push	r12
    19be:	df 92       	push	r13
    19c0:	ef 92       	push	r14
    19c2:	ff 92       	push	r15
    19c4:	0f 93       	push	r16
    19c6:	cf 93       	push	r28
    19c8:	df 93       	push	r29
    19ca:	3c 01       	movw	r6, r24
    19cc:	1b 01       	movw	r2, r22
    19ce:	4a 01       	movw	r8, r20
    19d0:	29 01       	movw	r4, r18
    19d2:	ca 01       	movw	r24, r20
    19d4:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <pvPortMalloc>
    19d8:	6c 01       	movw	r12, r24
    19da:	89 2b       	or	r24, r25
    19dc:	71 f0       	breq	.+28     	; 0x19fa <xTaskCreate+0x52>
    19de:	84 e3       	ldi	r24, 0x34	; 52
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <pvPortMalloc>
    19e6:	ec 01       	movw	r28, r24
    19e8:	89 2b       	or	r24, r25
    19ea:	19 f0       	breq	.+6      	; 0x19f2 <xTaskCreate+0x4a>
    19ec:	dc 8e       	std	Y+28, r13	; 0x1c
    19ee:	cb 8e       	std	Y+27, r12	; 0x1b
    19f0:	06 c0       	rjmp	.+12     	; 0x19fe <xTaskCreate+0x56>
    19f2:	c6 01       	movw	r24, r12
    19f4:	0e 94 24 02 	call	0x448	; 0x448 <vPortFree>
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <xTaskCreate+0x56>
    19fa:	c0 e0       	ldi	r28, 0x00	; 0
    19fc:	d0 e0       	ldi	r29, 0x00	; 0
    19fe:	20 97       	sbiw	r28, 0x00	; 0
    1a00:	61 f0       	breq	.+24     	; 0x1a1a <xTaskCreate+0x72>
    1a02:	a1 2c       	mov	r10, r1
    1a04:	b1 2c       	mov	r11, r1
    1a06:	6e 01       	movw	r12, r28
    1a08:	92 01       	movw	r18, r4
    1a0a:	a4 01       	movw	r20, r8
    1a0c:	b1 01       	movw	r22, r2
    1a0e:	c3 01       	movw	r24, r6
    1a10:	e7 dd       	rcall	.-1074   	; 0x15e0 <prvInitialiseNewTask>
    1a12:	ce 01       	movw	r24, r28
    1a14:	93 de       	rcall	.-730    	; 0x173c <prvAddNewTaskToReadyList>
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	01 c0       	rjmp	.+2      	; 0x1a1c <xTaskCreate+0x74>
    1a1a:	8f ef       	ldi	r24, 0xFF	; 255
    1a1c:	df 91       	pop	r29
    1a1e:	cf 91       	pop	r28
    1a20:	0f 91       	pop	r16
    1a22:	ff 90       	pop	r15
    1a24:	ef 90       	pop	r14
    1a26:	df 90       	pop	r13
    1a28:	cf 90       	pop	r12
    1a2a:	bf 90       	pop	r11
    1a2c:	af 90       	pop	r10
    1a2e:	9f 90       	pop	r9
    1a30:	8f 90       	pop	r8
    1a32:	7f 90       	pop	r7
    1a34:	6f 90       	pop	r6
    1a36:	5f 90       	pop	r5
    1a38:	4f 90       	pop	r4
    1a3a:	3f 90       	pop	r3
    1a3c:	2f 90       	pop	r2
    1a3e:	08 95       	ret

00001a40 <vTaskStartScheduler>:
    1a40:	ef 92       	push	r14
    1a42:	ff 92       	push	r15
    1a44:	0f 93       	push	r16
    1a46:	0f 2e       	mov	r0, r31
    1a48:	f5 ef       	ldi	r31, 0xF5	; 245
    1a4a:	ef 2e       	mov	r14, r31
    1a4c:	f5 e1       	ldi	r31, 0x15	; 21
    1a4e:	ff 2e       	mov	r15, r31
    1a50:	f0 2d       	mov	r31, r0
    1a52:	00 e0       	ldi	r16, 0x00	; 0
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	40 ec       	ldi	r20, 0xC0	; 192
    1a5a:	50 e0       	ldi	r21, 0x00	; 0
    1a5c:	6f e6       	ldi	r22, 0x6F	; 111
    1a5e:	72 e0       	ldi	r23, 0x02	; 2
    1a60:	8d ec       	ldi	r24, 0xCD	; 205
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	a1 df       	rcall	.-190    	; 0x19a8 <xTaskCreate>
    1a66:	81 30       	cpi	r24, 0x01	; 1
    1a68:	11 f4       	brne	.+4      	; 0x1a6e <vTaskStartScheduler+0x2e>
    1a6a:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <xTimerCreateTimerTask>
    1a6e:	81 30       	cpi	r24, 0x01	; 1
    1a70:	c9 f4       	brne	.+50     	; 0x1aa4 <vTaskStartScheduler+0x64>
    1a72:	f8 94       	cli
    1a74:	8f ef       	ldi	r24, 0xFF	; 255
    1a76:	9f ef       	ldi	r25, 0xFF	; 255
    1a78:	dc 01       	movw	r26, r24
    1a7a:	80 93 f7 15 	sts	0x15F7, r24	; 0x8015f7 <xNextTaskUnblockTime>
    1a7e:	90 93 f8 15 	sts	0x15F8, r25	; 0x8015f8 <xNextTaskUnblockTime+0x1>
    1a82:	a0 93 f9 15 	sts	0x15F9, r26	; 0x8015f9 <xNextTaskUnblockTime+0x2>
    1a86:	b0 93 fa 15 	sts	0x15FA, r27	; 0x8015fa <xNextTaskUnblockTime+0x3>
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	80 93 02 16 	sts	0x1602, r24	; 0x801602 <xSchedulerRunning>
    1a90:	10 92 04 16 	sts	0x1604, r1	; 0x801604 <xTickCount>
    1a94:	10 92 05 16 	sts	0x1605, r1	; 0x801605 <xTickCount+0x1>
    1a98:	10 92 06 16 	sts	0x1606, r1	; 0x801606 <xTickCount+0x2>
    1a9c:	10 92 07 16 	sts	0x1607, r1	; 0x801607 <xTickCount+0x3>
    1aa0:	0e 94 fd 02 	call	0x5fa	; 0x5fa <xPortStartScheduler>
    1aa4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1aa8:	0f 91       	pop	r16
    1aaa:	ff 90       	pop	r15
    1aac:	ef 90       	pop	r14
    1aae:	08 95       	ret

00001ab0 <vTaskSuspendAll>:
    1ab0:	80 91 f4 15 	lds	r24, 0x15F4	; 0x8015f4 <uxSchedulerSuspended>
    1ab4:	8f 5f       	subi	r24, 0xFF	; 255
    1ab6:	80 93 f4 15 	sts	0x15F4, r24	; 0x8015f4 <uxSchedulerSuspended>
    1aba:	08 95       	ret

00001abc <xTaskGetTickCount>:
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	f8 94       	cli
    1ac0:	0f 92       	push	r0
    1ac2:	60 91 04 16 	lds	r22, 0x1604	; 0x801604 <xTickCount>
    1ac6:	70 91 05 16 	lds	r23, 0x1605	; 0x801605 <xTickCount+0x1>
    1aca:	80 91 06 16 	lds	r24, 0x1606	; 0x801606 <xTickCount+0x2>
    1ace:	90 91 07 16 	lds	r25, 0x1607	; 0x801607 <xTickCount+0x3>
    1ad2:	0f 90       	pop	r0
    1ad4:	0f be       	out	0x3f, r0	; 63
    1ad6:	08 95       	ret

00001ad8 <xTaskIncrementTick>:
    1ad8:	cf 92       	push	r12
    1ada:	df 92       	push	r13
    1adc:	ef 92       	push	r14
    1ade:	ff 92       	push	r15
    1ae0:	cf 93       	push	r28
    1ae2:	df 93       	push	r29
    1ae4:	80 91 f4 15 	lds	r24, 0x15F4	; 0x8015f4 <uxSchedulerSuspended>
    1ae8:	81 11       	cpse	r24, r1
    1aea:	05 c1       	rjmp	.+522    	; 0x1cf6 <xTaskIncrementTick+0x21e>
    1aec:	c0 90 04 16 	lds	r12, 0x1604	; 0x801604 <xTickCount>
    1af0:	d0 90 05 16 	lds	r13, 0x1605	; 0x801605 <xTickCount+0x1>
    1af4:	e0 90 06 16 	lds	r14, 0x1606	; 0x801606 <xTickCount+0x2>
    1af8:	f0 90 07 16 	lds	r15, 0x1607	; 0x801607 <xTickCount+0x3>
    1afc:	8f ef       	ldi	r24, 0xFF	; 255
    1afe:	c8 1a       	sub	r12, r24
    1b00:	d8 0a       	sbc	r13, r24
    1b02:	e8 0a       	sbc	r14, r24
    1b04:	f8 0a       	sbc	r15, r24
    1b06:	c0 92 04 16 	sts	0x1604, r12	; 0x801604 <xTickCount>
    1b0a:	d0 92 05 16 	sts	0x1605, r13	; 0x801605 <xTickCount+0x1>
    1b0e:	e0 92 06 16 	sts	0x1606, r14	; 0x801606 <xTickCount+0x2>
    1b12:	f0 92 07 16 	sts	0x1607, r15	; 0x801607 <xTickCount+0x3>
    1b16:	c1 14       	cp	r12, r1
    1b18:	d1 04       	cpc	r13, r1
    1b1a:	e1 04       	cpc	r14, r1
    1b1c:	f1 04       	cpc	r15, r1
    1b1e:	b1 f4       	brne	.+44     	; 0x1b4c <xTaskIncrementTick+0x74>
    1b20:	80 91 2d 16 	lds	r24, 0x162D	; 0x80162d <pxDelayedTaskList>
    1b24:	90 91 2e 16 	lds	r25, 0x162E	; 0x80162e <pxDelayedTaskList+0x1>
    1b28:	20 91 2b 16 	lds	r18, 0x162B	; 0x80162b <pxOverflowDelayedTaskList>
    1b2c:	30 91 2c 16 	lds	r19, 0x162C	; 0x80162c <pxOverflowDelayedTaskList+0x1>
    1b30:	30 93 2e 16 	sts	0x162E, r19	; 0x80162e <pxDelayedTaskList+0x1>
    1b34:	20 93 2d 16 	sts	0x162D, r18	; 0x80162d <pxDelayedTaskList>
    1b38:	90 93 2c 16 	sts	0x162C, r25	; 0x80162c <pxOverflowDelayedTaskList+0x1>
    1b3c:	80 93 2b 16 	sts	0x162B, r24	; 0x80162b <pxOverflowDelayedTaskList>
    1b40:	80 91 fc 15 	lds	r24, 0x15FC	; 0x8015fc <xNumOfOverflows>
    1b44:	8f 5f       	subi	r24, 0xFF	; 255
    1b46:	80 93 fc 15 	sts	0x15FC, r24	; 0x8015fc <xNumOfOverflows>
    1b4a:	16 dd       	rcall	.-1492   	; 0x1578 <prvResetNextTaskUnblockTime>
    1b4c:	80 91 f7 15 	lds	r24, 0x15F7	; 0x8015f7 <xNextTaskUnblockTime>
    1b50:	90 91 f8 15 	lds	r25, 0x15F8	; 0x8015f8 <xNextTaskUnblockTime+0x1>
    1b54:	a0 91 f9 15 	lds	r26, 0x15F9	; 0x8015f9 <xNextTaskUnblockTime+0x2>
    1b58:	b0 91 fa 15 	lds	r27, 0x15FA	; 0x8015fa <xNextTaskUnblockTime+0x3>
    1b5c:	c8 16       	cp	r12, r24
    1b5e:	d9 06       	cpc	r13, r25
    1b60:	ea 06       	cpc	r14, r26
    1b62:	fb 06       	cpc	r15, r27
    1b64:	20 f4       	brcc	.+8      	; 0x1b6e <xTaskIncrementTick+0x96>
    1b66:	80 e0       	ldi	r24, 0x00	; 0
    1b68:	b2 c0       	rjmp	.+356    	; 0x1cce <xTaskIncrementTick+0x1f6>
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	01 c0       	rjmp	.+2      	; 0x1b70 <xTaskIncrementTick+0x98>
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	e0 91 2d 16 	lds	r30, 0x162D	; 0x80162d <pxDelayedTaskList>
    1b74:	f0 91 2e 16 	lds	r31, 0x162E	; 0x80162e <pxDelayedTaskList+0x1>
    1b78:	90 81       	ld	r25, Z
    1b7a:	91 11       	cpse	r25, r1
    1b7c:	0c c0       	rjmp	.+24     	; 0x1b96 <xTaskIncrementTick+0xbe>
    1b7e:	4f ef       	ldi	r20, 0xFF	; 255
    1b80:	5f ef       	ldi	r21, 0xFF	; 255
    1b82:	ba 01       	movw	r22, r20
    1b84:	40 93 f7 15 	sts	0x15F7, r20	; 0x8015f7 <xNextTaskUnblockTime>
    1b88:	50 93 f8 15 	sts	0x15F8, r21	; 0x8015f8 <xNextTaskUnblockTime+0x1>
    1b8c:	60 93 f9 15 	sts	0x15F9, r22	; 0x8015f9 <xNextTaskUnblockTime+0x2>
    1b90:	70 93 fa 15 	sts	0x15FA, r23	; 0x8015fa <xNextTaskUnblockTime+0x3>
    1b94:	9c c0       	rjmp	.+312    	; 0x1cce <xTaskIncrementTick+0x1f6>
    1b96:	e0 91 2d 16 	lds	r30, 0x162D	; 0x80162d <pxDelayedTaskList>
    1b9a:	f0 91 2e 16 	lds	r31, 0x162E	; 0x80162e <pxDelayedTaskList+0x1>
    1b9e:	07 80       	ldd	r0, Z+7	; 0x07
    1ba0:	f0 85       	ldd	r31, Z+8	; 0x08
    1ba2:	e0 2d       	mov	r30, r0
    1ba4:	00 84       	ldd	r0, Z+8	; 0x08
    1ba6:	f1 85       	ldd	r31, Z+9	; 0x09
    1ba8:	e0 2d       	mov	r30, r0
    1baa:	42 81       	ldd	r20, Z+2	; 0x02
    1bac:	53 81       	ldd	r21, Z+3	; 0x03
    1bae:	64 81       	ldd	r22, Z+4	; 0x04
    1bb0:	75 81       	ldd	r23, Z+5	; 0x05
    1bb2:	c4 16       	cp	r12, r20
    1bb4:	d5 06       	cpc	r13, r21
    1bb6:	e6 06       	cpc	r14, r22
    1bb8:	f7 06       	cpc	r15, r23
    1bba:	48 f4       	brcc	.+18     	; 0x1bce <xTaskIncrementTick+0xf6>
    1bbc:	40 93 f7 15 	sts	0x15F7, r20	; 0x8015f7 <xNextTaskUnblockTime>
    1bc0:	50 93 f8 15 	sts	0x15F8, r21	; 0x8015f8 <xNextTaskUnblockTime+0x1>
    1bc4:	60 93 f9 15 	sts	0x15F9, r22	; 0x8015f9 <xNextTaskUnblockTime+0x2>
    1bc8:	70 93 fa 15 	sts	0x15FA, r23	; 0x8015fa <xNextTaskUnblockTime+0x3>
    1bcc:	80 c0       	rjmp	.+256    	; 0x1cce <xTaskIncrementTick+0x1f6>
    1bce:	a4 85       	ldd	r26, Z+12	; 0x0c
    1bd0:	b5 85       	ldd	r27, Z+13	; 0x0d
    1bd2:	c6 81       	ldd	r28, Z+6	; 0x06
    1bd4:	d7 81       	ldd	r29, Z+7	; 0x07
    1bd6:	20 85       	ldd	r18, Z+8	; 0x08
    1bd8:	31 85       	ldd	r19, Z+9	; 0x09
    1bda:	3f 83       	std	Y+7, r19	; 0x07
    1bdc:	2e 83       	std	Y+6, r18	; 0x06
    1bde:	c0 85       	ldd	r28, Z+8	; 0x08
    1be0:	d1 85       	ldd	r29, Z+9	; 0x09
    1be2:	26 81       	ldd	r18, Z+6	; 0x06
    1be4:	37 81       	ldd	r19, Z+7	; 0x07
    1be6:	3d 83       	std	Y+5, r19	; 0x05
    1be8:	2c 83       	std	Y+4, r18	; 0x04
    1bea:	11 96       	adiw	r26, 0x01	; 1
    1bec:	4d 91       	ld	r20, X+
    1bee:	5c 91       	ld	r21, X
    1bf0:	12 97       	sbiw	r26, 0x02	; 2
    1bf2:	9f 01       	movw	r18, r30
    1bf4:	2e 5f       	subi	r18, 0xFE	; 254
    1bf6:	3f 4f       	sbci	r19, 0xFF	; 255
    1bf8:	42 17       	cp	r20, r18
    1bfa:	53 07       	cpc	r21, r19
    1bfc:	31 f4       	brne	.+12     	; 0x1c0a <xTaskIncrementTick+0x132>
    1bfe:	40 85       	ldd	r20, Z+8	; 0x08
    1c00:	51 85       	ldd	r21, Z+9	; 0x09
    1c02:	12 96       	adiw	r26, 0x02	; 2
    1c04:	5c 93       	st	X, r21
    1c06:	4e 93       	st	-X, r20
    1c08:	11 97       	sbiw	r26, 0x01	; 1
    1c0a:	15 86       	std	Z+13, r1	; 0x0d
    1c0c:	14 86       	std	Z+12, r1	; 0x0c
    1c0e:	9c 91       	ld	r25, X
    1c10:	91 50       	subi	r25, 0x01	; 1
    1c12:	9c 93       	st	X, r25
    1c14:	a0 8d       	ldd	r26, Z+24	; 0x18
    1c16:	b1 8d       	ldd	r27, Z+25	; 0x19
    1c18:	10 97       	sbiw	r26, 0x00	; 0
    1c1a:	09 f1       	breq	.+66     	; 0x1c5e <xTaskIncrementTick+0x186>
    1c1c:	c2 89       	ldd	r28, Z+18	; 0x12
    1c1e:	d3 89       	ldd	r29, Z+19	; 0x13
    1c20:	44 89       	ldd	r20, Z+20	; 0x14
    1c22:	55 89       	ldd	r21, Z+21	; 0x15
    1c24:	5f 83       	std	Y+7, r21	; 0x07
    1c26:	4e 83       	std	Y+6, r20	; 0x06
    1c28:	c4 89       	ldd	r28, Z+20	; 0x14
    1c2a:	d5 89       	ldd	r29, Z+21	; 0x15
    1c2c:	42 89       	ldd	r20, Z+18	; 0x12
    1c2e:	53 89       	ldd	r21, Z+19	; 0x13
    1c30:	5d 83       	std	Y+5, r21	; 0x05
    1c32:	4c 83       	std	Y+4, r20	; 0x04
    1c34:	11 96       	adiw	r26, 0x01	; 1
    1c36:	6d 91       	ld	r22, X+
    1c38:	7c 91       	ld	r23, X
    1c3a:	12 97       	sbiw	r26, 0x02	; 2
    1c3c:	af 01       	movw	r20, r30
    1c3e:	42 5f       	subi	r20, 0xF2	; 242
    1c40:	5f 4f       	sbci	r21, 0xFF	; 255
    1c42:	64 17       	cp	r22, r20
    1c44:	75 07       	cpc	r23, r21
    1c46:	31 f4       	brne	.+12     	; 0x1c54 <xTaskIncrementTick+0x17c>
    1c48:	44 89       	ldd	r20, Z+20	; 0x14
    1c4a:	55 89       	ldd	r21, Z+21	; 0x15
    1c4c:	12 96       	adiw	r26, 0x02	; 2
    1c4e:	5c 93       	st	X, r21
    1c50:	4e 93       	st	-X, r20
    1c52:	11 97       	sbiw	r26, 0x01	; 1
    1c54:	11 8e       	std	Z+25, r1	; 0x19
    1c56:	10 8e       	std	Z+24, r1	; 0x18
    1c58:	9c 91       	ld	r25, X
    1c5a:	91 50       	subi	r25, 0x01	; 1
    1c5c:	9c 93       	st	X, r25
    1c5e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1c60:	90 91 03 16 	lds	r25, 0x1603	; 0x801603 <uxTopReadyPriority>
    1c64:	9a 17       	cp	r25, r26
    1c66:	10 f4       	brcc	.+4      	; 0x1c6c <xTaskIncrementTick+0x194>
    1c68:	a0 93 03 16 	sts	0x1603, r26	; 0x801603 <uxTopReadyPriority>
    1c6c:	9b e0       	ldi	r25, 0x0B	; 11
    1c6e:	9a 9f       	mul	r25, r26
    1c70:	d0 01       	movw	r26, r0
    1c72:	11 24       	eor	r1, r1
    1c74:	ab 5b       	subi	r26, 0xBB	; 187
    1c76:	b9 4e       	sbci	r27, 0xE9	; 233
    1c78:	11 96       	adiw	r26, 0x01	; 1
    1c7a:	0d 90       	ld	r0, X+
    1c7c:	bc 91       	ld	r27, X
    1c7e:	a0 2d       	mov	r26, r0
    1c80:	b7 83       	std	Z+7, r27	; 0x07
    1c82:	a6 83       	std	Z+6, r26	; 0x06
    1c84:	16 96       	adiw	r26, 0x06	; 6
    1c86:	4d 91       	ld	r20, X+
    1c88:	5c 91       	ld	r21, X
    1c8a:	17 97       	sbiw	r26, 0x07	; 7
    1c8c:	51 87       	std	Z+9, r21	; 0x09
    1c8e:	40 87       	std	Z+8, r20	; 0x08
    1c90:	16 96       	adiw	r26, 0x06	; 6
    1c92:	cd 91       	ld	r28, X+
    1c94:	dc 91       	ld	r29, X
    1c96:	17 97       	sbiw	r26, 0x07	; 7
    1c98:	3d 83       	std	Y+5, r19	; 0x05
    1c9a:	2c 83       	std	Y+4, r18	; 0x04
    1c9c:	17 96       	adiw	r26, 0x07	; 7
    1c9e:	3c 93       	st	X, r19
    1ca0:	2e 93       	st	-X, r18
    1ca2:	16 97       	sbiw	r26, 0x06	; 6
    1ca4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1ca6:	9a 9f       	mul	r25, r26
    1ca8:	d0 01       	movw	r26, r0
    1caa:	11 24       	eor	r1, r1
    1cac:	ab 5b       	subi	r26, 0xBB	; 187
    1cae:	b9 4e       	sbci	r27, 0xE9	; 233
    1cb0:	b5 87       	std	Z+13, r27	; 0x0d
    1cb2:	a4 87       	std	Z+12, r26	; 0x0c
    1cb4:	9c 91       	ld	r25, X
    1cb6:	9f 5f       	subi	r25, 0xFF	; 255
    1cb8:	9c 93       	st	X, r25
    1cba:	22 8d       	ldd	r18, Z+26	; 0x1a
    1cbc:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    1cc0:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    1cc4:	92 8d       	ldd	r25, Z+26	; 0x1a
    1cc6:	29 17       	cp	r18, r25
    1cc8:	08 f0       	brcs	.+2      	; 0x1ccc <xTaskIncrementTick+0x1f4>
    1cca:	4f cf       	rjmp	.-354    	; 0x1b6a <xTaskIncrementTick+0x92>
    1ccc:	51 cf       	rjmp	.-350    	; 0x1b70 <xTaskIncrementTick+0x98>
    1cce:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    1cd2:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    1cd6:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1cd8:	9b e0       	ldi	r25, 0x0B	; 11
    1cda:	e9 9f       	mul	r30, r25
    1cdc:	f0 01       	movw	r30, r0
    1cde:	11 24       	eor	r1, r1
    1ce0:	eb 5b       	subi	r30, 0xBB	; 187
    1ce2:	f9 4e       	sbci	r31, 0xE9	; 233
    1ce4:	90 81       	ld	r25, Z
    1ce6:	92 30       	cpi	r25, 0x02	; 2
    1ce8:	08 f0       	brcs	.+2      	; 0x1cec <xTaskIncrementTick+0x214>
    1cea:	81 e0       	ldi	r24, 0x01	; 1
    1cec:	90 91 fd 15 	lds	r25, 0x15FD	; 0x8015fd <xYieldPending>
    1cf0:	91 11       	cpse	r25, r1
    1cf2:	16 c0       	rjmp	.+44     	; 0x1d20 <xTaskIncrementTick+0x248>
    1cf4:	16 c0       	rjmp	.+44     	; 0x1d22 <xTaskIncrementTick+0x24a>
    1cf6:	80 91 fe 15 	lds	r24, 0x15FE	; 0x8015fe <xPendedTicks>
    1cfa:	90 91 ff 15 	lds	r25, 0x15FF	; 0x8015ff <xPendedTicks+0x1>
    1cfe:	a0 91 00 16 	lds	r26, 0x1600	; 0x801600 <xPendedTicks+0x2>
    1d02:	b0 91 01 16 	lds	r27, 0x1601	; 0x801601 <xPendedTicks+0x3>
    1d06:	01 96       	adiw	r24, 0x01	; 1
    1d08:	a1 1d       	adc	r26, r1
    1d0a:	b1 1d       	adc	r27, r1
    1d0c:	80 93 fe 15 	sts	0x15FE, r24	; 0x8015fe <xPendedTicks>
    1d10:	90 93 ff 15 	sts	0x15FF, r25	; 0x8015ff <xPendedTicks+0x1>
    1d14:	a0 93 00 16 	sts	0x1600, r26	; 0x801600 <xPendedTicks+0x2>
    1d18:	b0 93 01 16 	sts	0x1601, r27	; 0x801601 <xPendedTicks+0x3>
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	01 c0       	rjmp	.+2      	; 0x1d22 <xTaskIncrementTick+0x24a>
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	df 91       	pop	r29
    1d24:	cf 91       	pop	r28
    1d26:	ff 90       	pop	r15
    1d28:	ef 90       	pop	r14
    1d2a:	df 90       	pop	r13
    1d2c:	cf 90       	pop	r12
    1d2e:	08 95       	ret

00001d30 <xTaskResumeAll>:
    1d30:	cf 92       	push	r12
    1d32:	df 92       	push	r13
    1d34:	ef 92       	push	r14
    1d36:	ff 92       	push	r15
    1d38:	cf 93       	push	r28
    1d3a:	df 93       	push	r29
    1d3c:	0f b6       	in	r0, 0x3f	; 63
    1d3e:	f8 94       	cli
    1d40:	0f 92       	push	r0
    1d42:	80 91 f4 15 	lds	r24, 0x15F4	; 0x8015f4 <uxSchedulerSuspended>
    1d46:	81 50       	subi	r24, 0x01	; 1
    1d48:	80 93 f4 15 	sts	0x15F4, r24	; 0x8015f4 <uxSchedulerSuspended>
    1d4c:	80 91 f4 15 	lds	r24, 0x15F4	; 0x8015f4 <uxSchedulerSuspended>
    1d50:	81 11       	cpse	r24, r1
    1d52:	be c0       	rjmp	.+380    	; 0x1ed0 <xTaskResumeAll+0x1a0>
    1d54:	80 91 08 16 	lds	r24, 0x1608	; 0x801608 <uxCurrentNumberOfTasks>
    1d58:	81 11       	cpse	r24, r1
    1d5a:	88 c0       	rjmp	.+272    	; 0x1e6c <xTaskResumeAll+0x13c>
    1d5c:	bc c0       	rjmp	.+376    	; 0x1ed6 <xTaskResumeAll+0x1a6>
    1d5e:	e0 91 27 16 	lds	r30, 0x1627	; 0x801627 <xPendingReadyList+0x7>
    1d62:	f0 91 28 16 	lds	r31, 0x1628	; 0x801628 <xPendingReadyList+0x8>
    1d66:	00 84       	ldd	r0, Z+8	; 0x08
    1d68:	f1 85       	ldd	r31, Z+9	; 0x09
    1d6a:	e0 2d       	mov	r30, r0
    1d6c:	a0 8d       	ldd	r26, Z+24	; 0x18
    1d6e:	b1 8d       	ldd	r27, Z+25	; 0x19
    1d70:	c2 89       	ldd	r28, Z+18	; 0x12
    1d72:	d3 89       	ldd	r29, Z+19	; 0x13
    1d74:	84 89       	ldd	r24, Z+20	; 0x14
    1d76:	95 89       	ldd	r25, Z+21	; 0x15
    1d78:	9f 83       	std	Y+7, r25	; 0x07
    1d7a:	8e 83       	std	Y+6, r24	; 0x06
    1d7c:	c4 89       	ldd	r28, Z+20	; 0x14
    1d7e:	d5 89       	ldd	r29, Z+21	; 0x15
    1d80:	82 89       	ldd	r24, Z+18	; 0x12
    1d82:	93 89       	ldd	r25, Z+19	; 0x13
    1d84:	9d 83       	std	Y+5, r25	; 0x05
    1d86:	8c 83       	std	Y+4, r24	; 0x04
    1d88:	11 96       	adiw	r26, 0x01	; 1
    1d8a:	2d 91       	ld	r18, X+
    1d8c:	3c 91       	ld	r19, X
    1d8e:	12 97       	sbiw	r26, 0x02	; 2
    1d90:	cf 01       	movw	r24, r30
    1d92:	0e 96       	adiw	r24, 0x0e	; 14
    1d94:	28 17       	cp	r18, r24
    1d96:	39 07       	cpc	r19, r25
    1d98:	31 f4       	brne	.+12     	; 0x1da6 <xTaskResumeAll+0x76>
    1d9a:	84 89       	ldd	r24, Z+20	; 0x14
    1d9c:	95 89       	ldd	r25, Z+21	; 0x15
    1d9e:	12 96       	adiw	r26, 0x02	; 2
    1da0:	9c 93       	st	X, r25
    1da2:	8e 93       	st	-X, r24
    1da4:	11 97       	sbiw	r26, 0x01	; 1
    1da6:	11 8e       	std	Z+25, r1	; 0x19
    1da8:	10 8e       	std	Z+24, r1	; 0x18
    1daa:	8c 91       	ld	r24, X
    1dac:	81 50       	subi	r24, 0x01	; 1
    1dae:	8c 93       	st	X, r24
    1db0:	a4 85       	ldd	r26, Z+12	; 0x0c
    1db2:	b5 85       	ldd	r27, Z+13	; 0x0d
    1db4:	c6 81       	ldd	r28, Z+6	; 0x06
    1db6:	d7 81       	ldd	r29, Z+7	; 0x07
    1db8:	80 85       	ldd	r24, Z+8	; 0x08
    1dba:	91 85       	ldd	r25, Z+9	; 0x09
    1dbc:	9f 83       	std	Y+7, r25	; 0x07
    1dbe:	8e 83       	std	Y+6, r24	; 0x06
    1dc0:	c0 85       	ldd	r28, Z+8	; 0x08
    1dc2:	d1 85       	ldd	r29, Z+9	; 0x09
    1dc4:	86 81       	ldd	r24, Z+6	; 0x06
    1dc6:	97 81       	ldd	r25, Z+7	; 0x07
    1dc8:	9d 83       	std	Y+5, r25	; 0x05
    1dca:	8c 83       	std	Y+4, r24	; 0x04
    1dcc:	11 96       	adiw	r26, 0x01	; 1
    1dce:	8d 91       	ld	r24, X+
    1dd0:	9c 91       	ld	r25, X
    1dd2:	12 97       	sbiw	r26, 0x02	; 2
    1dd4:	9f 01       	movw	r18, r30
    1dd6:	2e 5f       	subi	r18, 0xFE	; 254
    1dd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dda:	82 17       	cp	r24, r18
    1ddc:	93 07       	cpc	r25, r19
    1dde:	31 f4       	brne	.+12     	; 0x1dec <xTaskResumeAll+0xbc>
    1de0:	80 85       	ldd	r24, Z+8	; 0x08
    1de2:	91 85       	ldd	r25, Z+9	; 0x09
    1de4:	12 96       	adiw	r26, 0x02	; 2
    1de6:	9c 93       	st	X, r25
    1de8:	8e 93       	st	-X, r24
    1dea:	11 97       	sbiw	r26, 0x01	; 1
    1dec:	15 86       	std	Z+13, r1	; 0x0d
    1dee:	14 86       	std	Z+12, r1	; 0x0c
    1df0:	8c 91       	ld	r24, X
    1df2:	81 50       	subi	r24, 0x01	; 1
    1df4:	8c 93       	st	X, r24
    1df6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1df8:	80 91 03 16 	lds	r24, 0x1603	; 0x801603 <uxTopReadyPriority>
    1dfc:	8a 17       	cp	r24, r26
    1dfe:	10 f4       	brcc	.+4      	; 0x1e04 <xTaskResumeAll+0xd4>
    1e00:	a0 93 03 16 	sts	0x1603, r26	; 0x801603 <uxTopReadyPriority>
    1e04:	8b e0       	ldi	r24, 0x0B	; 11
    1e06:	8a 9f       	mul	r24, r26
    1e08:	d0 01       	movw	r26, r0
    1e0a:	11 24       	eor	r1, r1
    1e0c:	ab 5b       	subi	r26, 0xBB	; 187
    1e0e:	b9 4e       	sbci	r27, 0xE9	; 233
    1e10:	11 96       	adiw	r26, 0x01	; 1
    1e12:	0d 90       	ld	r0, X+
    1e14:	bc 91       	ld	r27, X
    1e16:	a0 2d       	mov	r26, r0
    1e18:	b7 83       	std	Z+7, r27	; 0x07
    1e1a:	a6 83       	std	Z+6, r26	; 0x06
    1e1c:	16 96       	adiw	r26, 0x06	; 6
    1e1e:	4d 91       	ld	r20, X+
    1e20:	5c 91       	ld	r21, X
    1e22:	17 97       	sbiw	r26, 0x07	; 7
    1e24:	51 87       	std	Z+9, r21	; 0x09
    1e26:	40 87       	std	Z+8, r20	; 0x08
    1e28:	16 96       	adiw	r26, 0x06	; 6
    1e2a:	cd 91       	ld	r28, X+
    1e2c:	dc 91       	ld	r29, X
    1e2e:	17 97       	sbiw	r26, 0x07	; 7
    1e30:	3d 83       	std	Y+5, r19	; 0x05
    1e32:	2c 83       	std	Y+4, r18	; 0x04
    1e34:	17 96       	adiw	r26, 0x07	; 7
    1e36:	3c 93       	st	X, r19
    1e38:	2e 93       	st	-X, r18
    1e3a:	16 97       	sbiw	r26, 0x06	; 6
    1e3c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1e3e:	8a 9f       	mul	r24, r26
    1e40:	d0 01       	movw	r26, r0
    1e42:	11 24       	eor	r1, r1
    1e44:	ab 5b       	subi	r26, 0xBB	; 187
    1e46:	b9 4e       	sbci	r27, 0xE9	; 233
    1e48:	b5 87       	std	Z+13, r27	; 0x0d
    1e4a:	a4 87       	std	Z+12, r26	; 0x0c
    1e4c:	8c 91       	ld	r24, X
    1e4e:	8f 5f       	subi	r24, 0xFF	; 255
    1e50:	8c 93       	st	X, r24
    1e52:	92 8d       	ldd	r25, Z+26	; 0x1a
    1e54:	a0 91 b3 16 	lds	r26, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    1e58:	b0 91 b4 16 	lds	r27, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    1e5c:	5a 96       	adiw	r26, 0x1a	; 26
    1e5e:	8c 91       	ld	r24, X
    1e60:	98 17       	cp	r25, r24
    1e62:	30 f0       	brcs	.+12     	; 0x1e70 <xTaskResumeAll+0x140>
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	80 93 fd 15 	sts	0x15FD, r24	; 0x8015fd <xYieldPending>
    1e6a:	02 c0       	rjmp	.+4      	; 0x1e70 <xTaskResumeAll+0x140>
    1e6c:	e0 e0       	ldi	r30, 0x00	; 0
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 91 20 16 	lds	r24, 0x1620	; 0x801620 <xPendingReadyList>
    1e74:	81 11       	cpse	r24, r1
    1e76:	73 cf       	rjmp	.-282    	; 0x1d5e <xTaskResumeAll+0x2e>
    1e78:	ef 2b       	or	r30, r31
    1e7a:	09 f0       	breq	.+2      	; 0x1e7e <xTaskResumeAll+0x14e>
    1e7c:	7d db       	rcall	.-2310   	; 0x1578 <prvResetNextTaskUnblockTime>
    1e7e:	c0 90 fe 15 	lds	r12, 0x15FE	; 0x8015fe <xPendedTicks>
    1e82:	d0 90 ff 15 	lds	r13, 0x15FF	; 0x8015ff <xPendedTicks+0x1>
    1e86:	e0 90 00 16 	lds	r14, 0x1600	; 0x801600 <xPendedTicks+0x2>
    1e8a:	f0 90 01 16 	lds	r15, 0x1601	; 0x801601 <xPendedTicks+0x3>
    1e8e:	c1 14       	cp	r12, r1
    1e90:	d1 04       	cpc	r13, r1
    1e92:	e1 04       	cpc	r14, r1
    1e94:	f1 04       	cpc	r15, r1
    1e96:	a1 f0       	breq	.+40     	; 0x1ec0 <xTaskResumeAll+0x190>
    1e98:	1f de       	rcall	.-962    	; 0x1ad8 <xTaskIncrementTick>
    1e9a:	88 23       	and	r24, r24
    1e9c:	19 f0       	breq	.+6      	; 0x1ea4 <xTaskResumeAll+0x174>
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	80 93 fd 15 	sts	0x15FD, r24	; 0x8015fd <xYieldPending>
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	c8 1a       	sub	r12, r24
    1ea8:	d1 08       	sbc	r13, r1
    1eaa:	e1 08       	sbc	r14, r1
    1eac:	f1 08       	sbc	r15, r1
    1eae:	a1 f7       	brne	.-24     	; 0x1e98 <xTaskResumeAll+0x168>
    1eb0:	10 92 fe 15 	sts	0x15FE, r1	; 0x8015fe <xPendedTicks>
    1eb4:	10 92 ff 15 	sts	0x15FF, r1	; 0x8015ff <xPendedTicks+0x1>
    1eb8:	10 92 00 16 	sts	0x1600, r1	; 0x801600 <xPendedTicks+0x2>
    1ebc:	10 92 01 16 	sts	0x1601, r1	; 0x801601 <xPendedTicks+0x3>
    1ec0:	80 91 fd 15 	lds	r24, 0x15FD	; 0x8015fd <xYieldPending>
    1ec4:	88 23       	and	r24, r24
    1ec6:	31 f0       	breq	.+12     	; 0x1ed4 <xTaskResumeAll+0x1a4>
    1ec8:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	03 c0       	rjmp	.+6      	; 0x1ed6 <xTaskResumeAll+0x1a6>
    1ed0:	80 e0       	ldi	r24, 0x00	; 0
    1ed2:	01 c0       	rjmp	.+2      	; 0x1ed6 <xTaskResumeAll+0x1a6>
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	0f 90       	pop	r0
    1ed8:	0f be       	out	0x3f, r0	; 63
    1eda:	df 91       	pop	r29
    1edc:	cf 91       	pop	r28
    1ede:	ff 90       	pop	r15
    1ee0:	ef 90       	pop	r14
    1ee2:	df 90       	pop	r13
    1ee4:	cf 90       	pop	r12
    1ee6:	08 95       	ret

00001ee8 <xTaskDelayUntil>:
    1ee8:	8f 92       	push	r8
    1eea:	9f 92       	push	r9
    1eec:	af 92       	push	r10
    1eee:	bf 92       	push	r11
    1ef0:	cf 92       	push	r12
    1ef2:	df 92       	push	r13
    1ef4:	ef 92       	push	r14
    1ef6:	ff 92       	push	r15
    1ef8:	1f 93       	push	r17
    1efa:	cf 93       	push	r28
    1efc:	df 93       	push	r29
    1efe:	ec 01       	movw	r28, r24
    1f00:	6a 01       	movw	r12, r20
    1f02:	7b 01       	movw	r14, r22
    1f04:	d5 dd       	rcall	.-1110   	; 0x1ab0 <vTaskSuspendAll>
    1f06:	80 90 04 16 	lds	r8, 0x1604	; 0x801604 <xTickCount>
    1f0a:	90 90 05 16 	lds	r9, 0x1605	; 0x801605 <xTickCount+0x1>
    1f0e:	a0 90 06 16 	lds	r10, 0x1606	; 0x801606 <xTickCount+0x2>
    1f12:	b0 90 07 16 	lds	r11, 0x1607	; 0x801607 <xTickCount+0x3>
    1f16:	88 81       	ld	r24, Y
    1f18:	99 81       	ldd	r25, Y+1	; 0x01
    1f1a:	aa 81       	ldd	r26, Y+2	; 0x02
    1f1c:	bb 81       	ldd	r27, Y+3	; 0x03
    1f1e:	ac 01       	movw	r20, r24
    1f20:	bd 01       	movw	r22, r26
    1f22:	4c 0d       	add	r20, r12
    1f24:	5d 1d       	adc	r21, r13
    1f26:	6e 1d       	adc	r22, r14
    1f28:	7f 1d       	adc	r23, r15
    1f2a:	88 16       	cp	r8, r24
    1f2c:	99 06       	cpc	r9, r25
    1f2e:	aa 06       	cpc	r10, r26
    1f30:	bb 06       	cpc	r11, r27
    1f32:	60 f4       	brcc	.+24     	; 0x1f4c <xTaskDelayUntil+0x64>
    1f34:	48 17       	cp	r20, r24
    1f36:	59 07       	cpc	r21, r25
    1f38:	6a 07       	cpc	r22, r26
    1f3a:	7b 07       	cpc	r23, r27
    1f3c:	98 f4       	brcc	.+38     	; 0x1f64 <xTaskDelayUntil+0x7c>
    1f3e:	84 16       	cp	r8, r20
    1f40:	95 06       	cpc	r9, r21
    1f42:	a6 06       	cpc	r10, r22
    1f44:	b7 06       	cpc	r11, r23
    1f46:	80 f0       	brcs	.+32     	; 0x1f68 <xTaskDelayUntil+0x80>
    1f48:	10 e0       	ldi	r17, 0x00	; 0
    1f4a:	13 c0       	rjmp	.+38     	; 0x1f72 <xTaskDelayUntil+0x8a>
    1f4c:	48 17       	cp	r20, r24
    1f4e:	59 07       	cpc	r21, r25
    1f50:	6a 07       	cpc	r22, r26
    1f52:	7b 07       	cpc	r23, r27
    1f54:	58 f0       	brcs	.+22     	; 0x1f6c <xTaskDelayUntil+0x84>
    1f56:	84 16       	cp	r8, r20
    1f58:	95 06       	cpc	r9, r21
    1f5a:	a6 06       	cpc	r10, r22
    1f5c:	b7 06       	cpc	r11, r23
    1f5e:	40 f0       	brcs	.+16     	; 0x1f70 <xTaskDelayUntil+0x88>
    1f60:	10 e0       	ldi	r17, 0x00	; 0
    1f62:	07 c0       	rjmp	.+14     	; 0x1f72 <xTaskDelayUntil+0x8a>
    1f64:	10 e0       	ldi	r17, 0x00	; 0
    1f66:	05 c0       	rjmp	.+10     	; 0x1f72 <xTaskDelayUntil+0x8a>
    1f68:	11 e0       	ldi	r17, 0x01	; 1
    1f6a:	03 c0       	rjmp	.+6      	; 0x1f72 <xTaskDelayUntil+0x8a>
    1f6c:	11 e0       	ldi	r17, 0x01	; 1
    1f6e:	01 c0       	rjmp	.+2      	; 0x1f72 <xTaskDelayUntil+0x8a>
    1f70:	11 e0       	ldi	r17, 0x01	; 1
    1f72:	48 83       	st	Y, r20
    1f74:	59 83       	std	Y+1, r21	; 0x01
    1f76:	6a 83       	std	Y+2, r22	; 0x02
    1f78:	7b 83       	std	Y+3, r23	; 0x03
    1f7a:	11 23       	and	r17, r17
    1f7c:	41 f0       	breq	.+16     	; 0x1f8e <xTaskDelayUntil+0xa6>
    1f7e:	cb 01       	movw	r24, r22
    1f80:	ba 01       	movw	r22, r20
    1f82:	68 19       	sub	r22, r8
    1f84:	79 09       	sbc	r23, r9
    1f86:	8a 09       	sbc	r24, r10
    1f88:	9b 09       	sbc	r25, r11
    1f8a:	40 e0       	ldi	r20, 0x00	; 0
    1f8c:	6b dc       	rcall	.-1834   	; 0x1864 <prvAddCurrentTaskToDelayedList>
    1f8e:	d0 de       	rcall	.-608    	; 0x1d30 <xTaskResumeAll>
    1f90:	81 11       	cpse	r24, r1
    1f92:	02 c0       	rjmp	.+4      	; 0x1f98 <xTaskDelayUntil+0xb0>
    1f94:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>
    1f98:	81 2f       	mov	r24, r17
    1f9a:	df 91       	pop	r29
    1f9c:	cf 91       	pop	r28
    1f9e:	1f 91       	pop	r17
    1fa0:	ff 90       	pop	r15
    1fa2:	ef 90       	pop	r14
    1fa4:	df 90       	pop	r13
    1fa6:	cf 90       	pop	r12
    1fa8:	bf 90       	pop	r11
    1faa:	af 90       	pop	r10
    1fac:	9f 90       	pop	r9
    1fae:	8f 90       	pop	r8
    1fb0:	08 95       	ret

00001fb2 <vTaskDelay>:
    1fb2:	cf 92       	push	r12
    1fb4:	df 92       	push	r13
    1fb6:	ef 92       	push	r14
    1fb8:	ff 92       	push	r15
    1fba:	6b 01       	movw	r12, r22
    1fbc:	7c 01       	movw	r14, r24
    1fbe:	67 2b       	or	r22, r23
    1fc0:	68 2b       	or	r22, r24
    1fc2:	69 2b       	or	r22, r25
    1fc4:	39 f0       	breq	.+14     	; 0x1fd4 <vTaskDelay+0x22>
    1fc6:	74 dd       	rcall	.-1304   	; 0x1ab0 <vTaskSuspendAll>
    1fc8:	40 e0       	ldi	r20, 0x00	; 0
    1fca:	c7 01       	movw	r24, r14
    1fcc:	b6 01       	movw	r22, r12
    1fce:	4a dc       	rcall	.-1900   	; 0x1864 <prvAddCurrentTaskToDelayedList>
    1fd0:	af de       	rcall	.-674    	; 0x1d30 <xTaskResumeAll>
    1fd2:	01 c0       	rjmp	.+2      	; 0x1fd6 <vTaskDelay+0x24>
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	81 11       	cpse	r24, r1
    1fd8:	02 c0       	rjmp	.+4      	; 0x1fde <vTaskDelay+0x2c>
    1fda:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>
    1fde:	ff 90       	pop	r15
    1fe0:	ef 90       	pop	r14
    1fe2:	df 90       	pop	r13
    1fe4:	cf 90       	pop	r12
    1fe6:	08 95       	ret

00001fe8 <vTaskSwitchContext>:
    1fe8:	80 91 f4 15 	lds	r24, 0x15F4	; 0x8015f4 <uxSchedulerSuspended>
    1fec:	88 23       	and	r24, r24
    1fee:	21 f0       	breq	.+8      	; 0x1ff8 <vTaskSwitchContext+0x10>
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	80 93 fd 15 	sts	0x15FD, r24	; 0x8015fd <xYieldPending>
    1ff6:	08 95       	ret
    1ff8:	10 92 fd 15 	sts	0x15FD, r1	; 0x8015fd <xYieldPending>
    1ffc:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    2000:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    2004:	20 81       	ld	r18, Z
    2006:	31 81       	ldd	r19, Z+1	; 0x01
    2008:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    200c:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    2010:	83 8d       	ldd	r24, Z+27	; 0x1b
    2012:	94 8d       	ldd	r25, Z+28	; 0x1c
    2014:	82 17       	cp	r24, r18
    2016:	93 07       	cpc	r25, r19
    2018:	60 f0       	brcs	.+24     	; 0x2032 <__DATA_REGION_LENGTH__+0x32>
    201a:	60 91 b3 16 	lds	r22, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    201e:	70 91 b4 16 	lds	r23, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    2022:	63 5e       	subi	r22, 0xE3	; 227
    2024:	7f 4f       	sbci	r23, 0xFF	; 255
    2026:	80 91 b3 16 	lds	r24, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    202a:	90 91 b4 16 	lds	r25, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    202e:	0e 94 52 19 	call	0x32a4	; 0x32a4 <vApplicationStackOverflowHook>
    2032:	80 91 03 16 	lds	r24, 0x1603	; 0x801603 <uxTopReadyPriority>
    2036:	01 c0       	rjmp	.+2      	; 0x203a <__DATA_REGION_LENGTH__+0x3a>
    2038:	81 50       	subi	r24, 0x01	; 1
    203a:	28 2f       	mov	r18, r24
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	9b e0       	ldi	r25, 0x0B	; 11
    2040:	92 9f       	mul	r25, r18
    2042:	f0 01       	movw	r30, r0
    2044:	93 9f       	mul	r25, r19
    2046:	f0 0d       	add	r31, r0
    2048:	11 24       	eor	r1, r1
    204a:	eb 5b       	subi	r30, 0xBB	; 187
    204c:	f9 4e       	sbci	r31, 0xE9	; 233
    204e:	90 81       	ld	r25, Z
    2050:	99 23       	and	r25, r25
    2052:	91 f3       	breq	.-28     	; 0x2038 <__DATA_REGION_LENGTH__+0x38>
    2054:	9b e0       	ldi	r25, 0x0B	; 11
    2056:	92 9f       	mul	r25, r18
    2058:	a0 01       	movw	r20, r0
    205a:	93 9f       	mul	r25, r19
    205c:	50 0d       	add	r21, r0
    205e:	11 24       	eor	r1, r1
    2060:	df 01       	movw	r26, r30
    2062:	01 80       	ldd	r0, Z+1	; 0x01
    2064:	f2 81       	ldd	r31, Z+2	; 0x02
    2066:	e0 2d       	mov	r30, r0
    2068:	04 80       	ldd	r0, Z+4	; 0x04
    206a:	f5 81       	ldd	r31, Z+5	; 0x05
    206c:	e0 2d       	mov	r30, r0
    206e:	12 96       	adiw	r26, 0x02	; 2
    2070:	fc 93       	st	X, r31
    2072:	ee 93       	st	-X, r30
    2074:	11 97       	sbiw	r26, 0x01	; 1
    2076:	48 5b       	subi	r20, 0xB8	; 184
    2078:	59 4e       	sbci	r21, 0xE9	; 233
    207a:	e4 17       	cp	r30, r20
    207c:	f5 07       	cpc	r31, r21
    207e:	29 f4       	brne	.+10     	; 0x208a <__DATA_REGION_LENGTH__+0x8a>
    2080:	44 81       	ldd	r20, Z+4	; 0x04
    2082:	55 81       	ldd	r21, Z+5	; 0x05
    2084:	fd 01       	movw	r30, r26
    2086:	52 83       	std	Z+2, r21	; 0x02
    2088:	41 83       	std	Z+1, r20	; 0x01
    208a:	9b e0       	ldi	r25, 0x0B	; 11
    208c:	92 9f       	mul	r25, r18
    208e:	f0 01       	movw	r30, r0
    2090:	93 9f       	mul	r25, r19
    2092:	f0 0d       	add	r31, r0
    2094:	11 24       	eor	r1, r1
    2096:	eb 5b       	subi	r30, 0xBB	; 187
    2098:	f9 4e       	sbci	r31, 0xE9	; 233
    209a:	01 80       	ldd	r0, Z+1	; 0x01
    209c:	f2 81       	ldd	r31, Z+2	; 0x02
    209e:	e0 2d       	mov	r30, r0
    20a0:	20 85       	ldd	r18, Z+8	; 0x08
    20a2:	31 85       	ldd	r19, Z+9	; 0x09
    20a4:	30 93 b4 16 	sts	0x16B4, r19	; 0x8016b4 <pxCurrentTCB+0x1>
    20a8:	20 93 b3 16 	sts	0x16B3, r18	; 0x8016b3 <pxCurrentTCB>
    20ac:	80 93 03 16 	sts	0x1603, r24	; 0x801603 <uxTopReadyPriority>
    20b0:	08 95       	ret

000020b2 <vTaskPlaceOnEventList>:
    20b2:	cf 92       	push	r12
    20b4:	df 92       	push	r13
    20b6:	ef 92       	push	r14
    20b8:	ff 92       	push	r15
    20ba:	6a 01       	movw	r12, r20
    20bc:	7b 01       	movw	r14, r22
    20be:	60 91 b3 16 	lds	r22, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    20c2:	70 91 b4 16 	lds	r23, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    20c6:	62 5f       	subi	r22, 0xF2	; 242
    20c8:	7f 4f       	sbci	r23, 0xFF	; 255
    20ca:	0e 94 76 02 	call	0x4ec	; 0x4ec <vListInsert>
    20ce:	41 e0       	ldi	r20, 0x01	; 1
    20d0:	c7 01       	movw	r24, r14
    20d2:	b6 01       	movw	r22, r12
    20d4:	c7 db       	rcall	.-2162   	; 0x1864 <prvAddCurrentTaskToDelayedList>
    20d6:	ff 90       	pop	r15
    20d8:	ef 90       	pop	r14
    20da:	df 90       	pop	r13
    20dc:	cf 90       	pop	r12
    20de:	08 95       	ret

000020e0 <vTaskPlaceOnEventListRestricted>:
    20e0:	cf 93       	push	r28
    20e2:	df 93       	push	r29
    20e4:	fc 01       	movw	r30, r24
    20e6:	cb 01       	movw	r24, r22
    20e8:	ba 01       	movw	r22, r20
    20ea:	a1 81       	ldd	r26, Z+1	; 0x01
    20ec:	b2 81       	ldd	r27, Z+2	; 0x02
    20ee:	c0 91 b3 16 	lds	r28, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    20f2:	d0 91 b4 16 	lds	r29, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    20f6:	bb 8b       	std	Y+19, r27	; 0x13
    20f8:	aa 8b       	std	Y+18, r26	; 0x12
    20fa:	c0 91 b3 16 	lds	r28, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    20fe:	d0 91 b4 16 	lds	r29, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    2102:	16 96       	adiw	r26, 0x06	; 6
    2104:	4d 91       	ld	r20, X+
    2106:	5c 91       	ld	r21, X
    2108:	17 97       	sbiw	r26, 0x07	; 7
    210a:	5d 8b       	std	Y+21, r21	; 0x15
    210c:	4c 8b       	std	Y+20, r20	; 0x14
    210e:	16 96       	adiw	r26, 0x06	; 6
    2110:	cd 91       	ld	r28, X+
    2112:	dc 91       	ld	r29, X
    2114:	17 97       	sbiw	r26, 0x07	; 7
    2116:	40 91 b3 16 	lds	r20, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    211a:	50 91 b4 16 	lds	r21, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    211e:	42 5f       	subi	r20, 0xF2	; 242
    2120:	5f 4f       	sbci	r21, 0xFF	; 255
    2122:	5d 83       	std	Y+5, r21	; 0x05
    2124:	4c 83       	std	Y+4, r20	; 0x04
    2126:	40 91 b3 16 	lds	r20, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    212a:	50 91 b4 16 	lds	r21, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    212e:	42 5f       	subi	r20, 0xF2	; 242
    2130:	5f 4f       	sbci	r21, 0xFF	; 255
    2132:	17 96       	adiw	r26, 0x07	; 7
    2134:	5c 93       	st	X, r21
    2136:	4e 93       	st	-X, r20
    2138:	16 97       	sbiw	r26, 0x06	; 6
    213a:	a0 91 b3 16 	lds	r26, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    213e:	b0 91 b4 16 	lds	r27, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    2142:	59 96       	adiw	r26, 0x19	; 25
    2144:	fc 93       	st	X, r31
    2146:	ee 93       	st	-X, r30
    2148:	58 97       	sbiw	r26, 0x18	; 24
    214a:	30 81       	ld	r19, Z
    214c:	3f 5f       	subi	r19, 0xFF	; 255
    214e:	30 83       	st	Z, r19
    2150:	22 23       	and	r18, r18
    2152:	19 f0       	breq	.+6      	; 0x215a <vTaskPlaceOnEventListRestricted+0x7a>
    2154:	6f ef       	ldi	r22, 0xFF	; 255
    2156:	7f ef       	ldi	r23, 0xFF	; 255
    2158:	cb 01       	movw	r24, r22
    215a:	42 2f       	mov	r20, r18
    215c:	83 db       	rcall	.-2298   	; 0x1864 <prvAddCurrentTaskToDelayedList>
    215e:	df 91       	pop	r29
    2160:	cf 91       	pop	r28
    2162:	08 95       	ret

00002164 <xTaskRemoveFromEventList>:
    2164:	cf 93       	push	r28
    2166:	df 93       	push	r29
    2168:	dc 01       	movw	r26, r24
    216a:	17 96       	adiw	r26, 0x07	; 7
    216c:	ed 91       	ld	r30, X+
    216e:	fc 91       	ld	r31, X
    2170:	18 97       	sbiw	r26, 0x08	; 8
    2172:	00 84       	ldd	r0, Z+8	; 0x08
    2174:	f1 85       	ldd	r31, Z+9	; 0x09
    2176:	e0 2d       	mov	r30, r0
    2178:	a0 8d       	ldd	r26, Z+24	; 0x18
    217a:	b1 8d       	ldd	r27, Z+25	; 0x19
    217c:	c2 89       	ldd	r28, Z+18	; 0x12
    217e:	d3 89       	ldd	r29, Z+19	; 0x13
    2180:	84 89       	ldd	r24, Z+20	; 0x14
    2182:	95 89       	ldd	r25, Z+21	; 0x15
    2184:	9f 83       	std	Y+7, r25	; 0x07
    2186:	8e 83       	std	Y+6, r24	; 0x06
    2188:	c4 89       	ldd	r28, Z+20	; 0x14
    218a:	d5 89       	ldd	r29, Z+21	; 0x15
    218c:	82 89       	ldd	r24, Z+18	; 0x12
    218e:	93 89       	ldd	r25, Z+19	; 0x13
    2190:	9d 83       	std	Y+5, r25	; 0x05
    2192:	8c 83       	std	Y+4, r24	; 0x04
    2194:	11 96       	adiw	r26, 0x01	; 1
    2196:	8d 91       	ld	r24, X+
    2198:	9c 91       	ld	r25, X
    219a:	12 97       	sbiw	r26, 0x02	; 2
    219c:	9f 01       	movw	r18, r30
    219e:	22 5f       	subi	r18, 0xF2	; 242
    21a0:	3f 4f       	sbci	r19, 0xFF	; 255
    21a2:	82 17       	cp	r24, r18
    21a4:	93 07       	cpc	r25, r19
    21a6:	31 f4       	brne	.+12     	; 0x21b4 <xTaskRemoveFromEventList+0x50>
    21a8:	84 89       	ldd	r24, Z+20	; 0x14
    21aa:	95 89       	ldd	r25, Z+21	; 0x15
    21ac:	12 96       	adiw	r26, 0x02	; 2
    21ae:	9c 93       	st	X, r25
    21b0:	8e 93       	st	-X, r24
    21b2:	11 97       	sbiw	r26, 0x01	; 1
    21b4:	11 8e       	std	Z+25, r1	; 0x19
    21b6:	10 8e       	std	Z+24, r1	; 0x18
    21b8:	8c 91       	ld	r24, X
    21ba:	81 50       	subi	r24, 0x01	; 1
    21bc:	8c 93       	st	X, r24
    21be:	80 91 f4 15 	lds	r24, 0x15F4	; 0x8015f4 <uxSchedulerSuspended>
    21c2:	81 11       	cpse	r24, r1
    21c4:	52 c0       	rjmp	.+164    	; 0x226a <__stack+0x6b>
    21c6:	a4 85       	ldd	r26, Z+12	; 0x0c
    21c8:	b5 85       	ldd	r27, Z+13	; 0x0d
    21ca:	c6 81       	ldd	r28, Z+6	; 0x06
    21cc:	d7 81       	ldd	r29, Z+7	; 0x07
    21ce:	80 85       	ldd	r24, Z+8	; 0x08
    21d0:	91 85       	ldd	r25, Z+9	; 0x09
    21d2:	9f 83       	std	Y+7, r25	; 0x07
    21d4:	8e 83       	std	Y+6, r24	; 0x06
    21d6:	c0 85       	ldd	r28, Z+8	; 0x08
    21d8:	d1 85       	ldd	r29, Z+9	; 0x09
    21da:	86 81       	ldd	r24, Z+6	; 0x06
    21dc:	97 81       	ldd	r25, Z+7	; 0x07
    21de:	9d 83       	std	Y+5, r25	; 0x05
    21e0:	8c 83       	std	Y+4, r24	; 0x04
    21e2:	11 96       	adiw	r26, 0x01	; 1
    21e4:	8d 91       	ld	r24, X+
    21e6:	9c 91       	ld	r25, X
    21e8:	12 97       	sbiw	r26, 0x02	; 2
    21ea:	9f 01       	movw	r18, r30
    21ec:	2e 5f       	subi	r18, 0xFE	; 254
    21ee:	3f 4f       	sbci	r19, 0xFF	; 255
    21f0:	82 17       	cp	r24, r18
    21f2:	93 07       	cpc	r25, r19
    21f4:	31 f4       	brne	.+12     	; 0x2202 <__stack+0x3>
    21f6:	80 85       	ldd	r24, Z+8	; 0x08
    21f8:	91 85       	ldd	r25, Z+9	; 0x09
    21fa:	12 96       	adiw	r26, 0x02	; 2
    21fc:	9c 93       	st	X, r25
    21fe:	8e 93       	st	-X, r24
    2200:	11 97       	sbiw	r26, 0x01	; 1
    2202:	15 86       	std	Z+13, r1	; 0x0d
    2204:	14 86       	std	Z+12, r1	; 0x0c
    2206:	8c 91       	ld	r24, X
    2208:	81 50       	subi	r24, 0x01	; 1
    220a:	8c 93       	st	X, r24
    220c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    220e:	80 91 03 16 	lds	r24, 0x1603	; 0x801603 <uxTopReadyPriority>
    2212:	8a 17       	cp	r24, r26
    2214:	10 f4       	brcc	.+4      	; 0x221a <__stack+0x1b>
    2216:	a0 93 03 16 	sts	0x1603, r26	; 0x801603 <uxTopReadyPriority>
    221a:	8b e0       	ldi	r24, 0x0B	; 11
    221c:	8a 9f       	mul	r24, r26
    221e:	d0 01       	movw	r26, r0
    2220:	11 24       	eor	r1, r1
    2222:	ab 5b       	subi	r26, 0xBB	; 187
    2224:	b9 4e       	sbci	r27, 0xE9	; 233
    2226:	11 96       	adiw	r26, 0x01	; 1
    2228:	0d 90       	ld	r0, X+
    222a:	bc 91       	ld	r27, X
    222c:	a0 2d       	mov	r26, r0
    222e:	b7 83       	std	Z+7, r27	; 0x07
    2230:	a6 83       	std	Z+6, r26	; 0x06
    2232:	16 96       	adiw	r26, 0x06	; 6
    2234:	4d 91       	ld	r20, X+
    2236:	5c 91       	ld	r21, X
    2238:	17 97       	sbiw	r26, 0x07	; 7
    223a:	51 87       	std	Z+9, r21	; 0x09
    223c:	40 87       	std	Z+8, r20	; 0x08
    223e:	16 96       	adiw	r26, 0x06	; 6
    2240:	cd 91       	ld	r28, X+
    2242:	dc 91       	ld	r29, X
    2244:	17 97       	sbiw	r26, 0x07	; 7
    2246:	3d 83       	std	Y+5, r19	; 0x05
    2248:	2c 83       	std	Y+4, r18	; 0x04
    224a:	17 96       	adiw	r26, 0x07	; 7
    224c:	3c 93       	st	X, r19
    224e:	2e 93       	st	-X, r18
    2250:	16 97       	sbiw	r26, 0x06	; 6
    2252:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2254:	8a 9f       	mul	r24, r26
    2256:	d0 01       	movw	r26, r0
    2258:	11 24       	eor	r1, r1
    225a:	ab 5b       	subi	r26, 0xBB	; 187
    225c:	b9 4e       	sbci	r27, 0xE9	; 233
    225e:	b5 87       	std	Z+13, r27	; 0x0d
    2260:	a4 87       	std	Z+12, r26	; 0x0c
    2262:	8c 91       	ld	r24, X
    2264:	8f 5f       	subi	r24, 0xFF	; 255
    2266:	8c 93       	st	X, r24
    2268:	1c c0       	rjmp	.+56     	; 0x22a2 <__stack+0xa3>
    226a:	40 e2       	ldi	r20, 0x20	; 32
    226c:	56 e1       	ldi	r21, 0x16	; 22
    226e:	da 01       	movw	r26, r20
    2270:	11 96       	adiw	r26, 0x01	; 1
    2272:	cd 91       	ld	r28, X+
    2274:	dc 91       	ld	r29, X
    2276:	12 97       	sbiw	r26, 0x02	; 2
    2278:	d3 8b       	std	Z+19, r29	; 0x13
    227a:	c2 8b       	std	Z+18, r28	; 0x12
    227c:	8e 81       	ldd	r24, Y+6	; 0x06
    227e:	9f 81       	ldd	r25, Y+7	; 0x07
    2280:	95 8b       	std	Z+21, r25	; 0x15
    2282:	84 8b       	std	Z+20, r24	; 0x14
    2284:	8e 81       	ldd	r24, Y+6	; 0x06
    2286:	9f 81       	ldd	r25, Y+7	; 0x07
    2288:	dc 01       	movw	r26, r24
    228a:	15 96       	adiw	r26, 0x05	; 5
    228c:	3c 93       	st	X, r19
    228e:	2e 93       	st	-X, r18
    2290:	14 97       	sbiw	r26, 0x04	; 4
    2292:	3f 83       	std	Y+7, r19	; 0x07
    2294:	2e 83       	std	Y+6, r18	; 0x06
    2296:	51 8f       	std	Z+25, r21	; 0x19
    2298:	40 8f       	std	Z+24, r20	; 0x18
    229a:	da 01       	movw	r26, r20
    229c:	8c 91       	ld	r24, X
    229e:	8f 5f       	subi	r24, 0xFF	; 255
    22a0:	8c 93       	st	X, r24
    22a2:	92 8d       	ldd	r25, Z+26	; 0x1a
    22a4:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    22a8:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    22ac:	82 8d       	ldd	r24, Z+26	; 0x1a
    22ae:	89 17       	cp	r24, r25
    22b0:	20 f4       	brcc	.+8      	; 0x22ba <__stack+0xbb>
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	80 93 fd 15 	sts	0x15FD, r24	; 0x8015fd <xYieldPending>
    22b8:	01 c0       	rjmp	.+2      	; 0x22bc <__stack+0xbd>
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	df 91       	pop	r29
    22be:	cf 91       	pop	r28
    22c0:	08 95       	ret

000022c2 <vTaskSetTimeOutState>:
    22c2:	0f b6       	in	r0, 0x3f	; 63
    22c4:	f8 94       	cli
    22c6:	0f 92       	push	r0
    22c8:	20 91 fc 15 	lds	r18, 0x15FC	; 0x8015fc <xNumOfOverflows>
    22cc:	fc 01       	movw	r30, r24
    22ce:	20 83       	st	Z, r18
    22d0:	40 91 04 16 	lds	r20, 0x1604	; 0x801604 <xTickCount>
    22d4:	50 91 05 16 	lds	r21, 0x1605	; 0x801605 <xTickCount+0x1>
    22d8:	60 91 06 16 	lds	r22, 0x1606	; 0x801606 <xTickCount+0x2>
    22dc:	70 91 07 16 	lds	r23, 0x1607	; 0x801607 <xTickCount+0x3>
    22e0:	41 83       	std	Z+1, r20	; 0x01
    22e2:	52 83       	std	Z+2, r21	; 0x02
    22e4:	63 83       	std	Z+3, r22	; 0x03
    22e6:	74 83       	std	Z+4, r23	; 0x04
    22e8:	0f 90       	pop	r0
    22ea:	0f be       	out	0x3f, r0	; 63
    22ec:	08 95       	ret

000022ee <vTaskInternalSetTimeOutState>:
    22ee:	20 91 fc 15 	lds	r18, 0x15FC	; 0x8015fc <xNumOfOverflows>
    22f2:	fc 01       	movw	r30, r24
    22f4:	20 83       	st	Z, r18
    22f6:	40 91 04 16 	lds	r20, 0x1604	; 0x801604 <xTickCount>
    22fa:	50 91 05 16 	lds	r21, 0x1605	; 0x801605 <xTickCount+0x1>
    22fe:	60 91 06 16 	lds	r22, 0x1606	; 0x801606 <xTickCount+0x2>
    2302:	70 91 07 16 	lds	r23, 0x1607	; 0x801607 <xTickCount+0x3>
    2306:	41 83       	std	Z+1, r20	; 0x01
    2308:	52 83       	std	Z+2, r21	; 0x02
    230a:	63 83       	std	Z+3, r22	; 0x03
    230c:	74 83       	std	Z+4, r23	; 0x04
    230e:	08 95       	ret

00002310 <xTaskCheckForTimeOut>:
    2310:	8f 92       	push	r8
    2312:	9f 92       	push	r9
    2314:	af 92       	push	r10
    2316:	bf 92       	push	r11
    2318:	cf 92       	push	r12
    231a:	df 92       	push	r13
    231c:	ef 92       	push	r14
    231e:	ff 92       	push	r15
    2320:	0f 93       	push	r16
    2322:	1f 93       	push	r17
    2324:	cf 93       	push	r28
    2326:	df 93       	push	r29
    2328:	fb 01       	movw	r30, r22
    232a:	0f b6       	in	r0, 0x3f	; 63
    232c:	f8 94       	cli
    232e:	0f 92       	push	r0
    2330:	c0 90 04 16 	lds	r12, 0x1604	; 0x801604 <xTickCount>
    2334:	d0 90 05 16 	lds	r13, 0x1605	; 0x801605 <xTickCount+0x1>
    2338:	e0 90 06 16 	lds	r14, 0x1606	; 0x801606 <xTickCount+0x2>
    233c:	f0 90 07 16 	lds	r15, 0x1607	; 0x801607 <xTickCount+0x3>
    2340:	dc 01       	movw	r26, r24
    2342:	11 96       	adiw	r26, 0x01	; 1
    2344:	0d 91       	ld	r16, X+
    2346:	1d 91       	ld	r17, X+
    2348:	2d 91       	ld	r18, X+
    234a:	3c 91       	ld	r19, X
    234c:	14 97       	sbiw	r26, 0x04	; 4
    234e:	46 01       	movw	r8, r12
    2350:	57 01       	movw	r10, r14
    2352:	80 1a       	sub	r8, r16
    2354:	91 0a       	sbc	r9, r17
    2356:	a2 0a       	sbc	r10, r18
    2358:	b3 0a       	sbc	r11, r19
    235a:	40 81       	ld	r20, Z
    235c:	51 81       	ldd	r21, Z+1	; 0x01
    235e:	62 81       	ldd	r22, Z+2	; 0x02
    2360:	73 81       	ldd	r23, Z+3	; 0x03
    2362:	4f 3f       	cpi	r20, 0xFF	; 255
    2364:	bf ef       	ldi	r27, 0xFF	; 255
    2366:	5b 07       	cpc	r21, r27
    2368:	6b 07       	cpc	r22, r27
    236a:	7b 07       	cpc	r23, r27
    236c:	39 f1       	breq	.+78     	; 0x23bc <xTaskCheckForTimeOut+0xac>
    236e:	ec 01       	movw	r28, r24
    2370:	b8 81       	ld	r27, Y
    2372:	a0 91 fc 15 	lds	r26, 0x15FC	; 0x8015fc <xNumOfOverflows>
    2376:	ba 17       	cp	r27, r26
    2378:	59 f0       	breq	.+22     	; 0x2390 <xTaskCheckForTimeOut+0x80>
    237a:	c0 16       	cp	r12, r16
    237c:	d1 06       	cpc	r13, r17
    237e:	e2 06       	cpc	r14, r18
    2380:	f3 06       	cpc	r15, r19
    2382:	30 f0       	brcs	.+12     	; 0x2390 <xTaskCheckForTimeOut+0x80>
    2384:	10 82       	st	Z, r1
    2386:	11 82       	std	Z+1, r1	; 0x01
    2388:	12 82       	std	Z+2, r1	; 0x02
    238a:	13 82       	std	Z+3, r1	; 0x03
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	17 c0       	rjmp	.+46     	; 0x23be <xTaskCheckForTimeOut+0xae>
    2390:	84 16       	cp	r8, r20
    2392:	95 06       	cpc	r9, r21
    2394:	a6 06       	cpc	r10, r22
    2396:	b7 06       	cpc	r11, r23
    2398:	58 f4       	brcc	.+22     	; 0x23b0 <xTaskCheckForTimeOut+0xa0>
    239a:	48 19       	sub	r20, r8
    239c:	59 09       	sbc	r21, r9
    239e:	6a 09       	sbc	r22, r10
    23a0:	7b 09       	sbc	r23, r11
    23a2:	40 83       	st	Z, r20
    23a4:	51 83       	std	Z+1, r21	; 0x01
    23a6:	62 83       	std	Z+2, r22	; 0x02
    23a8:	73 83       	std	Z+3, r23	; 0x03
    23aa:	a1 df       	rcall	.-190    	; 0x22ee <vTaskInternalSetTimeOutState>
    23ac:	80 e0       	ldi	r24, 0x00	; 0
    23ae:	07 c0       	rjmp	.+14     	; 0x23be <xTaskCheckForTimeOut+0xae>
    23b0:	10 82       	st	Z, r1
    23b2:	11 82       	std	Z+1, r1	; 0x01
    23b4:	12 82       	std	Z+2, r1	; 0x02
    23b6:	13 82       	std	Z+3, r1	; 0x03
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	01 c0       	rjmp	.+2      	; 0x23be <xTaskCheckForTimeOut+0xae>
    23bc:	80 e0       	ldi	r24, 0x00	; 0
    23be:	0f 90       	pop	r0
    23c0:	0f be       	out	0x3f, r0	; 63
    23c2:	df 91       	pop	r29
    23c4:	cf 91       	pop	r28
    23c6:	1f 91       	pop	r17
    23c8:	0f 91       	pop	r16
    23ca:	ff 90       	pop	r15
    23cc:	ef 90       	pop	r14
    23ce:	df 90       	pop	r13
    23d0:	cf 90       	pop	r12
    23d2:	bf 90       	pop	r11
    23d4:	af 90       	pop	r10
    23d6:	9f 90       	pop	r9
    23d8:	8f 90       	pop	r8
    23da:	08 95       	ret

000023dc <vTaskMissedYield>:
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	80 93 fd 15 	sts	0x15FD, r24	; 0x8015fd <xYieldPending>
    23e2:	08 95       	ret

000023e4 <xTaskGetCurrentTaskHandle>:
    23e4:	80 91 b3 16 	lds	r24, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    23e8:	90 91 b4 16 	lds	r25, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    23ec:	08 95       	ret

000023ee <xTaskGetSchedulerState>:
    23ee:	80 91 02 16 	lds	r24, 0x1602	; 0x801602 <xSchedulerRunning>
    23f2:	88 23       	and	r24, r24
    23f4:	31 f0       	breq	.+12     	; 0x2402 <xTaskGetSchedulerState+0x14>
    23f6:	80 91 f4 15 	lds	r24, 0x15F4	; 0x8015f4 <uxSchedulerSuspended>
    23fa:	81 11       	cpse	r24, r1
    23fc:	04 c0       	rjmp	.+8      	; 0x2406 <xTaskGetSchedulerState+0x18>
    23fe:	82 e0       	ldi	r24, 0x02	; 2
    2400:	08 95       	ret
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	08 95       	ret
    2406:	80 e0       	ldi	r24, 0x00	; 0
    2408:	08 95       	ret

0000240a <xTaskPriorityInherit>:
    240a:	0f 93       	push	r16
    240c:	1f 93       	push	r17
    240e:	cf 93       	push	r28
    2410:	df 93       	push	r29
    2412:	fc 01       	movw	r30, r24
    2414:	89 2b       	or	r24, r25
    2416:	09 f4       	brne	.+2      	; 0x241a <xTaskPriorityInherit+0x10>
    2418:	77 c0       	rjmp	.+238    	; 0x2508 <xTaskPriorityInherit+0xfe>
    241a:	82 8d       	ldd	r24, Z+26	; 0x1a
    241c:	a0 91 b3 16 	lds	r26, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    2420:	b0 91 b4 16 	lds	r27, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    2424:	5a 96       	adiw	r26, 0x1a	; 26
    2426:	9c 91       	ld	r25, X
    2428:	89 17       	cp	r24, r25
    242a:	08 f0       	brcs	.+2      	; 0x242e <xTaskPriorityInherit+0x24>
    242c:	63 c0       	rjmp	.+198    	; 0x24f4 <xTaskPriorityInherit+0xea>
    242e:	46 85       	ldd	r20, Z+14	; 0x0e
    2430:	57 85       	ldd	r21, Z+15	; 0x0f
    2432:	60 89       	ldd	r22, Z+16	; 0x10
    2434:	71 89       	ldd	r23, Z+17	; 0x11
    2436:	77 23       	and	r23, r23
    2438:	94 f0       	brlt	.+36     	; 0x245e <xTaskPriorityInherit+0x54>
    243a:	a0 91 b3 16 	lds	r26, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    243e:	b0 91 b4 16 	lds	r27, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    2442:	5a 96       	adiw	r26, 0x1a	; 26
    2444:	9c 91       	ld	r25, X
    2446:	4a e0       	ldi	r20, 0x0A	; 10
    2448:	50 e0       	ldi	r21, 0x00	; 0
    244a:	60 e0       	ldi	r22, 0x00	; 0
    244c:	70 e0       	ldi	r23, 0x00	; 0
    244e:	49 1b       	sub	r20, r25
    2450:	51 09       	sbc	r21, r1
    2452:	61 09       	sbc	r22, r1
    2454:	71 09       	sbc	r23, r1
    2456:	46 87       	std	Z+14, r20	; 0x0e
    2458:	57 87       	std	Z+15, r21	; 0x0f
    245a:	60 8b       	std	Z+16, r22	; 0x10
    245c:	71 8b       	std	Z+17, r23	; 0x11
    245e:	24 85       	ldd	r18, Z+12	; 0x0c
    2460:	35 85       	ldd	r19, Z+13	; 0x0d
    2462:	4b e0       	ldi	r20, 0x0B	; 11
    2464:	84 9f       	mul	r24, r20
    2466:	c0 01       	movw	r24, r0
    2468:	11 24       	eor	r1, r1
    246a:	8b 5b       	subi	r24, 0xBB	; 187
    246c:	99 4e       	sbci	r25, 0xE9	; 233
    246e:	28 17       	cp	r18, r24
    2470:	39 07       	cpc	r19, r25
    2472:	b9 f5       	brne	.+110    	; 0x24e2 <xTaskPriorityInherit+0xd8>
    2474:	ef 01       	movw	r28, r30
    2476:	8f 01       	movw	r16, r30
    2478:	0e 5f       	subi	r16, 0xFE	; 254
    247a:	1f 4f       	sbci	r17, 0xFF	; 255
    247c:	c8 01       	movw	r24, r16
    247e:	0e 94 b3 02 	call	0x566	; 0x566 <uxListRemove>
    2482:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    2486:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    248a:	e2 8d       	ldd	r30, Z+26	; 0x1a
    248c:	ea 8f       	std	Y+26, r30	; 0x1a
    248e:	80 91 03 16 	lds	r24, 0x1603	; 0x801603 <uxTopReadyPriority>
    2492:	8e 17       	cp	r24, r30
    2494:	10 f4       	brcc	.+4      	; 0x249a <xTaskPriorityInherit+0x90>
    2496:	e0 93 03 16 	sts	0x1603, r30	; 0x801603 <uxTopReadyPriority>
    249a:	8b e0       	ldi	r24, 0x0B	; 11
    249c:	8e 9f       	mul	r24, r30
    249e:	f0 01       	movw	r30, r0
    24a0:	11 24       	eor	r1, r1
    24a2:	eb 5b       	subi	r30, 0xBB	; 187
    24a4:	f9 4e       	sbci	r31, 0xE9	; 233
    24a6:	01 80       	ldd	r0, Z+1	; 0x01
    24a8:	f2 81       	ldd	r31, Z+2	; 0x02
    24aa:	e0 2d       	mov	r30, r0
    24ac:	ff 83       	std	Y+7, r31	; 0x07
    24ae:	ee 83       	std	Y+6, r30	; 0x06
    24b0:	26 81       	ldd	r18, Z+6	; 0x06
    24b2:	37 81       	ldd	r19, Z+7	; 0x07
    24b4:	39 87       	std	Y+9, r19	; 0x09
    24b6:	28 87       	std	Y+8, r18	; 0x08
    24b8:	a6 81       	ldd	r26, Z+6	; 0x06
    24ba:	b7 81       	ldd	r27, Z+7	; 0x07
    24bc:	15 96       	adiw	r26, 0x05	; 5
    24be:	1c 93       	st	X, r17
    24c0:	0e 93       	st	-X, r16
    24c2:	14 97       	sbiw	r26, 0x04	; 4
    24c4:	17 83       	std	Z+7, r17	; 0x07
    24c6:	06 83       	std	Z+6, r16	; 0x06
    24c8:	ea 8d       	ldd	r30, Y+26	; 0x1a
    24ca:	8e 9f       	mul	r24, r30
    24cc:	f0 01       	movw	r30, r0
    24ce:	11 24       	eor	r1, r1
    24d0:	eb 5b       	subi	r30, 0xBB	; 187
    24d2:	f9 4e       	sbci	r31, 0xE9	; 233
    24d4:	fd 87       	std	Y+13, r31	; 0x0d
    24d6:	ec 87       	std	Y+12, r30	; 0x0c
    24d8:	80 81       	ld	r24, Z
    24da:	8f 5f       	subi	r24, 0xFF	; 255
    24dc:	80 83       	st	Z, r24
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	16 c0       	rjmp	.+44     	; 0x250e <xTaskPriorityInherit+0x104>
    24e2:	a0 91 b3 16 	lds	r26, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    24e6:	b0 91 b4 16 	lds	r27, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    24ea:	5a 96       	adiw	r26, 0x1a	; 26
    24ec:	8c 91       	ld	r24, X
    24ee:	82 8f       	std	Z+26, r24	; 0x1a
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	0d c0       	rjmp	.+26     	; 0x250e <xTaskPriorityInherit+0x104>
    24f4:	95 a5       	ldd	r25, Z+45	; 0x2d
    24f6:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    24fa:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    24fe:	82 8d       	ldd	r24, Z+26	; 0x1a
    2500:	98 17       	cp	r25, r24
    2502:	20 f0       	brcs	.+8      	; 0x250c <xTaskPriorityInherit+0x102>
    2504:	80 e0       	ldi	r24, 0x00	; 0
    2506:	03 c0       	rjmp	.+6      	; 0x250e <xTaskPriorityInherit+0x104>
    2508:	80 e0       	ldi	r24, 0x00	; 0
    250a:	01 c0       	rjmp	.+2      	; 0x250e <xTaskPriorityInherit+0x104>
    250c:	81 e0       	ldi	r24, 0x01	; 1
    250e:	df 91       	pop	r29
    2510:	cf 91       	pop	r28
    2512:	1f 91       	pop	r17
    2514:	0f 91       	pop	r16
    2516:	08 95       	ret

00002518 <xTaskPriorityDisinherit>:
    2518:	0f 93       	push	r16
    251a:	1f 93       	push	r17
    251c:	cf 93       	push	r28
    251e:	df 93       	push	r29
    2520:	fc 01       	movw	r30, r24
    2522:	89 2b       	or	r24, r25
    2524:	09 f4       	brne	.+2      	; 0x2528 <xTaskPriorityDisinherit+0x10>
    2526:	49 c0       	rjmp	.+146    	; 0x25ba <xTaskPriorityDisinherit+0xa2>
    2528:	86 a5       	ldd	r24, Z+46	; 0x2e
    252a:	81 50       	subi	r24, 0x01	; 1
    252c:	86 a7       	std	Z+46, r24	; 0x2e
    252e:	22 8d       	ldd	r18, Z+26	; 0x1a
    2530:	95 a5       	ldd	r25, Z+45	; 0x2d
    2532:	29 17       	cp	r18, r25
    2534:	09 f4       	brne	.+2      	; 0x2538 <xTaskPriorityDisinherit+0x20>
    2536:	43 c0       	rjmp	.+134    	; 0x25be <xTaskPriorityDisinherit+0xa6>
    2538:	81 11       	cpse	r24, r1
    253a:	43 c0       	rjmp	.+134    	; 0x25c2 <xTaskPriorityDisinherit+0xaa>
    253c:	ef 01       	movw	r28, r30
    253e:	8f 01       	movw	r16, r30
    2540:	0e 5f       	subi	r16, 0xFE	; 254
    2542:	1f 4f       	sbci	r17, 0xFF	; 255
    2544:	c8 01       	movw	r24, r16
    2546:	0e 94 b3 02 	call	0x566	; 0x566 <uxListRemove>
    254a:	ed a5       	ldd	r30, Y+45	; 0x2d
    254c:	ea 8f       	std	Y+26, r30	; 0x1a
    254e:	8a e0       	ldi	r24, 0x0A	; 10
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	a0 e0       	ldi	r26, 0x00	; 0
    2554:	b0 e0       	ldi	r27, 0x00	; 0
    2556:	8e 1b       	sub	r24, r30
    2558:	91 09       	sbc	r25, r1
    255a:	a1 09       	sbc	r26, r1
    255c:	b1 09       	sbc	r27, r1
    255e:	8e 87       	std	Y+14, r24	; 0x0e
    2560:	9f 87       	std	Y+15, r25	; 0x0f
    2562:	a8 8b       	std	Y+16, r26	; 0x10
    2564:	b9 8b       	std	Y+17, r27	; 0x11
    2566:	80 91 03 16 	lds	r24, 0x1603	; 0x801603 <uxTopReadyPriority>
    256a:	8e 17       	cp	r24, r30
    256c:	10 f4       	brcc	.+4      	; 0x2572 <xTaskPriorityDisinherit+0x5a>
    256e:	e0 93 03 16 	sts	0x1603, r30	; 0x801603 <uxTopReadyPriority>
    2572:	8b e0       	ldi	r24, 0x0B	; 11
    2574:	8e 9f       	mul	r24, r30
    2576:	f0 01       	movw	r30, r0
    2578:	11 24       	eor	r1, r1
    257a:	eb 5b       	subi	r30, 0xBB	; 187
    257c:	f9 4e       	sbci	r31, 0xE9	; 233
    257e:	01 80       	ldd	r0, Z+1	; 0x01
    2580:	f2 81       	ldd	r31, Z+2	; 0x02
    2582:	e0 2d       	mov	r30, r0
    2584:	ff 83       	std	Y+7, r31	; 0x07
    2586:	ee 83       	std	Y+6, r30	; 0x06
    2588:	26 81       	ldd	r18, Z+6	; 0x06
    258a:	37 81       	ldd	r19, Z+7	; 0x07
    258c:	39 87       	std	Y+9, r19	; 0x09
    258e:	28 87       	std	Y+8, r18	; 0x08
    2590:	a6 81       	ldd	r26, Z+6	; 0x06
    2592:	b7 81       	ldd	r27, Z+7	; 0x07
    2594:	15 96       	adiw	r26, 0x05	; 5
    2596:	1c 93       	st	X, r17
    2598:	0e 93       	st	-X, r16
    259a:	14 97       	sbiw	r26, 0x04	; 4
    259c:	17 83       	std	Z+7, r17	; 0x07
    259e:	06 83       	std	Z+6, r16	; 0x06
    25a0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    25a2:	8e 9f       	mul	r24, r30
    25a4:	f0 01       	movw	r30, r0
    25a6:	11 24       	eor	r1, r1
    25a8:	eb 5b       	subi	r30, 0xBB	; 187
    25aa:	f9 4e       	sbci	r31, 0xE9	; 233
    25ac:	fd 87       	std	Y+13, r31	; 0x0d
    25ae:	ec 87       	std	Y+12, r30	; 0x0c
    25b0:	80 81       	ld	r24, Z
    25b2:	8f 5f       	subi	r24, 0xFF	; 255
    25b4:	80 83       	st	Z, r24
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	05 c0       	rjmp	.+10     	; 0x25c4 <xTaskPriorityDisinherit+0xac>
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	03 c0       	rjmp	.+6      	; 0x25c4 <xTaskPriorityDisinherit+0xac>
    25be:	80 e0       	ldi	r24, 0x00	; 0
    25c0:	01 c0       	rjmp	.+2      	; 0x25c4 <xTaskPriorityDisinherit+0xac>
    25c2:	80 e0       	ldi	r24, 0x00	; 0
    25c4:	df 91       	pop	r29
    25c6:	cf 91       	pop	r28
    25c8:	1f 91       	pop	r17
    25ca:	0f 91       	pop	r16
    25cc:	08 95       	ret

000025ce <vTaskPriorityDisinheritAfterTimeout>:
    25ce:	0f 93       	push	r16
    25d0:	1f 93       	push	r17
    25d2:	cf 93       	push	r28
    25d4:	df 93       	push	r29
    25d6:	fc 01       	movw	r30, r24
    25d8:	89 2b       	or	r24, r25
    25da:	09 f4       	brne	.+2      	; 0x25de <vTaskPriorityDisinheritAfterTimeout+0x10>
    25dc:	5a c0       	rjmp	.+180    	; 0x2692 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    25de:	85 a5       	ldd	r24, Z+45	; 0x2d
    25e0:	86 17       	cp	r24, r22
    25e2:	08 f4       	brcc	.+2      	; 0x25e6 <vTaskPriorityDisinheritAfterTimeout+0x18>
    25e4:	86 2f       	mov	r24, r22
    25e6:	92 8d       	ldd	r25, Z+26	; 0x1a
    25e8:	89 17       	cp	r24, r25
    25ea:	09 f4       	brne	.+2      	; 0x25ee <vTaskPriorityDisinheritAfterTimeout+0x20>
    25ec:	52 c0       	rjmp	.+164    	; 0x2692 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    25ee:	26 a5       	ldd	r18, Z+46	; 0x2e
    25f0:	21 30       	cpi	r18, 0x01	; 1
    25f2:	09 f0       	breq	.+2      	; 0x25f6 <vTaskPriorityDisinheritAfterTimeout+0x28>
    25f4:	4e c0       	rjmp	.+156    	; 0x2692 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    25f6:	82 8f       	std	Z+26, r24	; 0x1a
    25f8:	46 85       	ldd	r20, Z+14	; 0x0e
    25fa:	57 85       	ldd	r21, Z+15	; 0x0f
    25fc:	60 89       	ldd	r22, Z+16	; 0x10
    25fe:	71 89       	ldd	r23, Z+17	; 0x11
    2600:	77 23       	and	r23, r23
    2602:	64 f0       	brlt	.+24     	; 0x261c <vTaskPriorityDisinheritAfterTimeout+0x4e>
    2604:	4a e0       	ldi	r20, 0x0A	; 10
    2606:	50 e0       	ldi	r21, 0x00	; 0
    2608:	60 e0       	ldi	r22, 0x00	; 0
    260a:	70 e0       	ldi	r23, 0x00	; 0
    260c:	48 1b       	sub	r20, r24
    260e:	51 09       	sbc	r21, r1
    2610:	61 09       	sbc	r22, r1
    2612:	71 09       	sbc	r23, r1
    2614:	46 87       	std	Z+14, r20	; 0x0e
    2616:	57 87       	std	Z+15, r21	; 0x0f
    2618:	60 8b       	std	Z+16, r22	; 0x10
    261a:	71 8b       	std	Z+17, r23	; 0x11
    261c:	24 85       	ldd	r18, Z+12	; 0x0c
    261e:	35 85       	ldd	r19, Z+13	; 0x0d
    2620:	4b e0       	ldi	r20, 0x0B	; 11
    2622:	94 9f       	mul	r25, r20
    2624:	c0 01       	movw	r24, r0
    2626:	11 24       	eor	r1, r1
    2628:	8b 5b       	subi	r24, 0xBB	; 187
    262a:	99 4e       	sbci	r25, 0xE9	; 233
    262c:	28 17       	cp	r18, r24
    262e:	39 07       	cpc	r19, r25
    2630:	81 f5       	brne	.+96     	; 0x2692 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2632:	ef 01       	movw	r28, r30
    2634:	8f 01       	movw	r16, r30
    2636:	0e 5f       	subi	r16, 0xFE	; 254
    2638:	1f 4f       	sbci	r17, 0xFF	; 255
    263a:	c8 01       	movw	r24, r16
    263c:	0e 94 b3 02 	call	0x566	; 0x566 <uxListRemove>
    2640:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2642:	80 91 03 16 	lds	r24, 0x1603	; 0x801603 <uxTopReadyPriority>
    2646:	8e 17       	cp	r24, r30
    2648:	10 f4       	brcc	.+4      	; 0x264e <vTaskPriorityDisinheritAfterTimeout+0x80>
    264a:	e0 93 03 16 	sts	0x1603, r30	; 0x801603 <uxTopReadyPriority>
    264e:	8b e0       	ldi	r24, 0x0B	; 11
    2650:	8e 9f       	mul	r24, r30
    2652:	f0 01       	movw	r30, r0
    2654:	11 24       	eor	r1, r1
    2656:	eb 5b       	subi	r30, 0xBB	; 187
    2658:	f9 4e       	sbci	r31, 0xE9	; 233
    265a:	01 80       	ldd	r0, Z+1	; 0x01
    265c:	f2 81       	ldd	r31, Z+2	; 0x02
    265e:	e0 2d       	mov	r30, r0
    2660:	ff 83       	std	Y+7, r31	; 0x07
    2662:	ee 83       	std	Y+6, r30	; 0x06
    2664:	26 81       	ldd	r18, Z+6	; 0x06
    2666:	37 81       	ldd	r19, Z+7	; 0x07
    2668:	39 87       	std	Y+9, r19	; 0x09
    266a:	28 87       	std	Y+8, r18	; 0x08
    266c:	a6 81       	ldd	r26, Z+6	; 0x06
    266e:	b7 81       	ldd	r27, Z+7	; 0x07
    2670:	15 96       	adiw	r26, 0x05	; 5
    2672:	1c 93       	st	X, r17
    2674:	0e 93       	st	-X, r16
    2676:	14 97       	sbiw	r26, 0x04	; 4
    2678:	17 83       	std	Z+7, r17	; 0x07
    267a:	06 83       	std	Z+6, r16	; 0x06
    267c:	ea 8d       	ldd	r30, Y+26	; 0x1a
    267e:	8e 9f       	mul	r24, r30
    2680:	f0 01       	movw	r30, r0
    2682:	11 24       	eor	r1, r1
    2684:	eb 5b       	subi	r30, 0xBB	; 187
    2686:	f9 4e       	sbci	r31, 0xE9	; 233
    2688:	fd 87       	std	Y+13, r31	; 0x0d
    268a:	ec 87       	std	Y+12, r30	; 0x0c
    268c:	80 81       	ld	r24, Z
    268e:	8f 5f       	subi	r24, 0xFF	; 255
    2690:	80 83       	st	Z, r24
    2692:	df 91       	pop	r29
    2694:	cf 91       	pop	r28
    2696:	1f 91       	pop	r17
    2698:	0f 91       	pop	r16
    269a:	08 95       	ret

0000269c <pvTaskIncrementMutexHeldCount>:
    269c:	80 91 b3 16 	lds	r24, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    26a0:	90 91 b4 16 	lds	r25, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    26a4:	89 2b       	or	r24, r25
    26a6:	39 f0       	breq	.+14     	; 0x26b6 <pvTaskIncrementMutexHeldCount+0x1a>
    26a8:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    26ac:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    26b0:	86 a5       	ldd	r24, Z+46	; 0x2e
    26b2:	8f 5f       	subi	r24, 0xFF	; 255
    26b4:	86 a7       	std	Z+46, r24	; 0x2e
    26b6:	80 91 b3 16 	lds	r24, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    26ba:	90 91 b4 16 	lds	r25, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    26be:	08 95       	ret

000026c0 <xTaskGenericNotifyWait>:
    26c0:	4f 92       	push	r4
    26c2:	5f 92       	push	r5
    26c4:	6f 92       	push	r6
    26c6:	7f 92       	push	r7
    26c8:	af 92       	push	r10
    26ca:	bf 92       	push	r11
    26cc:	cf 92       	push	r12
    26ce:	df 92       	push	r13
    26d0:	ef 92       	push	r14
    26d2:	ff 92       	push	r15
    26d4:	0f 93       	push	r16
    26d6:	1f 93       	push	r17
    26d8:	cf 93       	push	r28
    26da:	df 93       	push	r29
    26dc:	28 01       	movw	r4, r16
    26de:	39 01       	movw	r6, r18
    26e0:	0f b6       	in	r0, 0x3f	; 63
    26e2:	f8 94       	cli
    26e4:	0f 92       	push	r0
    26e6:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    26ea:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    26ee:	c8 2f       	mov	r28, r24
    26f0:	d0 e0       	ldi	r29, 0x00	; 0
    26f2:	ec 0f       	add	r30, r28
    26f4:	fd 1f       	adc	r31, r29
    26f6:	83 a9       	ldd	r24, Z+51	; 0x33
    26f8:	82 30       	cpi	r24, 0x02	; 2
    26fa:	71 f1       	breq	.+92     	; 0x2758 <xTaskGenericNotifyWait+0x98>
    26fc:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    2700:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    2704:	ce 01       	movw	r24, r28
    2706:	88 0f       	add	r24, r24
    2708:	99 1f       	adc	r25, r25
    270a:	88 0f       	add	r24, r24
    270c:	99 1f       	adc	r25, r25
    270e:	e8 0f       	add	r30, r24
    2710:	f9 1f       	adc	r31, r25
    2712:	87 a5       	ldd	r24, Z+47	; 0x2f
    2714:	90 a9       	ldd	r25, Z+48	; 0x30
    2716:	a1 a9       	ldd	r26, Z+49	; 0x31
    2718:	b2 a9       	ldd	r27, Z+50	; 0x32
    271a:	40 95       	com	r20
    271c:	50 95       	com	r21
    271e:	60 95       	com	r22
    2720:	70 95       	com	r23
    2722:	48 23       	and	r20, r24
    2724:	59 23       	and	r21, r25
    2726:	6a 23       	and	r22, r26
    2728:	7b 23       	and	r23, r27
    272a:	47 a7       	std	Z+47, r20	; 0x2f
    272c:	50 ab       	std	Z+48, r21	; 0x30
    272e:	61 ab       	std	Z+49, r22	; 0x31
    2730:	72 ab       	std	Z+50, r23	; 0x32
    2732:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    2736:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    273a:	ec 0f       	add	r30, r28
    273c:	fd 1f       	adc	r31, r29
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	83 ab       	std	Z+51, r24	; 0x33
    2742:	a1 14       	cp	r10, r1
    2744:	b1 04       	cpc	r11, r1
    2746:	c1 04       	cpc	r12, r1
    2748:	d1 04       	cpc	r13, r1
    274a:	31 f0       	breq	.+12     	; 0x2758 <xTaskGenericNotifyWait+0x98>
    274c:	41 e0       	ldi	r20, 0x01	; 1
    274e:	c6 01       	movw	r24, r12
    2750:	b5 01       	movw	r22, r10
    2752:	88 d8       	rcall	.-3824   	; 0x1864 <prvAddCurrentTaskToDelayedList>
    2754:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>
    2758:	0f 90       	pop	r0
    275a:	0f be       	out	0x3f, r0	; 63
    275c:	0f b6       	in	r0, 0x3f	; 63
    275e:	f8 94       	cli
    2760:	0f 92       	push	r0
    2762:	e1 14       	cp	r14, r1
    2764:	f1 04       	cpc	r15, r1
    2766:	a1 f0       	breq	.+40     	; 0x2790 <xTaskGenericNotifyWait+0xd0>
    2768:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    276c:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    2770:	ce 01       	movw	r24, r28
    2772:	88 0f       	add	r24, r24
    2774:	99 1f       	adc	r25, r25
    2776:	88 0f       	add	r24, r24
    2778:	99 1f       	adc	r25, r25
    277a:	e8 0f       	add	r30, r24
    277c:	f9 1f       	adc	r31, r25
    277e:	87 a5       	ldd	r24, Z+47	; 0x2f
    2780:	90 a9       	ldd	r25, Z+48	; 0x30
    2782:	a1 a9       	ldd	r26, Z+49	; 0x31
    2784:	b2 a9       	ldd	r27, Z+50	; 0x32
    2786:	f7 01       	movw	r30, r14
    2788:	80 83       	st	Z, r24
    278a:	91 83       	std	Z+1, r25	; 0x01
    278c:	a2 83       	std	Z+2, r26	; 0x02
    278e:	b3 83       	std	Z+3, r27	; 0x03
    2790:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    2794:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    2798:	ec 0f       	add	r30, r28
    279a:	fd 1f       	adc	r31, r29
    279c:	83 a9       	ldd	r24, Z+51	; 0x33
    279e:	82 30       	cpi	r24, 0x02	; 2
    27a0:	e9 f4       	brne	.+58     	; 0x27dc <xTaskGenericNotifyWait+0x11c>
    27a2:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    27a6:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    27aa:	ce 01       	movw	r24, r28
    27ac:	88 0f       	add	r24, r24
    27ae:	99 1f       	adc	r25, r25
    27b0:	88 0f       	add	r24, r24
    27b2:	99 1f       	adc	r25, r25
    27b4:	e8 0f       	add	r30, r24
    27b6:	f9 1f       	adc	r31, r25
    27b8:	87 a5       	ldd	r24, Z+47	; 0x2f
    27ba:	90 a9       	ldd	r25, Z+48	; 0x30
    27bc:	a1 a9       	ldd	r26, Z+49	; 0x31
    27be:	b2 a9       	ldd	r27, Z+50	; 0x32
    27c0:	40 94       	com	r4
    27c2:	50 94       	com	r5
    27c4:	60 94       	com	r6
    27c6:	70 94       	com	r7
    27c8:	48 22       	and	r4, r24
    27ca:	59 22       	and	r5, r25
    27cc:	6a 22       	and	r6, r26
    27ce:	7b 22       	and	r7, r27
    27d0:	47 a6       	std	Z+47, r4	; 0x2f
    27d2:	50 aa       	std	Z+48, r5	; 0x30
    27d4:	61 aa       	std	Z+49, r6	; 0x31
    27d6:	72 aa       	std	Z+50, r7	; 0x32
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	01 c0       	rjmp	.+2      	; 0x27de <xTaskGenericNotifyWait+0x11e>
    27dc:	80 e0       	ldi	r24, 0x00	; 0
    27de:	20 91 b3 16 	lds	r18, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    27e2:	30 91 b4 16 	lds	r19, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    27e6:	c2 0f       	add	r28, r18
    27e8:	d3 1f       	adc	r29, r19
    27ea:	1b aa       	std	Y+51, r1	; 0x33
    27ec:	0f 90       	pop	r0
    27ee:	0f be       	out	0x3f, r0	; 63
    27f0:	df 91       	pop	r29
    27f2:	cf 91       	pop	r28
    27f4:	1f 91       	pop	r17
    27f6:	0f 91       	pop	r16
    27f8:	ff 90       	pop	r15
    27fa:	ef 90       	pop	r14
    27fc:	df 90       	pop	r13
    27fe:	cf 90       	pop	r12
    2800:	bf 90       	pop	r11
    2802:	af 90       	pop	r10
    2804:	7f 90       	pop	r7
    2806:	6f 90       	pop	r6
    2808:	5f 90       	pop	r5
    280a:	4f 90       	pop	r4
    280c:	08 95       	ret

0000280e <xTaskGenericNotify>:
    280e:	8f 92       	push	r8
    2810:	9f 92       	push	r9
    2812:	af 92       	push	r10
    2814:	bf 92       	push	r11
    2816:	ef 92       	push	r14
    2818:	ff 92       	push	r15
    281a:	0f 93       	push	r16
    281c:	cf 93       	push	r28
    281e:	df 93       	push	r29
    2820:	dc 01       	movw	r26, r24
    2822:	0f b6       	in	r0, 0x3f	; 63
    2824:	f8 94       	cli
    2826:	0f 92       	push	r0
    2828:	e1 14       	cp	r14, r1
    282a:	f1 04       	cpc	r15, r1
    282c:	89 f0       	breq	.+34     	; 0x2850 <xTaskGenericNotify+0x42>
    282e:	e6 2f       	mov	r30, r22
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	ee 0f       	add	r30, r30
    2834:	ff 1f       	adc	r31, r31
    2836:	ee 0f       	add	r30, r30
    2838:	ff 1f       	adc	r31, r31
    283a:	e8 0f       	add	r30, r24
    283c:	f9 1f       	adc	r31, r25
    283e:	87 a4       	ldd	r8, Z+47	; 0x2f
    2840:	90 a8       	ldd	r9, Z+48	; 0x30
    2842:	a1 a8       	ldd	r10, Z+49	; 0x31
    2844:	b2 a8       	ldd	r11, Z+50	; 0x32
    2846:	f7 01       	movw	r30, r14
    2848:	80 82       	st	Z, r8
    284a:	91 82       	std	Z+1, r9	; 0x01
    284c:	a2 82       	std	Z+2, r10	; 0x02
    284e:	b3 82       	std	Z+3, r11	; 0x03
    2850:	70 e0       	ldi	r23, 0x00	; 0
    2852:	fd 01       	movw	r30, r26
    2854:	e6 0f       	add	r30, r22
    2856:	f7 1f       	adc	r31, r23
    2858:	83 a9       	ldd	r24, Z+51	; 0x33
    285a:	92 e0       	ldi	r25, 0x02	; 2
    285c:	93 ab       	std	Z+51, r25	; 0x33
    285e:	02 30       	cpi	r16, 0x02	; 2
    2860:	01 f1       	breq	.+64     	; 0x28a2 <xTaskGenericNotify+0x94>
    2862:	18 f4       	brcc	.+6      	; 0x286a <xTaskGenericNotify+0x5c>
    2864:	01 30       	cpi	r16, 0x01	; 1
    2866:	31 f0       	breq	.+12     	; 0x2874 <xTaskGenericNotify+0x66>
    2868:	4d c0       	rjmp	.+154    	; 0x2904 <xTaskGenericNotify+0xf6>
    286a:	03 30       	cpi	r16, 0x03	; 3
    286c:	79 f1       	breq	.+94     	; 0x28cc <xTaskGenericNotify+0xbe>
    286e:	04 30       	cpi	r16, 0x04	; 4
    2870:	d1 f1       	breq	.+116    	; 0x28e6 <xTaskGenericNotify+0xd8>
    2872:	48 c0       	rjmp	.+144    	; 0x2904 <xTaskGenericNotify+0xf6>
    2874:	66 0f       	add	r22, r22
    2876:	77 1f       	adc	r23, r23
    2878:	66 0f       	add	r22, r22
    287a:	77 1f       	adc	r23, r23
    287c:	fd 01       	movw	r30, r26
    287e:	e6 0f       	add	r30, r22
    2880:	f7 1f       	adc	r31, r23
    2882:	87 a4       	ldd	r8, Z+47	; 0x2f
    2884:	90 a8       	ldd	r9, Z+48	; 0x30
    2886:	a1 a8       	ldd	r10, Z+49	; 0x31
    2888:	b2 a8       	ldd	r11, Z+50	; 0x32
    288a:	ba 01       	movw	r22, r20
    288c:	a9 01       	movw	r20, r18
    288e:	48 29       	or	r20, r8
    2890:	59 29       	or	r21, r9
    2892:	6a 29       	or	r22, r10
    2894:	7b 29       	or	r23, r11
    2896:	47 a7       	std	Z+47, r20	; 0x2f
    2898:	50 ab       	std	Z+48, r21	; 0x30
    289a:	61 ab       	std	Z+49, r22	; 0x31
    289c:	72 ab       	std	Z+50, r23	; 0x32
    289e:	01 e0       	ldi	r16, 0x01	; 1
    28a0:	34 c0       	rjmp	.+104    	; 0x290a <xTaskGenericNotify+0xfc>
    28a2:	66 0f       	add	r22, r22
    28a4:	77 1f       	adc	r23, r23
    28a6:	66 0f       	add	r22, r22
    28a8:	77 1f       	adc	r23, r23
    28aa:	fd 01       	movw	r30, r26
    28ac:	e6 0f       	add	r30, r22
    28ae:	f7 1f       	adc	r31, r23
    28b0:	47 a5       	ldd	r20, Z+47	; 0x2f
    28b2:	50 a9       	ldd	r21, Z+48	; 0x30
    28b4:	61 a9       	ldd	r22, Z+49	; 0x31
    28b6:	72 a9       	ldd	r23, Z+50	; 0x32
    28b8:	4f 5f       	subi	r20, 0xFF	; 255
    28ba:	5f 4f       	sbci	r21, 0xFF	; 255
    28bc:	6f 4f       	sbci	r22, 0xFF	; 255
    28be:	7f 4f       	sbci	r23, 0xFF	; 255
    28c0:	47 a7       	std	Z+47, r20	; 0x2f
    28c2:	50 ab       	std	Z+48, r21	; 0x30
    28c4:	61 ab       	std	Z+49, r22	; 0x31
    28c6:	72 ab       	std	Z+50, r23	; 0x32
    28c8:	01 e0       	ldi	r16, 0x01	; 1
    28ca:	1f c0       	rjmp	.+62     	; 0x290a <xTaskGenericNotify+0xfc>
    28cc:	66 0f       	add	r22, r22
    28ce:	77 1f       	adc	r23, r23
    28d0:	66 0f       	add	r22, r22
    28d2:	77 1f       	adc	r23, r23
    28d4:	fd 01       	movw	r30, r26
    28d6:	e6 0f       	add	r30, r22
    28d8:	f7 1f       	adc	r31, r23
    28da:	27 a7       	std	Z+47, r18	; 0x2f
    28dc:	30 ab       	std	Z+48, r19	; 0x30
    28de:	41 ab       	std	Z+49, r20	; 0x31
    28e0:	52 ab       	std	Z+50, r21	; 0x32
    28e2:	01 e0       	ldi	r16, 0x01	; 1
    28e4:	12 c0       	rjmp	.+36     	; 0x290a <xTaskGenericNotify+0xfc>
    28e6:	82 30       	cpi	r24, 0x02	; 2
    28e8:	79 f0       	breq	.+30     	; 0x2908 <xTaskGenericNotify+0xfa>
    28ea:	66 0f       	add	r22, r22
    28ec:	77 1f       	adc	r23, r23
    28ee:	66 0f       	add	r22, r22
    28f0:	77 1f       	adc	r23, r23
    28f2:	fd 01       	movw	r30, r26
    28f4:	e6 0f       	add	r30, r22
    28f6:	f7 1f       	adc	r31, r23
    28f8:	27 a7       	std	Z+47, r18	; 0x2f
    28fa:	30 ab       	std	Z+48, r19	; 0x30
    28fc:	41 ab       	std	Z+49, r20	; 0x31
    28fe:	52 ab       	std	Z+50, r21	; 0x32
    2900:	01 e0       	ldi	r16, 0x01	; 1
    2902:	03 c0       	rjmp	.+6      	; 0x290a <xTaskGenericNotify+0xfc>
    2904:	01 e0       	ldi	r16, 0x01	; 1
    2906:	01 c0       	rjmp	.+2      	; 0x290a <xTaskGenericNotify+0xfc>
    2908:	00 e0       	ldi	r16, 0x00	; 0
    290a:	81 30       	cpi	r24, 0x01	; 1
    290c:	09 f0       	breq	.+2      	; 0x2910 <xTaskGenericNotify+0x102>
    290e:	69 c0       	rjmp	.+210    	; 0x29e2 <xTaskGenericNotify+0x1d4>
    2910:	1c 96       	adiw	r26, 0x0c	; 12
    2912:	ed 91       	ld	r30, X+
    2914:	fc 91       	ld	r31, X
    2916:	1d 97       	sbiw	r26, 0x0d	; 13
    2918:	16 96       	adiw	r26, 0x06	; 6
    291a:	cd 91       	ld	r28, X+
    291c:	dc 91       	ld	r29, X
    291e:	17 97       	sbiw	r26, 0x07	; 7
    2920:	18 96       	adiw	r26, 0x08	; 8
    2922:	8d 91       	ld	r24, X+
    2924:	9c 91       	ld	r25, X
    2926:	19 97       	sbiw	r26, 0x09	; 9
    2928:	9f 83       	std	Y+7, r25	; 0x07
    292a:	8e 83       	std	Y+6, r24	; 0x06
    292c:	18 96       	adiw	r26, 0x08	; 8
    292e:	cd 91       	ld	r28, X+
    2930:	dc 91       	ld	r29, X
    2932:	19 97       	sbiw	r26, 0x09	; 9
    2934:	16 96       	adiw	r26, 0x06	; 6
    2936:	8d 91       	ld	r24, X+
    2938:	9c 91       	ld	r25, X
    293a:	17 97       	sbiw	r26, 0x07	; 7
    293c:	9d 83       	std	Y+5, r25	; 0x05
    293e:	8c 83       	std	Y+4, r24	; 0x04
    2940:	81 81       	ldd	r24, Z+1	; 0x01
    2942:	92 81       	ldd	r25, Z+2	; 0x02
    2944:	9d 01       	movw	r18, r26
    2946:	2e 5f       	subi	r18, 0xFE	; 254
    2948:	3f 4f       	sbci	r19, 0xFF	; 255
    294a:	82 17       	cp	r24, r18
    294c:	93 07       	cpc	r25, r19
    294e:	31 f4       	brne	.+12     	; 0x295c <xTaskGenericNotify+0x14e>
    2950:	18 96       	adiw	r26, 0x08	; 8
    2952:	8d 91       	ld	r24, X+
    2954:	9c 91       	ld	r25, X
    2956:	19 97       	sbiw	r26, 0x09	; 9
    2958:	92 83       	std	Z+2, r25	; 0x02
    295a:	81 83       	std	Z+1, r24	; 0x01
    295c:	1d 96       	adiw	r26, 0x0d	; 13
    295e:	1c 92       	st	X, r1
    2960:	1e 92       	st	-X, r1
    2962:	1c 97       	sbiw	r26, 0x0c	; 12
    2964:	80 81       	ld	r24, Z
    2966:	81 50       	subi	r24, 0x01	; 1
    2968:	80 83       	st	Z, r24
    296a:	5a 96       	adiw	r26, 0x1a	; 26
    296c:	ec 91       	ld	r30, X
    296e:	5a 97       	sbiw	r26, 0x1a	; 26
    2970:	80 91 03 16 	lds	r24, 0x1603	; 0x801603 <uxTopReadyPriority>
    2974:	8e 17       	cp	r24, r30
    2976:	10 f4       	brcc	.+4      	; 0x297c <xTaskGenericNotify+0x16e>
    2978:	e0 93 03 16 	sts	0x1603, r30	; 0x801603 <uxTopReadyPriority>
    297c:	8b e0       	ldi	r24, 0x0B	; 11
    297e:	8e 9f       	mul	r24, r30
    2980:	f0 01       	movw	r30, r0
    2982:	11 24       	eor	r1, r1
    2984:	eb 5b       	subi	r30, 0xBB	; 187
    2986:	f9 4e       	sbci	r31, 0xE9	; 233
    2988:	01 80       	ldd	r0, Z+1	; 0x01
    298a:	f2 81       	ldd	r31, Z+2	; 0x02
    298c:	e0 2d       	mov	r30, r0
    298e:	17 96       	adiw	r26, 0x07	; 7
    2990:	fc 93       	st	X, r31
    2992:	ee 93       	st	-X, r30
    2994:	16 97       	sbiw	r26, 0x06	; 6
    2996:	46 81       	ldd	r20, Z+6	; 0x06
    2998:	57 81       	ldd	r21, Z+7	; 0x07
    299a:	19 96       	adiw	r26, 0x09	; 9
    299c:	5c 93       	st	X, r21
    299e:	4e 93       	st	-X, r20
    29a0:	18 97       	sbiw	r26, 0x08	; 8
    29a2:	c6 81       	ldd	r28, Z+6	; 0x06
    29a4:	d7 81       	ldd	r29, Z+7	; 0x07
    29a6:	3d 83       	std	Y+5, r19	; 0x05
    29a8:	2c 83       	std	Y+4, r18	; 0x04
    29aa:	37 83       	std	Z+7, r19	; 0x07
    29ac:	26 83       	std	Z+6, r18	; 0x06
    29ae:	5a 96       	adiw	r26, 0x1a	; 26
    29b0:	ec 91       	ld	r30, X
    29b2:	5a 97       	sbiw	r26, 0x1a	; 26
    29b4:	8e 9f       	mul	r24, r30
    29b6:	f0 01       	movw	r30, r0
    29b8:	11 24       	eor	r1, r1
    29ba:	eb 5b       	subi	r30, 0xBB	; 187
    29bc:	f9 4e       	sbci	r31, 0xE9	; 233
    29be:	1d 96       	adiw	r26, 0x0d	; 13
    29c0:	fc 93       	st	X, r31
    29c2:	ee 93       	st	-X, r30
    29c4:	1c 97       	sbiw	r26, 0x0c	; 12
    29c6:	80 81       	ld	r24, Z
    29c8:	8f 5f       	subi	r24, 0xFF	; 255
    29ca:	80 83       	st	Z, r24
    29cc:	5a 96       	adiw	r26, 0x1a	; 26
    29ce:	9c 91       	ld	r25, X
    29d0:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    29d4:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    29d8:	82 8d       	ldd	r24, Z+26	; 0x1a
    29da:	89 17       	cp	r24, r25
    29dc:	10 f4       	brcc	.+4      	; 0x29e2 <xTaskGenericNotify+0x1d4>
    29de:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>
    29e2:	0f 90       	pop	r0
    29e4:	0f be       	out	0x3f, r0	; 63
    29e6:	80 2f       	mov	r24, r16
    29e8:	df 91       	pop	r29
    29ea:	cf 91       	pop	r28
    29ec:	0f 91       	pop	r16
    29ee:	ff 90       	pop	r15
    29f0:	ef 90       	pop	r14
    29f2:	bf 90       	pop	r11
    29f4:	af 90       	pop	r10
    29f6:	9f 90       	pop	r9
    29f8:	8f 90       	pop	r8
    29fa:	08 95       	ret

000029fc <xTaskGenericNotifyFromISR>:
    29fc:	8f 92       	push	r8
    29fe:	9f 92       	push	r9
    2a00:	af 92       	push	r10
    2a02:	bf 92       	push	r11
    2a04:	cf 92       	push	r12
    2a06:	df 92       	push	r13
    2a08:	ef 92       	push	r14
    2a0a:	ff 92       	push	r15
    2a0c:	0f 93       	push	r16
    2a0e:	cf 93       	push	r28
    2a10:	df 93       	push	r29
    2a12:	dc 01       	movw	r26, r24
    2a14:	e1 14       	cp	r14, r1
    2a16:	f1 04       	cpc	r15, r1
    2a18:	89 f0       	breq	.+34     	; 0x2a3c <xTaskGenericNotifyFromISR+0x40>
    2a1a:	e6 2f       	mov	r30, r22
    2a1c:	f0 e0       	ldi	r31, 0x00	; 0
    2a1e:	ee 0f       	add	r30, r30
    2a20:	ff 1f       	adc	r31, r31
    2a22:	ee 0f       	add	r30, r30
    2a24:	ff 1f       	adc	r31, r31
    2a26:	e8 0f       	add	r30, r24
    2a28:	f9 1f       	adc	r31, r25
    2a2a:	87 a4       	ldd	r8, Z+47	; 0x2f
    2a2c:	90 a8       	ldd	r9, Z+48	; 0x30
    2a2e:	a1 a8       	ldd	r10, Z+49	; 0x31
    2a30:	b2 a8       	ldd	r11, Z+50	; 0x32
    2a32:	f7 01       	movw	r30, r14
    2a34:	80 82       	st	Z, r8
    2a36:	91 82       	std	Z+1, r9	; 0x01
    2a38:	a2 82       	std	Z+2, r10	; 0x02
    2a3a:	b3 82       	std	Z+3, r11	; 0x03
    2a3c:	70 e0       	ldi	r23, 0x00	; 0
    2a3e:	fd 01       	movw	r30, r26
    2a40:	e6 0f       	add	r30, r22
    2a42:	f7 1f       	adc	r31, r23
    2a44:	93 a9       	ldd	r25, Z+51	; 0x33
    2a46:	82 e0       	ldi	r24, 0x02	; 2
    2a48:	83 ab       	std	Z+51, r24	; 0x33
    2a4a:	02 30       	cpi	r16, 0x02	; 2
    2a4c:	01 f1       	breq	.+64     	; 0x2a8e <xTaskGenericNotifyFromISR+0x92>
    2a4e:	18 f4       	brcc	.+6      	; 0x2a56 <xTaskGenericNotifyFromISR+0x5a>
    2a50:	01 30       	cpi	r16, 0x01	; 1
    2a52:	31 f0       	breq	.+12     	; 0x2a60 <xTaskGenericNotifyFromISR+0x64>
    2a54:	4d c0       	rjmp	.+154    	; 0x2af0 <xTaskGenericNotifyFromISR+0xf4>
    2a56:	03 30       	cpi	r16, 0x03	; 3
    2a58:	79 f1       	breq	.+94     	; 0x2ab8 <xTaskGenericNotifyFromISR+0xbc>
    2a5a:	04 30       	cpi	r16, 0x04	; 4
    2a5c:	d1 f1       	breq	.+116    	; 0x2ad2 <xTaskGenericNotifyFromISR+0xd6>
    2a5e:	48 c0       	rjmp	.+144    	; 0x2af0 <xTaskGenericNotifyFromISR+0xf4>
    2a60:	66 0f       	add	r22, r22
    2a62:	77 1f       	adc	r23, r23
    2a64:	66 0f       	add	r22, r22
    2a66:	77 1f       	adc	r23, r23
    2a68:	fd 01       	movw	r30, r26
    2a6a:	e6 0f       	add	r30, r22
    2a6c:	f7 1f       	adc	r31, r23
    2a6e:	87 a4       	ldd	r8, Z+47	; 0x2f
    2a70:	90 a8       	ldd	r9, Z+48	; 0x30
    2a72:	a1 a8       	ldd	r10, Z+49	; 0x31
    2a74:	b2 a8       	ldd	r11, Z+50	; 0x32
    2a76:	ba 01       	movw	r22, r20
    2a78:	a9 01       	movw	r20, r18
    2a7a:	48 29       	or	r20, r8
    2a7c:	59 29       	or	r21, r9
    2a7e:	6a 29       	or	r22, r10
    2a80:	7b 29       	or	r23, r11
    2a82:	47 a7       	std	Z+47, r20	; 0x2f
    2a84:	50 ab       	std	Z+48, r21	; 0x30
    2a86:	61 ab       	std	Z+49, r22	; 0x31
    2a88:	72 ab       	std	Z+50, r23	; 0x32
    2a8a:	81 e0       	ldi	r24, 0x01	; 1
    2a8c:	34 c0       	rjmp	.+104    	; 0x2af6 <xTaskGenericNotifyFromISR+0xfa>
    2a8e:	66 0f       	add	r22, r22
    2a90:	77 1f       	adc	r23, r23
    2a92:	66 0f       	add	r22, r22
    2a94:	77 1f       	adc	r23, r23
    2a96:	fd 01       	movw	r30, r26
    2a98:	e6 0f       	add	r30, r22
    2a9a:	f7 1f       	adc	r31, r23
    2a9c:	47 a5       	ldd	r20, Z+47	; 0x2f
    2a9e:	50 a9       	ldd	r21, Z+48	; 0x30
    2aa0:	61 a9       	ldd	r22, Z+49	; 0x31
    2aa2:	72 a9       	ldd	r23, Z+50	; 0x32
    2aa4:	4f 5f       	subi	r20, 0xFF	; 255
    2aa6:	5f 4f       	sbci	r21, 0xFF	; 255
    2aa8:	6f 4f       	sbci	r22, 0xFF	; 255
    2aaa:	7f 4f       	sbci	r23, 0xFF	; 255
    2aac:	47 a7       	std	Z+47, r20	; 0x2f
    2aae:	50 ab       	std	Z+48, r21	; 0x30
    2ab0:	61 ab       	std	Z+49, r22	; 0x31
    2ab2:	72 ab       	std	Z+50, r23	; 0x32
    2ab4:	81 e0       	ldi	r24, 0x01	; 1
    2ab6:	1f c0       	rjmp	.+62     	; 0x2af6 <xTaskGenericNotifyFromISR+0xfa>
    2ab8:	66 0f       	add	r22, r22
    2aba:	77 1f       	adc	r23, r23
    2abc:	66 0f       	add	r22, r22
    2abe:	77 1f       	adc	r23, r23
    2ac0:	fd 01       	movw	r30, r26
    2ac2:	e6 0f       	add	r30, r22
    2ac4:	f7 1f       	adc	r31, r23
    2ac6:	27 a7       	std	Z+47, r18	; 0x2f
    2ac8:	30 ab       	std	Z+48, r19	; 0x30
    2aca:	41 ab       	std	Z+49, r20	; 0x31
    2acc:	52 ab       	std	Z+50, r21	; 0x32
    2ace:	81 e0       	ldi	r24, 0x01	; 1
    2ad0:	12 c0       	rjmp	.+36     	; 0x2af6 <xTaskGenericNotifyFromISR+0xfa>
    2ad2:	92 30       	cpi	r25, 0x02	; 2
    2ad4:	79 f0       	breq	.+30     	; 0x2af4 <xTaskGenericNotifyFromISR+0xf8>
    2ad6:	66 0f       	add	r22, r22
    2ad8:	77 1f       	adc	r23, r23
    2ada:	66 0f       	add	r22, r22
    2adc:	77 1f       	adc	r23, r23
    2ade:	fd 01       	movw	r30, r26
    2ae0:	e6 0f       	add	r30, r22
    2ae2:	f7 1f       	adc	r31, r23
    2ae4:	27 a7       	std	Z+47, r18	; 0x2f
    2ae6:	30 ab       	std	Z+48, r19	; 0x30
    2ae8:	41 ab       	std	Z+49, r20	; 0x31
    2aea:	52 ab       	std	Z+50, r21	; 0x32
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    2aee:	03 c0       	rjmp	.+6      	; 0x2af6 <xTaskGenericNotifyFromISR+0xfa>
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	01 c0       	rjmp	.+2      	; 0x2af6 <xTaskGenericNotifyFromISR+0xfa>
    2af4:	80 e0       	ldi	r24, 0x00	; 0
    2af6:	91 30       	cpi	r25, 0x01	; 1
    2af8:	09 f0       	breq	.+2      	; 0x2afc <xTaskGenericNotifyFromISR+0x100>
    2afa:	96 c0       	rjmp	.+300    	; 0x2c28 <xTaskGenericNotifyFromISR+0x22c>
    2afc:	90 91 f4 15 	lds	r25, 0x15F4	; 0x8015f4 <uxSchedulerSuspended>
    2b00:	91 11       	cpse	r25, r1
    2b02:	5f c0       	rjmp	.+190    	; 0x2bc2 <xTaskGenericNotifyFromISR+0x1c6>
    2b04:	1c 96       	adiw	r26, 0x0c	; 12
    2b06:	ed 91       	ld	r30, X+
    2b08:	fc 91       	ld	r31, X
    2b0a:	1d 97       	sbiw	r26, 0x0d	; 13
    2b0c:	16 96       	adiw	r26, 0x06	; 6
    2b0e:	cd 91       	ld	r28, X+
    2b10:	dc 91       	ld	r29, X
    2b12:	17 97       	sbiw	r26, 0x07	; 7
    2b14:	18 96       	adiw	r26, 0x08	; 8
    2b16:	2d 91       	ld	r18, X+
    2b18:	3c 91       	ld	r19, X
    2b1a:	19 97       	sbiw	r26, 0x09	; 9
    2b1c:	3f 83       	std	Y+7, r19	; 0x07
    2b1e:	2e 83       	std	Y+6, r18	; 0x06
    2b20:	18 96       	adiw	r26, 0x08	; 8
    2b22:	cd 91       	ld	r28, X+
    2b24:	dc 91       	ld	r29, X
    2b26:	19 97       	sbiw	r26, 0x09	; 9
    2b28:	16 96       	adiw	r26, 0x06	; 6
    2b2a:	2d 91       	ld	r18, X+
    2b2c:	3c 91       	ld	r19, X
    2b2e:	17 97       	sbiw	r26, 0x07	; 7
    2b30:	3d 83       	std	Y+5, r19	; 0x05
    2b32:	2c 83       	std	Y+4, r18	; 0x04
    2b34:	41 81       	ldd	r20, Z+1	; 0x01
    2b36:	52 81       	ldd	r21, Z+2	; 0x02
    2b38:	9d 01       	movw	r18, r26
    2b3a:	2e 5f       	subi	r18, 0xFE	; 254
    2b3c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b3e:	42 17       	cp	r20, r18
    2b40:	53 07       	cpc	r21, r19
    2b42:	31 f4       	brne	.+12     	; 0x2b50 <xTaskGenericNotifyFromISR+0x154>
    2b44:	18 96       	adiw	r26, 0x08	; 8
    2b46:	4d 91       	ld	r20, X+
    2b48:	5c 91       	ld	r21, X
    2b4a:	19 97       	sbiw	r26, 0x09	; 9
    2b4c:	52 83       	std	Z+2, r21	; 0x02
    2b4e:	41 83       	std	Z+1, r20	; 0x01
    2b50:	1d 96       	adiw	r26, 0x0d	; 13
    2b52:	1c 92       	st	X, r1
    2b54:	1e 92       	st	-X, r1
    2b56:	1c 97       	sbiw	r26, 0x0c	; 12
    2b58:	90 81       	ld	r25, Z
    2b5a:	91 50       	subi	r25, 0x01	; 1
    2b5c:	90 83       	st	Z, r25
    2b5e:	5a 96       	adiw	r26, 0x1a	; 26
    2b60:	ec 91       	ld	r30, X
    2b62:	5a 97       	sbiw	r26, 0x1a	; 26
    2b64:	90 91 03 16 	lds	r25, 0x1603	; 0x801603 <uxTopReadyPriority>
    2b68:	9e 17       	cp	r25, r30
    2b6a:	10 f4       	brcc	.+4      	; 0x2b70 <xTaskGenericNotifyFromISR+0x174>
    2b6c:	e0 93 03 16 	sts	0x1603, r30	; 0x801603 <uxTopReadyPriority>
    2b70:	9b e0       	ldi	r25, 0x0B	; 11
    2b72:	9e 9f       	mul	r25, r30
    2b74:	f0 01       	movw	r30, r0
    2b76:	11 24       	eor	r1, r1
    2b78:	eb 5b       	subi	r30, 0xBB	; 187
    2b7a:	f9 4e       	sbci	r31, 0xE9	; 233
    2b7c:	01 80       	ldd	r0, Z+1	; 0x01
    2b7e:	f2 81       	ldd	r31, Z+2	; 0x02
    2b80:	e0 2d       	mov	r30, r0
    2b82:	17 96       	adiw	r26, 0x07	; 7
    2b84:	fc 93       	st	X, r31
    2b86:	ee 93       	st	-X, r30
    2b88:	16 97       	sbiw	r26, 0x06	; 6
    2b8a:	46 81       	ldd	r20, Z+6	; 0x06
    2b8c:	57 81       	ldd	r21, Z+7	; 0x07
    2b8e:	19 96       	adiw	r26, 0x09	; 9
    2b90:	5c 93       	st	X, r21
    2b92:	4e 93       	st	-X, r20
    2b94:	18 97       	sbiw	r26, 0x08	; 8
    2b96:	c6 81       	ldd	r28, Z+6	; 0x06
    2b98:	d7 81       	ldd	r29, Z+7	; 0x07
    2b9a:	3d 83       	std	Y+5, r19	; 0x05
    2b9c:	2c 83       	std	Y+4, r18	; 0x04
    2b9e:	37 83       	std	Z+7, r19	; 0x07
    2ba0:	26 83       	std	Z+6, r18	; 0x06
    2ba2:	5a 96       	adiw	r26, 0x1a	; 26
    2ba4:	ec 91       	ld	r30, X
    2ba6:	5a 97       	sbiw	r26, 0x1a	; 26
    2ba8:	9e 9f       	mul	r25, r30
    2baa:	f0 01       	movw	r30, r0
    2bac:	11 24       	eor	r1, r1
    2bae:	eb 5b       	subi	r30, 0xBB	; 187
    2bb0:	f9 4e       	sbci	r31, 0xE9	; 233
    2bb2:	1d 96       	adiw	r26, 0x0d	; 13
    2bb4:	fc 93       	st	X, r31
    2bb6:	ee 93       	st	-X, r30
    2bb8:	1c 97       	sbiw	r26, 0x0c	; 12
    2bba:	90 81       	ld	r25, Z
    2bbc:	9f 5f       	subi	r25, 0xFF	; 255
    2bbe:	90 83       	st	Z, r25
    2bc0:	21 c0       	rjmp	.+66     	; 0x2c04 <xTaskGenericNotifyFromISR+0x208>
    2bc2:	60 e2       	ldi	r22, 0x20	; 32
    2bc4:	76 e1       	ldi	r23, 0x16	; 22
    2bc6:	fb 01       	movw	r30, r22
    2bc8:	c1 81       	ldd	r28, Z+1	; 0x01
    2bca:	d2 81       	ldd	r29, Z+2	; 0x02
    2bcc:	53 96       	adiw	r26, 0x13	; 19
    2bce:	dc 93       	st	X, r29
    2bd0:	ce 93       	st	-X, r28
    2bd2:	52 97       	sbiw	r26, 0x12	; 18
    2bd4:	2e 81       	ldd	r18, Y+6	; 0x06
    2bd6:	3f 81       	ldd	r19, Y+7	; 0x07
    2bd8:	55 96       	adiw	r26, 0x15	; 21
    2bda:	3c 93       	st	X, r19
    2bdc:	2e 93       	st	-X, r18
    2bde:	54 97       	sbiw	r26, 0x14	; 20
    2be0:	4e 81       	ldd	r20, Y+6	; 0x06
    2be2:	5f 81       	ldd	r21, Y+7	; 0x07
    2be4:	9d 01       	movw	r18, r26
    2be6:	22 5f       	subi	r18, 0xF2	; 242
    2be8:	3f 4f       	sbci	r19, 0xFF	; 255
    2bea:	fa 01       	movw	r30, r20
    2bec:	35 83       	std	Z+5, r19	; 0x05
    2bee:	24 83       	std	Z+4, r18	; 0x04
    2bf0:	3f 83       	std	Y+7, r19	; 0x07
    2bf2:	2e 83       	std	Y+6, r18	; 0x06
    2bf4:	59 96       	adiw	r26, 0x19	; 25
    2bf6:	7c 93       	st	X, r23
    2bf8:	6e 93       	st	-X, r22
    2bfa:	58 97       	sbiw	r26, 0x18	; 24
    2bfc:	fb 01       	movw	r30, r22
    2bfe:	90 81       	ld	r25, Z
    2c00:	9f 5f       	subi	r25, 0xFF	; 255
    2c02:	90 83       	st	Z, r25
    2c04:	5a 96       	adiw	r26, 0x1a	; 26
    2c06:	2c 91       	ld	r18, X
    2c08:	e0 91 b3 16 	lds	r30, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    2c0c:	f0 91 b4 16 	lds	r31, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>
    2c10:	92 8d       	ldd	r25, Z+26	; 0x1a
    2c12:	92 17       	cp	r25, r18
    2c14:	48 f4       	brcc	.+18     	; 0x2c28 <xTaskGenericNotifyFromISR+0x22c>
    2c16:	c1 14       	cp	r12, r1
    2c18:	d1 04       	cpc	r13, r1
    2c1a:	19 f0       	breq	.+6      	; 0x2c22 <xTaskGenericNotifyFromISR+0x226>
    2c1c:	91 e0       	ldi	r25, 0x01	; 1
    2c1e:	f6 01       	movw	r30, r12
    2c20:	90 83       	st	Z, r25
    2c22:	91 e0       	ldi	r25, 0x01	; 1
    2c24:	90 93 fd 15 	sts	0x15FD, r25	; 0x8015fd <xYieldPending>
    2c28:	df 91       	pop	r29
    2c2a:	cf 91       	pop	r28
    2c2c:	0f 91       	pop	r16
    2c2e:	ff 90       	pop	r15
    2c30:	ef 90       	pop	r14
    2c32:	df 90       	pop	r13
    2c34:	cf 90       	pop	r12
    2c36:	bf 90       	pop	r11
    2c38:	af 90       	pop	r10
    2c3a:	9f 90       	pop	r9
    2c3c:	8f 90       	pop	r8
    2c3e:	08 95       	ret

00002c40 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2c40:	00 97       	sbiw	r24, 0x00	; 0
    2c42:	21 f4       	brne	.+8      	; 0x2c4c <xTaskGenericNotifyStateClear+0xc>
    2c44:	80 91 b3 16 	lds	r24, 0x16B3	; 0x8016b3 <pxCurrentTCB>
    2c48:	90 91 b4 16 	lds	r25, 0x16B4	; 0x8016b4 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2c4c:	0f b6       	in	r0, 0x3f	; 63
    2c4e:	f8 94       	cli
    2c50:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    2c52:	70 e0       	ldi	r23, 0x00	; 0
    2c54:	fc 01       	movw	r30, r24
    2c56:	e6 0f       	add	r30, r22
    2c58:	f7 1f       	adc	r31, r23
    2c5a:	23 a9       	ldd	r18, Z+51	; 0x33
    2c5c:	22 30       	cpi	r18, 0x02	; 2
    2c5e:	31 f4       	brne	.+12     	; 0x2c6c <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    2c60:	fc 01       	movw	r30, r24
    2c62:	e6 0f       	add	r30, r22
    2c64:	f7 1f       	adc	r31, r23
    2c66:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    2c68:	81 e0       	ldi	r24, 0x01	; 1
    2c6a:	01 c0       	rjmp	.+2      	; 0x2c6e <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    2c6c:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2c6e:	0f 90       	pop	r0
    2c70:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2c72:	08 95       	ret

00002c74 <prvGetNextExpireTime>:
    2c74:	dc 01       	movw	r26, r24
    2c76:	e0 91 bf 16 	lds	r30, 0x16BF	; 0x8016bf <pxCurrentTimerList>
    2c7a:	f0 91 c0 16 	lds	r31, 0x16C0	; 0x8016c0 <pxCurrentTimerList+0x1>
    2c7e:	80 81       	ld	r24, Z
    2c80:	91 e0       	ldi	r25, 0x01	; 1
    2c82:	81 11       	cpse	r24, r1
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	9c 93       	st	X, r25
    2c88:	91 11       	cpse	r25, r1
    2c8a:	08 c0       	rjmp	.+16     	; 0x2c9c <prvGetNextExpireTime+0x28>
    2c8c:	07 80       	ldd	r0, Z+7	; 0x07
    2c8e:	f0 85       	ldd	r31, Z+8	; 0x08
    2c90:	e0 2d       	mov	r30, r0
    2c92:	60 81       	ld	r22, Z
    2c94:	71 81       	ldd	r23, Z+1	; 0x01
    2c96:	82 81       	ldd	r24, Z+2	; 0x02
    2c98:	93 81       	ldd	r25, Z+3	; 0x03
    2c9a:	08 95       	ret
    2c9c:	60 e0       	ldi	r22, 0x00	; 0
    2c9e:	70 e0       	ldi	r23, 0x00	; 0
    2ca0:	cb 01       	movw	r24, r22
    2ca2:	08 95       	ret

00002ca4 <prvInsertTimerInActiveList>:
    2ca4:	cf 92       	push	r12
    2ca6:	df 92       	push	r13
    2ca8:	ef 92       	push	r14
    2caa:	ff 92       	push	r15
    2cac:	0f 93       	push	r16
    2cae:	1f 93       	push	r17
    2cb0:	fc 01       	movw	r30, r24
    2cb2:	42 83       	std	Z+2, r20	; 0x02
    2cb4:	53 83       	std	Z+3, r21	; 0x03
    2cb6:	64 83       	std	Z+4, r22	; 0x04
    2cb8:	75 83       	std	Z+5, r23	; 0x05
    2cba:	93 87       	std	Z+11, r25	; 0x0b
    2cbc:	82 87       	std	Z+10, r24	; 0x0a
    2cbe:	04 17       	cp	r16, r20
    2cc0:	15 07       	cpc	r17, r21
    2cc2:	26 07       	cpc	r18, r22
    2cc4:	37 07       	cpc	r19, r23
    2cc6:	c0 f0       	brcs	.+48     	; 0x2cf8 <prvInsertTimerInActiveList+0x54>
    2cc8:	0c 19       	sub	r16, r12
    2cca:	1d 09       	sbc	r17, r13
    2ccc:	2e 09       	sbc	r18, r14
    2cce:	3f 09       	sbc	r19, r15
    2cd0:	86 85       	ldd	r24, Z+14	; 0x0e
    2cd2:	97 85       	ldd	r25, Z+15	; 0x0f
    2cd4:	a0 89       	ldd	r26, Z+16	; 0x10
    2cd6:	b1 89       	ldd	r27, Z+17	; 0x11
    2cd8:	08 17       	cp	r16, r24
    2cda:	19 07       	cpc	r17, r25
    2cdc:	2a 07       	cpc	r18, r26
    2cde:	3b 07       	cpc	r19, r27
    2ce0:	00 f5       	brcc	.+64     	; 0x2d22 <prvInsertTimerInActiveList+0x7e>
    2ce2:	bf 01       	movw	r22, r30
    2ce4:	6e 5f       	subi	r22, 0xFE	; 254
    2ce6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ce8:	80 91 bd 16 	lds	r24, 0x16BD	; 0x8016bd <pxOverflowTimerList>
    2cec:	90 91 be 16 	lds	r25, 0x16BE	; 0x8016be <pxOverflowTimerList+0x1>
    2cf0:	0e 94 76 02 	call	0x4ec	; 0x4ec <vListInsert>
    2cf4:	80 e0       	ldi	r24, 0x00	; 0
    2cf6:	18 c0       	rjmp	.+48     	; 0x2d28 <prvInsertTimerInActiveList+0x84>
    2cf8:	0c 15       	cp	r16, r12
    2cfa:	1d 05       	cpc	r17, r13
    2cfc:	2e 05       	cpc	r18, r14
    2cfe:	3f 05       	cpc	r19, r15
    2d00:	28 f4       	brcc	.+10     	; 0x2d0c <prvInsertTimerInActiveList+0x68>
    2d02:	4c 15       	cp	r20, r12
    2d04:	5d 05       	cpc	r21, r13
    2d06:	6e 05       	cpc	r22, r14
    2d08:	7f 05       	cpc	r23, r15
    2d0a:	68 f4       	brcc	.+26     	; 0x2d26 <prvInsertTimerInActiveList+0x82>
    2d0c:	bf 01       	movw	r22, r30
    2d0e:	6e 5f       	subi	r22, 0xFE	; 254
    2d10:	7f 4f       	sbci	r23, 0xFF	; 255
    2d12:	80 91 bf 16 	lds	r24, 0x16BF	; 0x8016bf <pxCurrentTimerList>
    2d16:	90 91 c0 16 	lds	r25, 0x16C0	; 0x8016c0 <pxCurrentTimerList+0x1>
    2d1a:	0e 94 76 02 	call	0x4ec	; 0x4ec <vListInsert>
    2d1e:	80 e0       	ldi	r24, 0x00	; 0
    2d20:	03 c0       	rjmp	.+6      	; 0x2d28 <prvInsertTimerInActiveList+0x84>
    2d22:	81 e0       	ldi	r24, 0x01	; 1
    2d24:	01 c0       	rjmp	.+2      	; 0x2d28 <prvInsertTimerInActiveList+0x84>
    2d26:	81 e0       	ldi	r24, 0x01	; 1
    2d28:	1f 91       	pop	r17
    2d2a:	0f 91       	pop	r16
    2d2c:	ff 90       	pop	r15
    2d2e:	ef 90       	pop	r14
    2d30:	df 90       	pop	r13
    2d32:	cf 90       	pop	r12
    2d34:	08 95       	ret

00002d36 <prvCheckForValidListAndQueue>:
    2d36:	0f b6       	in	r0, 0x3f	; 63
    2d38:	f8 94       	cli
    2d3a:	0f 92       	push	r0
    2d3c:	80 91 bb 16 	lds	r24, 0x16BB	; 0x8016bb <xTimerQueue>
    2d40:	90 91 bc 16 	lds	r25, 0x16BC	; 0x8016bc <xTimerQueue+0x1>
    2d44:	89 2b       	or	r24, r25
    2d46:	e9 f4       	brne	.+58     	; 0x2d82 <prvCheckForValidListAndQueue+0x4c>
    2d48:	8c ec       	ldi	r24, 0xCC	; 204
    2d4a:	96 e1       	ldi	r25, 0x16	; 22
    2d4c:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInitialise>
    2d50:	81 ec       	ldi	r24, 0xC1	; 193
    2d52:	96 e1       	ldi	r25, 0x16	; 22
    2d54:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInitialise>
    2d58:	8c ec       	ldi	r24, 0xCC	; 204
    2d5a:	96 e1       	ldi	r25, 0x16	; 22
    2d5c:	90 93 c0 16 	sts	0x16C0, r25	; 0x8016c0 <pxCurrentTimerList+0x1>
    2d60:	80 93 bf 16 	sts	0x16BF, r24	; 0x8016bf <pxCurrentTimerList>
    2d64:	81 ec       	ldi	r24, 0xC1	; 193
    2d66:	96 e1       	ldi	r25, 0x16	; 22
    2d68:	90 93 be 16 	sts	0x16BE, r25	; 0x8016be <pxOverflowTimerList+0x1>
    2d6c:	80 93 bd 16 	sts	0x16BD, r24	; 0x8016bd <pxOverflowTimerList>
    2d70:	40 e0       	ldi	r20, 0x00	; 0
    2d72:	67 e0       	ldi	r22, 0x07	; 7
    2d74:	8a e0       	ldi	r24, 0x0A	; 10
    2d76:	0e 94 24 05 	call	0xa48	; 0xa48 <xQueueGenericCreate>
    2d7a:	90 93 bc 16 	sts	0x16BC, r25	; 0x8016bc <xTimerQueue+0x1>
    2d7e:	80 93 bb 16 	sts	0x16BB, r24	; 0x8016bb <xTimerQueue>
    2d82:	0f 90       	pop	r0
    2d84:	0f be       	out	0x3f, r0	; 63
    2d86:	08 95       	ret

00002d88 <xTimerCreateTimerTask>:
    2d88:	ef 92       	push	r14
    2d8a:	ff 92       	push	r15
    2d8c:	0f 93       	push	r16
    2d8e:	d3 df       	rcall	.-90     	; 0x2d36 <prvCheckForValidListAndQueue>
    2d90:	80 91 bb 16 	lds	r24, 0x16BB	; 0x8016bb <xTimerQueue>
    2d94:	90 91 bc 16 	lds	r25, 0x16BC	; 0x8016bc <xTimerQueue+0x1>
    2d98:	89 2b       	or	r24, r25
    2d9a:	91 f0       	breq	.+36     	; 0x2dc0 <xTimerCreateTimerTask+0x38>
    2d9c:	0f 2e       	mov	r0, r31
    2d9e:	f9 eb       	ldi	r31, 0xB9	; 185
    2da0:	ef 2e       	mov	r14, r31
    2da2:	f6 e1       	ldi	r31, 0x16	; 22
    2da4:	ff 2e       	mov	r15, r31
    2da6:	f0 2d       	mov	r31, r0
    2da8:	03 e0       	ldi	r16, 0x03	; 3
    2daa:	20 e0       	ldi	r18, 0x00	; 0
    2dac:	30 e0       	ldi	r19, 0x00	; 0
    2dae:	40 ec       	ldi	r20, 0xC0	; 192
    2db0:	50 e0       	ldi	r21, 0x00	; 0
    2db2:	64 e7       	ldi	r22, 0x74	; 116
    2db4:	72 e0       	ldi	r23, 0x02	; 2
    2db6:	87 ed       	ldi	r24, 0xD7	; 215
    2db8:	90 e0       	ldi	r25, 0x00	; 0
    2dba:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <xTaskCreate>
    2dbe:	01 c0       	rjmp	.+2      	; 0x2dc2 <xTimerCreateTimerTask+0x3a>
    2dc0:	80 e0       	ldi	r24, 0x00	; 0
    2dc2:	0f 91       	pop	r16
    2dc4:	ff 90       	pop	r15
    2dc6:	ef 90       	pop	r14
    2dc8:	08 95       	ret

00002dca <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2dca:	8f 92       	push	r8
    2dcc:	9f 92       	push	r9
    2dce:	af 92       	push	r10
    2dd0:	bf 92       	push	r11
    2dd2:	cf 92       	push	r12
    2dd4:	df 92       	push	r13
    2dd6:	ef 92       	push	r14
    2dd8:	ff 92       	push	r15
    2dda:	0f 93       	push	r16
    2ddc:	1f 93       	push	r17
    2dde:	cf 93       	push	r28
    2de0:	df 93       	push	r29
    2de2:	cd b7       	in	r28, 0x3d	; 61
    2de4:	de b7       	in	r29, 0x3e	; 62
    2de6:	27 97       	sbiw	r28, 0x07	; 7
    2de8:	0f b6       	in	r0, 0x3f	; 63
    2dea:	f8 94       	cli
    2dec:	de bf       	out	0x3e, r29	; 62
    2dee:	0f be       	out	0x3f, r0	; 63
    2df0:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2df2:	e0 91 bb 16 	lds	r30, 0x16BB	; 0x8016bb <xTimerQueue>
    2df6:	f0 91 bc 16 	lds	r31, 0x16BC	; 0x8016bc <xTimerQueue+0x1>
    2dfa:	30 97       	sbiw	r30, 0x00	; 0
    2dfc:	81 f1       	breq	.+96     	; 0x2e5e <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2dfe:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2e00:	2a 83       	std	Y+2, r18	; 0x02
    2e02:	3b 83       	std	Y+3, r19	; 0x03
    2e04:	4c 83       	std	Y+4, r20	; 0x04
    2e06:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2e08:	9f 83       	std	Y+7, r25	; 0x07
    2e0a:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2e0c:	66 30       	cpi	r22, 0x06	; 6
    2e0e:	f4 f4       	brge	.+60     	; 0x2e4c <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2e10:	ee da       	rcall	.-2596   	; 0x23ee <xTaskGetSchedulerState>
    2e12:	82 30       	cpi	r24, 0x02	; 2
    2e14:	69 f4       	brne	.+26     	; 0x2e30 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2e16:	00 e0       	ldi	r16, 0x00	; 0
    2e18:	a7 01       	movw	r20, r14
    2e1a:	96 01       	movw	r18, r12
    2e1c:	be 01       	movw	r22, r28
    2e1e:	6f 5f       	subi	r22, 0xFF	; 255
    2e20:	7f 4f       	sbci	r23, 0xFF	; 255
    2e22:	80 91 bb 16 	lds	r24, 0x16BB	; 0x8016bb <xTimerQueue>
    2e26:	90 91 bc 16 	lds	r25, 0x16BC	; 0x8016bc <xTimerQueue+0x1>
    2e2a:	0e 94 47 05 	call	0xa8e	; 0xa8e <xQueueGenericSend>
    2e2e:	18 c0       	rjmp	.+48     	; 0x2e60 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2e30:	00 e0       	ldi	r16, 0x00	; 0
    2e32:	20 e0       	ldi	r18, 0x00	; 0
    2e34:	30 e0       	ldi	r19, 0x00	; 0
    2e36:	a9 01       	movw	r20, r18
    2e38:	be 01       	movw	r22, r28
    2e3a:	6f 5f       	subi	r22, 0xFF	; 255
    2e3c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e3e:	80 91 bb 16 	lds	r24, 0x16BB	; 0x8016bb <xTimerQueue>
    2e42:	90 91 bc 16 	lds	r25, 0x16BC	; 0x8016bc <xTimerQueue+0x1>
    2e46:	0e 94 47 05 	call	0xa8e	; 0xa8e <xQueueGenericSend>
    2e4a:	0a c0       	rjmp	.+20     	; 0x2e60 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2e4c:	20 e0       	ldi	r18, 0x00	; 0
    2e4e:	a8 01       	movw	r20, r16
    2e50:	be 01       	movw	r22, r28
    2e52:	6f 5f       	subi	r22, 0xFF	; 255
    2e54:	7f 4f       	sbci	r23, 0xFF	; 255
    2e56:	cf 01       	movw	r24, r30
    2e58:	0e 94 f7 05 	call	0xbee	; 0xbee <xQueueGenericSendFromISR>
    2e5c:	01 c0       	rjmp	.+2      	; 0x2e60 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2e5e:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2e60:	27 96       	adiw	r28, 0x07	; 7
    2e62:	0f b6       	in	r0, 0x3f	; 63
    2e64:	f8 94       	cli
    2e66:	de bf       	out	0x3e, r29	; 62
    2e68:	0f be       	out	0x3f, r0	; 63
    2e6a:	cd bf       	out	0x3d, r28	; 61
    2e6c:	df 91       	pop	r29
    2e6e:	cf 91       	pop	r28
    2e70:	1f 91       	pop	r17
    2e72:	0f 91       	pop	r16
    2e74:	ff 90       	pop	r15
    2e76:	ef 90       	pop	r14
    2e78:	df 90       	pop	r13
    2e7a:	cf 90       	pop	r12
    2e7c:	bf 90       	pop	r11
    2e7e:	af 90       	pop	r10
    2e80:	9f 90       	pop	r9
    2e82:	8f 90       	pop	r8
    2e84:	08 95       	ret

00002e86 <prvSwitchTimerLists>:
        }
    }
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
    2e86:	8f 92       	push	r8
    2e88:	9f 92       	push	r9
    2e8a:	af 92       	push	r10
    2e8c:	bf 92       	push	r11
    2e8e:	cf 92       	push	r12
    2e90:	df 92       	push	r13
    2e92:	ef 92       	push	r14
    2e94:	ff 92       	push	r15
    2e96:	0f 93       	push	r16
    2e98:	1f 93       	push	r17
    2e9a:	cf 93       	push	r28
    2e9c:	df 93       	push	r29

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2e9e:	3b c0       	rjmp	.+118    	; 0x2f16 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2ea0:	07 80       	ldd	r0, Z+7	; 0x07
    2ea2:	f0 85       	ldd	r31, Z+8	; 0x08
    2ea4:	e0 2d       	mov	r30, r0
    2ea6:	80 80       	ld	r8, Z
    2ea8:	91 80       	ldd	r9, Z+1	; 0x01
    2eaa:	a2 80       	ldd	r10, Z+2	; 0x02
    2eac:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2eae:	c0 85       	ldd	r28, Z+8	; 0x08
    2eb0:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2eb2:	8e 01       	movw	r16, r28
    2eb4:	0e 5f       	subi	r16, 0xFE	; 254
    2eb6:	1f 4f       	sbci	r17, 0xFF	; 255
    2eb8:	c8 01       	movw	r24, r16
    2eba:	0e 94 b3 02 	call	0x566	; 0x566 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2ebe:	ec 89       	ldd	r30, Y+20	; 0x14
    2ec0:	fd 89       	ldd	r31, Y+21	; 0x15
    2ec2:	ce 01       	movw	r24, r28
    2ec4:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2ec6:	8e 89       	ldd	r24, Y+22	; 0x16
    2ec8:	82 ff       	sbrs	r24, 2
    2eca:	25 c0       	rjmp	.+74     	; 0x2f16 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2ecc:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ece:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ed0:	a8 89       	ldd	r26, Y+16	; 0x10
    2ed2:	b9 89       	ldd	r27, Y+17	; 0x11
    2ed4:	88 0d       	add	r24, r8
    2ed6:	99 1d       	adc	r25, r9
    2ed8:	aa 1d       	adc	r26, r10
    2eda:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    2edc:	88 16       	cp	r8, r24
    2ede:	99 06       	cpc	r9, r25
    2ee0:	aa 06       	cpc	r10, r26
    2ee2:	bb 06       	cpc	r11, r27
    2ee4:	70 f4       	brcc	.+28     	; 0x2f02 <prvSwitchTimerLists+0x7c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2ee6:	8a 83       	std	Y+2, r24	; 0x02
    2ee8:	9b 83       	std	Y+3, r25	; 0x03
    2eea:	ac 83       	std	Y+4, r26	; 0x04
    2eec:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2eee:	db 87       	std	Y+11, r29	; 0x0b
    2ef0:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2ef2:	b8 01       	movw	r22, r16
    2ef4:	80 91 bf 16 	lds	r24, 0x16BF	; 0x8016bf <pxCurrentTimerList>
    2ef8:	90 91 c0 16 	lds	r25, 0x16C0	; 0x8016c0 <pxCurrentTimerList+0x1>
    2efc:	0e 94 76 02 	call	0x4ec	; 0x4ec <vListInsert>
    2f00:	0a c0       	rjmp	.+20     	; 0x2f16 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2f02:	c1 2c       	mov	r12, r1
    2f04:	d1 2c       	mov	r13, r1
    2f06:	76 01       	movw	r14, r12
    2f08:	00 e0       	ldi	r16, 0x00	; 0
    2f0a:	10 e0       	ldi	r17, 0x00	; 0
    2f0c:	a5 01       	movw	r20, r10
    2f0e:	94 01       	movw	r18, r8
    2f10:	60 e0       	ldi	r22, 0x00	; 0
    2f12:	ce 01       	movw	r24, r28
    2f14:	5a df       	rcall	.-332    	; 0x2dca <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2f16:	e0 91 bf 16 	lds	r30, 0x16BF	; 0x8016bf <pxCurrentTimerList>
    2f1a:	f0 91 c0 16 	lds	r31, 0x16C0	; 0x8016c0 <pxCurrentTimerList+0x1>
    2f1e:	80 81       	ld	r24, Z
    2f20:	81 11       	cpse	r24, r1
    2f22:	be cf       	rjmp	.-132    	; 0x2ea0 <prvSwitchTimerLists+0x1a>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2f24:	80 91 bd 16 	lds	r24, 0x16BD	; 0x8016bd <pxOverflowTimerList>
    2f28:	90 91 be 16 	lds	r25, 0x16BE	; 0x8016be <pxOverflowTimerList+0x1>
    2f2c:	90 93 c0 16 	sts	0x16C0, r25	; 0x8016c0 <pxCurrentTimerList+0x1>
    2f30:	80 93 bf 16 	sts	0x16BF, r24	; 0x8016bf <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    2f34:	f0 93 be 16 	sts	0x16BE, r31	; 0x8016be <pxOverflowTimerList+0x1>
    2f38:	e0 93 bd 16 	sts	0x16BD, r30	; 0x8016bd <pxOverflowTimerList>
    }
    2f3c:	df 91       	pop	r29
    2f3e:	cf 91       	pop	r28
    2f40:	1f 91       	pop	r17
    2f42:	0f 91       	pop	r16
    2f44:	ff 90       	pop	r15
    2f46:	ef 90       	pop	r14
    2f48:	df 90       	pop	r13
    2f4a:	cf 90       	pop	r12
    2f4c:	bf 90       	pop	r11
    2f4e:	af 90       	pop	r10
    2f50:	9f 90       	pop	r9
    2f52:	8f 90       	pop	r8
    2f54:	08 95       	ret

00002f56 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    2f56:	cf 92       	push	r12
    2f58:	df 92       	push	r13
    2f5a:	ef 92       	push	r14
    2f5c:	ff 92       	push	r15
    2f5e:	cf 93       	push	r28
    2f60:	df 93       	push	r29
    2f62:	ec 01       	movw	r28, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    2f64:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <xTaskGetTickCount>
    2f68:	6b 01       	movw	r12, r22
    2f6a:	7c 01       	movw	r14, r24

        if( xTimeNow < xLastTime )
    2f6c:	80 91 b5 16 	lds	r24, 0x16B5	; 0x8016b5 <xLastTime.2436>
    2f70:	90 91 b6 16 	lds	r25, 0x16B6	; 0x8016b6 <xLastTime.2436+0x1>
    2f74:	a0 91 b7 16 	lds	r26, 0x16B7	; 0x8016b7 <xLastTime.2436+0x2>
    2f78:	b0 91 b8 16 	lds	r27, 0x16B8	; 0x8016b8 <xLastTime.2436+0x3>
    2f7c:	c8 16       	cp	r12, r24
    2f7e:	d9 06       	cpc	r13, r25
    2f80:	ea 06       	cpc	r14, r26
    2f82:	fb 06       	cpc	r15, r27
    2f84:	20 f4       	brcc	.+8      	; 0x2f8e <prvSampleTimeNow+0x38>
        {
            prvSwitchTimerLists();
    2f86:	7f df       	rcall	.-258    	; 0x2e86 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
    2f88:	81 e0       	ldi	r24, 0x01	; 1
    2f8a:	88 83       	st	Y, r24
    2f8c:	01 c0       	rjmp	.+2      	; 0x2f90 <prvSampleTimeNow+0x3a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    2f8e:	18 82       	st	Y, r1
        }

        xLastTime = xTimeNow;
    2f90:	c0 92 b5 16 	sts	0x16B5, r12	; 0x8016b5 <xLastTime.2436>
    2f94:	d0 92 b6 16 	sts	0x16B6, r13	; 0x8016b6 <xLastTime.2436+0x1>
    2f98:	e0 92 b7 16 	sts	0x16B7, r14	; 0x8016b7 <xLastTime.2436+0x2>
    2f9c:	f0 92 b8 16 	sts	0x16B8, r15	; 0x8016b8 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    2fa0:	c7 01       	movw	r24, r14
    2fa2:	b6 01       	movw	r22, r12
    2fa4:	df 91       	pop	r29
    2fa6:	cf 91       	pop	r28
    2fa8:	ff 90       	pop	r15
    2faa:	ef 90       	pop	r14
    2fac:	df 90       	pop	r13
    2fae:	cf 90       	pop	r12
    2fb0:	08 95       	ret

00002fb2 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
    2fb2:	4f 92       	push	r4
    2fb4:	5f 92       	push	r5
    2fb6:	6f 92       	push	r6
    2fb8:	7f 92       	push	r7
    2fba:	8f 92       	push	r8
    2fbc:	9f 92       	push	r9
    2fbe:	af 92       	push	r10
    2fc0:	bf 92       	push	r11
    2fc2:	cf 92       	push	r12
    2fc4:	df 92       	push	r13
    2fc6:	ef 92       	push	r14
    2fc8:	ff 92       	push	r15
    2fca:	0f 93       	push	r16
    2fcc:	1f 93       	push	r17
    2fce:	cf 93       	push	r28
    2fd0:	df 93       	push	r29
    2fd2:	4b 01       	movw	r8, r22
    2fd4:	5c 01       	movw	r10, r24
    2fd6:	29 01       	movw	r4, r18
    2fd8:	3a 01       	movw	r6, r20
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2fda:	e0 91 bf 16 	lds	r30, 0x16BF	; 0x8016bf <pxCurrentTimerList>
    2fde:	f0 91 c0 16 	lds	r31, 0x16C0	; 0x8016c0 <pxCurrentTimerList+0x1>
    2fe2:	07 80       	ldd	r0, Z+7	; 0x07
    2fe4:	f0 85       	ldd	r31, Z+8	; 0x08
    2fe6:	e0 2d       	mov	r30, r0
    2fe8:	c0 85       	ldd	r28, Z+8	; 0x08
    2fea:	d1 85       	ldd	r29, Z+9	; 0x09

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2fec:	ce 01       	movw	r24, r28
    2fee:	02 96       	adiw	r24, 0x02	; 2
    2ff0:	0e 94 b3 02 	call	0x566	; 0x566 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2ff4:	8e 89       	ldd	r24, Y+22	; 0x16
    2ff6:	82 ff       	sbrs	r24, 2
    2ff8:	1b c0       	rjmp	.+54     	; 0x3030 <prvProcessExpiredTimer+0x7e>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2ffa:	4e 85       	ldd	r20, Y+14	; 0x0e
    2ffc:	5f 85       	ldd	r21, Y+15	; 0x0f
    2ffe:	68 89       	ldd	r22, Y+16	; 0x10
    3000:	79 89       	ldd	r23, Y+17	; 0x11
    3002:	48 0d       	add	r20, r8
    3004:	59 1d       	adc	r21, r9
    3006:	6a 1d       	adc	r22, r10
    3008:	7b 1d       	adc	r23, r11
    300a:	75 01       	movw	r14, r10
    300c:	64 01       	movw	r12, r8
    300e:	93 01       	movw	r18, r6
    3010:	82 01       	movw	r16, r4
    3012:	ce 01       	movw	r24, r28
    3014:	47 de       	rcall	.-882    	; 0x2ca4 <prvInsertTimerInActiveList>
    3016:	88 23       	and	r24, r24
    3018:	69 f0       	breq	.+26     	; 0x3034 <prvProcessExpiredTimer+0x82>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    301a:	c1 2c       	mov	r12, r1
    301c:	d1 2c       	mov	r13, r1
    301e:	76 01       	movw	r14, r12
    3020:	00 e0       	ldi	r16, 0x00	; 0
    3022:	10 e0       	ldi	r17, 0x00	; 0
    3024:	a5 01       	movw	r20, r10
    3026:	94 01       	movw	r18, r8
    3028:	60 e0       	ldi	r22, 0x00	; 0
    302a:	ce 01       	movw	r24, r28
    302c:	ce de       	rcall	.-612    	; 0x2dca <xTimerGenericCommand>
    302e:	02 c0       	rjmp	.+4      	; 0x3034 <prvProcessExpiredTimer+0x82>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3030:	8e 7f       	andi	r24, 0xFE	; 254
    3032:	8e 8b       	std	Y+22, r24	; 0x16
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    3034:	ec 89       	ldd	r30, Y+20	; 0x14
    3036:	fd 89       	ldd	r31, Y+21	; 0x15
    3038:	ce 01       	movw	r24, r28
    303a:	19 95       	eicall
    }
    303c:	df 91       	pop	r29
    303e:	cf 91       	pop	r28
    3040:	1f 91       	pop	r17
    3042:	0f 91       	pop	r16
    3044:	ff 90       	pop	r15
    3046:	ef 90       	pop	r14
    3048:	df 90       	pop	r13
    304a:	cf 90       	pop	r12
    304c:	bf 90       	pop	r11
    304e:	af 90       	pop	r10
    3050:	9f 90       	pop	r9
    3052:	8f 90       	pop	r8
    3054:	7f 90       	pop	r7
    3056:	6f 90       	pop	r6
    3058:	5f 90       	pop	r5
    305a:	4f 90       	pop	r4
    305c:	08 95       	ret

0000305e <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
    305e:	8f 92       	push	r8
    3060:	9f 92       	push	r9
    3062:	af 92       	push	r10
    3064:	bf 92       	push	r11
    3066:	cf 92       	push	r12
    3068:	df 92       	push	r13
    306a:	ef 92       	push	r14
    306c:	ff 92       	push	r15
    306e:	1f 93       	push	r17
    3070:	cf 93       	push	r28
    3072:	df 93       	push	r29
    3074:	1f 92       	push	r1
    3076:	cd b7       	in	r28, 0x3d	; 61
    3078:	de b7       	in	r29, 0x3e	; 62
    307a:	6b 01       	movw	r12, r22
    307c:	7c 01       	movw	r14, r24
    307e:	14 2f       	mov	r17, r20
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
    3080:	0e 94 58 0d 	call	0x1ab0	; 0x1ab0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3084:	ce 01       	movw	r24, r28
    3086:	01 96       	adiw	r24, 0x01	; 1
    3088:	66 df       	rcall	.-308    	; 0x2f56 <prvSampleTimeNow>
    308a:	4b 01       	movw	r8, r22
    308c:	5c 01       	movw	r10, r24

            if( xTimerListsWereSwitched == pdFALSE )
    308e:	89 81       	ldd	r24, Y+1	; 0x01
    3090:	81 11       	cpse	r24, r1
    3092:	2d c0       	rjmp	.+90     	; 0x30ee <prvProcessTimerOrBlockTask+0x90>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    3094:	11 11       	cpse	r17, r1
    3096:	0d c0       	rjmp	.+26     	; 0x30b2 <prvProcessTimerOrBlockTask+0x54>
    3098:	8c 14       	cp	r8, r12
    309a:	9d 04       	cpc	r9, r13
    309c:	ae 04       	cpc	r10, r14
    309e:	bf 04       	cpc	r11, r15
    30a0:	40 f0       	brcs	.+16     	; 0x30b2 <prvProcessTimerOrBlockTask+0x54>
                {
                    ( void ) xTaskResumeAll();
    30a2:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
    30a6:	a5 01       	movw	r20, r10
    30a8:	94 01       	movw	r18, r8
    30aa:	c7 01       	movw	r24, r14
    30ac:	b6 01       	movw	r22, r12
    30ae:	81 df       	rcall	.-254    	; 0x2fb2 <prvProcessExpiredTimer>
    30b0:	20 c0       	rjmp	.+64     	; 0x30f2 <prvProcessTimerOrBlockTask+0x94>
                     * time has not been reached yet.  This task should therefore
                     * block to wait for the next expire time or a command to be
                     * received - whichever comes first.  The following line cannot
                     * be reached unless xNextExpireTime > xTimeNow, except in the
                     * case when the current timer list is empty. */
                    if( xListWasEmpty != pdFALSE )
    30b2:	11 23       	and	r17, r17
    30b4:	41 f0       	breq	.+16     	; 0x30c6 <prvProcessTimerOrBlockTask+0x68>
                    {
                        /* The current timer list is empty - is the overflow list
                         * also empty? */
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    30b6:	e0 91 bd 16 	lds	r30, 0x16BD	; 0x8016bd <pxOverflowTimerList>
    30ba:	f0 91 be 16 	lds	r31, 0x16BE	; 0x8016be <pxOverflowTimerList+0x1>
    30be:	80 81       	ld	r24, Z
    30c0:	11 e0       	ldi	r17, 0x01	; 1
    30c2:	81 11       	cpse	r24, r1
    30c4:	10 e0       	ldi	r17, 0x00	; 0
                    }

                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    30c6:	b7 01       	movw	r22, r14
    30c8:	a6 01       	movw	r20, r12
    30ca:	48 19       	sub	r20, r8
    30cc:	59 09       	sbc	r21, r9
    30ce:	6a 09       	sbc	r22, r10
    30d0:	7b 09       	sbc	r23, r11
    30d2:	21 2f       	mov	r18, r17
    30d4:	80 91 bb 16 	lds	r24, 0x16BB	; 0x8016bb <xTimerQueue>
    30d8:	90 91 bc 16 	lds	r25, 0x16BC	; 0x8016bc <xTimerQueue+0x1>
    30dc:	0e 94 72 07 	call	0xee4	; 0xee4 <vQueueWaitForMessageRestricted>

                    if( xTaskResumeAll() == pdFALSE )
    30e0:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <xTaskResumeAll>
    30e4:	81 11       	cpse	r24, r1
    30e6:	05 c0       	rjmp	.+10     	; 0x30f2 <prvProcessTimerOrBlockTask+0x94>
                    {
                        /* Yield to wait for either a command to arrive, or the
                         * block time to expire.  If a command arrived between the
                         * critical section being exited and this yield then the yield
                         * will not cause the task to block. */
                        portYIELD_WITHIN_API();
    30e8:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>
    30ec:	02 c0       	rjmp	.+4      	; 0x30f2 <prvProcessTimerOrBlockTask+0x94>
                    }
                }
            }
            else
            {
                ( void ) xTaskResumeAll();
    30ee:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <xTaskResumeAll>
            }
        }
    }
    30f2:	0f 90       	pop	r0
    30f4:	df 91       	pop	r29
    30f6:	cf 91       	pop	r28
    30f8:	1f 91       	pop	r17
    30fa:	ff 90       	pop	r15
    30fc:	ef 90       	pop	r14
    30fe:	df 90       	pop	r13
    3100:	cf 90       	pop	r12
    3102:	bf 90       	pop	r11
    3104:	af 90       	pop	r10
    3106:	9f 90       	pop	r9
    3108:	8f 90       	pop	r8
    310a:	08 95       	ret

0000310c <prvProcessReceivedCommands>:
        return xProcessTimerNow;
    }
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
    310c:	af 92       	push	r10
    310e:	bf 92       	push	r11
    3110:	cf 92       	push	r12
    3112:	df 92       	push	r13
    3114:	ef 92       	push	r14
    3116:	ff 92       	push	r15
    3118:	0f 93       	push	r16
    311a:	1f 93       	push	r17
    311c:	cf 93       	push	r28
    311e:	df 93       	push	r29
    3120:	cd b7       	in	r28, 0x3d	; 61
    3122:	de b7       	in	r29, 0x3e	; 62
    3124:	28 97       	sbiw	r28, 0x08	; 8
    3126:	0f b6       	in	r0, 0x3f	; 63
    3128:	f8 94       	cli
    312a:	de bf       	out	0x3e, r29	; 62
    312c:	0f be       	out	0x3f, r0	; 63
    312e:	cd bf       	out	0x3d, r28	; 61
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3130:	82 c0       	rjmp	.+260    	; 0x3236 <prvProcessReceivedCommands+0x12a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    3132:	89 81       	ldd	r24, Y+1	; 0x01
    3134:	88 23       	and	r24, r24
    3136:	0c f4       	brge	.+2      	; 0x313a <prvProcessReceivedCommands+0x2e>
    3138:	7e c0       	rjmp	.+252    	; 0x3236 <prvProcessReceivedCommands+0x12a>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
    313a:	ae 80       	ldd	r10, Y+6	; 0x06
    313c:	bf 80       	ldd	r11, Y+7	; 0x07

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
    313e:	d5 01       	movw	r26, r10
    3140:	1c 96       	adiw	r26, 0x0c	; 12
    3142:	8d 91       	ld	r24, X+
    3144:	9c 91       	ld	r25, X
    3146:	1d 97       	sbiw	r26, 0x0d	; 13
    3148:	89 2b       	or	r24, r25
    314a:	21 f0       	breq	.+8      	; 0x3154 <prvProcessReceivedCommands+0x48>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    314c:	c5 01       	movw	r24, r10
    314e:	02 96       	adiw	r24, 0x02	; 2
    3150:	0e 94 b3 02 	call	0x566	; 0x566 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    3154:	ce 01       	movw	r24, r28
    3156:	08 96       	adiw	r24, 0x08	; 8
    3158:	fe de       	rcall	.-516    	; 0x2f56 <prvSampleTimeNow>
    315a:	8b 01       	movw	r16, r22
    315c:	9c 01       	movw	r18, r24

                switch( xMessage.xMessageID )
    315e:	e9 81       	ldd	r30, Y+1	; 0x01
    3160:	0e 2e       	mov	r0, r30
    3162:	00 0c       	add	r0, r0
    3164:	ff 0b       	sbc	r31, r31
    3166:	ea 30       	cpi	r30, 0x0A	; 10
    3168:	f1 05       	cpc	r31, r1
    316a:	08 f0       	brcs	.+2      	; 0x316e <prvProcessReceivedCommands+0x62>
    316c:	64 c0       	rjmp	.+200    	; 0x3236 <prvProcessReceivedCommands+0x12a>
    316e:	88 27       	eor	r24, r24
    3170:	ee 58       	subi	r30, 0x8E	; 142
    3172:	ff 4f       	sbci	r31, 0xFF	; 255
    3174:	8f 4f       	sbci	r24, 0xFF	; 255
    3176:	0c 94 37 2e 	jmp	0x5c6e	; 0x5c6e <__tablejump2__>
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    317a:	f5 01       	movw	r30, r10
    317c:	86 89       	ldd	r24, Z+22	; 0x16
    317e:	81 60       	ori	r24, 0x01	; 1
    3180:	86 8b       	std	Z+22, r24	; 0x16

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    3182:	ca 80       	ldd	r12, Y+2	; 0x02
    3184:	db 80       	ldd	r13, Y+3	; 0x03
    3186:	ec 80       	ldd	r14, Y+4	; 0x04
    3188:	fd 80       	ldd	r15, Y+5	; 0x05
    318a:	46 85       	ldd	r20, Z+14	; 0x0e
    318c:	57 85       	ldd	r21, Z+15	; 0x0f
    318e:	60 89       	ldd	r22, Z+16	; 0x10
    3190:	71 89       	ldd	r23, Z+17	; 0x11
    3192:	4c 0d       	add	r20, r12
    3194:	5d 1d       	adc	r21, r13
    3196:	6e 1d       	adc	r22, r14
    3198:	7f 1d       	adc	r23, r15
    319a:	c5 01       	movw	r24, r10
    319c:	83 dd       	rcall	.-1274   	; 0x2ca4 <prvInsertTimerInActiveList>
    319e:	88 23       	and	r24, r24
    31a0:	09 f4       	brne	.+2      	; 0x31a4 <prvProcessReceivedCommands+0x98>
    31a2:	49 c0       	rjmp	.+146    	; 0x3236 <prvProcessReceivedCommands+0x12a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    31a4:	d5 01       	movw	r26, r10
    31a6:	54 96       	adiw	r26, 0x14	; 20
    31a8:	ed 91       	ld	r30, X+
    31aa:	fc 91       	ld	r31, X
    31ac:	55 97       	sbiw	r26, 0x15	; 21
    31ae:	c5 01       	movw	r24, r10
    31b0:	19 95       	eicall
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    31b2:	f5 01       	movw	r30, r10
    31b4:	86 89       	ldd	r24, Z+22	; 0x16
    31b6:	82 ff       	sbrs	r24, 2
    31b8:	3e c0       	rjmp	.+124    	; 0x3236 <prvProcessReceivedCommands+0x12a>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    31ba:	4a 81       	ldd	r20, Y+2	; 0x02
    31bc:	5b 81       	ldd	r21, Y+3	; 0x03
    31be:	6c 81       	ldd	r22, Y+4	; 0x04
    31c0:	7d 81       	ldd	r23, Y+5	; 0x05
    31c2:	86 85       	ldd	r24, Z+14	; 0x0e
    31c4:	97 85       	ldd	r25, Z+15	; 0x0f
    31c6:	a0 89       	ldd	r26, Z+16	; 0x10
    31c8:	b1 89       	ldd	r27, Z+17	; 0x11
    31ca:	9a 01       	movw	r18, r20
    31cc:	ab 01       	movw	r20, r22
    31ce:	28 0f       	add	r18, r24
    31d0:	39 1f       	adc	r19, r25
    31d2:	4a 1f       	adc	r20, r26
    31d4:	5b 1f       	adc	r21, r27
    31d6:	c1 2c       	mov	r12, r1
    31d8:	d1 2c       	mov	r13, r1
    31da:	76 01       	movw	r14, r12
    31dc:	00 e0       	ldi	r16, 0x00	; 0
    31de:	10 e0       	ldi	r17, 0x00	; 0
    31e0:	60 e0       	ldi	r22, 0x00	; 0
    31e2:	c5 01       	movw	r24, r10
    31e4:	f2 dd       	rcall	.-1052   	; 0x2dca <xTimerGenericCommand>
    31e6:	27 c0       	rjmp	.+78     	; 0x3236 <prvProcessReceivedCommands+0x12a>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    31e8:	d5 01       	movw	r26, r10
    31ea:	56 96       	adiw	r26, 0x16	; 22
    31ec:	8c 91       	ld	r24, X
    31ee:	56 97       	sbiw	r26, 0x16	; 22
    31f0:	8e 7f       	andi	r24, 0xFE	; 254
    31f2:	56 96       	adiw	r26, 0x16	; 22
    31f4:	8c 93       	st	X, r24
                        break;
    31f6:	1f c0       	rjmp	.+62     	; 0x3236 <prvProcessReceivedCommands+0x12a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    31f8:	f5 01       	movw	r30, r10
    31fa:	86 89       	ldd	r24, Z+22	; 0x16
    31fc:	81 60       	ori	r24, 0x01	; 1
    31fe:	86 8b       	std	Z+22, r24	; 0x16
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    3200:	4a 81       	ldd	r20, Y+2	; 0x02
    3202:	5b 81       	ldd	r21, Y+3	; 0x03
    3204:	6c 81       	ldd	r22, Y+4	; 0x04
    3206:	7d 81       	ldd	r23, Y+5	; 0x05
    3208:	46 87       	std	Z+14, r20	; 0x0e
    320a:	57 87       	std	Z+15, r21	; 0x0f
    320c:	60 8b       	std	Z+16, r22	; 0x10
    320e:	71 8b       	std	Z+17, r23	; 0x11
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    3210:	40 0f       	add	r20, r16
    3212:	51 1f       	adc	r21, r17
    3214:	62 1f       	adc	r22, r18
    3216:	73 1f       	adc	r23, r19
    3218:	68 01       	movw	r12, r16
    321a:	79 01       	movw	r14, r18
    321c:	c5 01       	movw	r24, r10
    321e:	42 dd       	rcall	.-1404   	; 0x2ca4 <prvInsertTimerInActiveList>
                        break;
    3220:	0a c0       	rjmp	.+20     	; 0x3236 <prvProcessReceivedCommands+0x12a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    3222:	f5 01       	movw	r30, r10
    3224:	86 89       	ldd	r24, Z+22	; 0x16
    3226:	81 fd       	sbrc	r24, 1
    3228:	04 c0       	rjmp	.+8      	; 0x3232 <prvProcessReceivedCommands+0x126>
                                {
                                    vPortFree( pxTimer );
    322a:	c5 01       	movw	r24, r10
    322c:	0e 94 24 02 	call	0x448	; 0x448 <vPortFree>
    3230:	02 c0       	rjmp	.+4      	; 0x3236 <prvProcessReceivedCommands+0x12a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    3232:	8e 7f       	andi	r24, 0xFE	; 254
    3234:	86 8b       	std	Z+22, r24	; 0x16
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    3236:	20 e0       	ldi	r18, 0x00	; 0
    3238:	30 e0       	ldi	r19, 0x00	; 0
    323a:	a9 01       	movw	r20, r18
    323c:	be 01       	movw	r22, r28
    323e:	6f 5f       	subi	r22, 0xFF	; 255
    3240:	7f 4f       	sbci	r23, 0xFF	; 255
    3242:	80 91 bb 16 	lds	r24, 0x16BB	; 0x8016bb <xTimerQueue>
    3246:	90 91 bc 16 	lds	r25, 0x16BC	; 0x8016bc <xTimerQueue+0x1>
    324a:	0e 94 32 06 	call	0xc64	; 0xc64 <xQueueReceive>
    324e:	81 11       	cpse	r24, r1
    3250:	70 cf       	rjmp	.-288    	; 0x3132 <prvProcessReceivedCommands+0x26>
                        /* Don't expect to get here. */
                        break;
                }
            }
        }
    }
    3252:	28 96       	adiw	r28, 0x08	; 8
    3254:	0f b6       	in	r0, 0x3f	; 63
    3256:	f8 94       	cli
    3258:	de bf       	out	0x3e, r29	; 62
    325a:	0f be       	out	0x3f, r0	; 63
    325c:	cd bf       	out	0x3d, r28	; 61
    325e:	df 91       	pop	r29
    3260:	cf 91       	pop	r28
    3262:	1f 91       	pop	r17
    3264:	0f 91       	pop	r16
    3266:	ff 90       	pop	r15
    3268:	ef 90       	pop	r14
    326a:	df 90       	pop	r13
    326c:	cf 90       	pop	r12
    326e:	bf 90       	pop	r11
    3270:	af 90       	pop	r10
    3272:	08 95       	ret

00003274 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    3274:	08 95       	ret

00003276 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3276:	84 b1       	in	r24, 0x04	; 4
    3278:	80 68       	ori	r24, 0x80	; 128
    327a:	84 b9       	out	0x04, r24	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    327c:	85 b1       	in	r24, 0x05	; 5
    327e:	80 68       	ori	r24, 0x80	; 128
    3280:	85 b9       	out	0x05, r24	; 5
    3282:	08 95       	ret

00003284 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3284:	83 b1       	in	r24, 0x03	; 3
    3286:	80 68       	ori	r24, 0x80	; 128
    3288:	83 b9       	out	0x03, r24	; 3
    328a:	08 95       	ret

0000328c <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    328c:	f4 df       	rcall	.-24     	; 0x3276 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    328e:	2f ef       	ldi	r18, 0xFF	; 255
    3290:	80 e7       	ldi	r24, 0x70	; 112
    3292:	92 e0       	ldi	r25, 0x02	; 2
    3294:	21 50       	subi	r18, 0x01	; 1
    3296:	80 40       	sbci	r24, 0x00	; 0
    3298:	90 40       	sbci	r25, 0x00	; 0
    329a:	e1 f7       	brne	.-8      	; 0x3294 <vApplicationMallocFailedHook+0x8>
    329c:	00 c0       	rjmp	.+0      	; 0x329e <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    329e:	00 00       	nop
    32a0:	f1 df       	rcall	.-30     	; 0x3284 <prvBlinkMainLed>
    32a2:	f5 cf       	rjmp	.-22     	; 0x328e <vApplicationMallocFailedHook+0x2>

000032a4 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    32a4:	e8 df       	rcall	.-48     	; 0x3276 <prvSetMainLedOn>
    32a6:	2f ef       	ldi	r18, 0xFF	; 255
    32a8:	87 ea       	ldi	r24, 0xA7	; 167
    32aa:	91 e6       	ldi	r25, 0x61	; 97
    32ac:	21 50       	subi	r18, 0x01	; 1
    32ae:	80 40       	sbci	r24, 0x00	; 0
    32b0:	90 40       	sbci	r25, 0x00	; 0
    32b2:	e1 f7       	brne	.-8      	; 0x32ac <vApplicationStackOverflowHook+0x8>
    32b4:	00 c0       	rjmp	.+0      	; 0x32b6 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    32b6:	00 00       	nop
    32b8:	e5 df       	rcall	.-54     	; 0x3284 <prvBlinkMainLed>
    32ba:	f5 cf       	rjmp	.-22     	; 0x32a6 <vApplicationStackOverflowHook+0x2>

000032bc <_lora_setup>:
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}

static void _lora_setup(void)
{
    32bc:	0f 93       	push	r16
    32be:	1f 93       	push	r17
    32c0:	cf 93       	push	r28
    32c2:	df 93       	push	r29
    32c4:	cd b7       	in	r28, 0x3d	; 61
    32c6:	de b7       	in	r29, 0x3e	; 62
    32c8:	64 97       	sbiw	r28, 0x14	; 20
    32ca:	0f b6       	in	r0, 0x3f	; 63
    32cc:	f8 94       	cli
    32ce:	de bf       	out	0x3e, r29	; 62
    32d0:	0f be       	out	0x3f, r0	; 63
    32d2:	cd bf       	out	0x3d, r28	; 61
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    32d4:	81 e0       	ldi	r24, 0x01	; 1
    32d6:	0e 94 08 2a 	call	0x5410	; 0x5410 <status_leds_slowBlink>
	
	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    32da:	a9 d5       	rcall	.+2898   	; 0x3e2e <lora_driver_rn2483FactoryReset>
    32dc:	0e 94 94 21 	call	0x4328	; 0x4328 <lora_driver_mapReturnCodeToText>
    32e0:	9f 93       	push	r25
    32e2:	8f 93       	push	r24
    32e4:	8c e7       	ldi	r24, 0x7C	; 124
    32e6:	92 e0       	ldi	r25, 0x02	; 2
    32e8:	9f 93       	push	r25
    32ea:	8f 93       	push	r24
    32ec:	0e 94 dd 2f 	call	0x5fba	; 0x5fba <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    32f0:	1c d7       	rcall	.+3640   	; 0x412a <lora_driver_configureToEu868>
    32f2:	0e 94 94 21 	call	0x4328	; 0x4328 <lora_driver_mapReturnCodeToText>
    32f6:	9f 93       	push	r25
    32f8:	8f 93       	push	r24
    32fa:	8f e8       	ldi	r24, 0x8F	; 143
    32fc:	92 e0       	ldi	r25, 0x02	; 2
    32fe:	9f 93       	push	r25
    3300:	8f 93       	push	r24
    3302:	0e 94 dd 2f 	call	0x5fba	; 0x5fba <printf>
    3306:	8e 01       	movw	r16, r28

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    3308:	0f 5f       	subi	r16, 0xFF	; 255
    330a:	1f 4f       	sbci	r17, 0xFF	; 255
    330c:	c8 01       	movw	r24, r16
    330e:	a1 d5       	rcall	.+2882   	; 0x3e52 <lora_driver_getRn2483Hweui>
    3310:	0e 94 94 21 	call	0x4328	; 0x4328 <lora_driver_mapReturnCodeToText>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3314:	1f 93       	push	r17
    3316:	0f 93       	push	r16
    3318:	9f 93       	push	r25
    331a:	8f 93       	push	r24
    331c:	88 ea       	ldi	r24, 0xA8	; 168
    331e:	92 e0       	ldi	r25, 0x02	; 2
    3320:	9f 93       	push	r25
    3322:	8f 93       	push	r24
    3324:	0e 94 dd 2f 	call	0x5fba	; 0x5fba <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3328:	c8 01       	movw	r24, r16
    332a:	af d5       	rcall	.+2910   	; 0x3e8a <lora_driver_setDeviceIdentifier>
    332c:	fd d7       	rcall	.+4090   	; 0x4328 <lora_driver_mapReturnCodeToText>
    332e:	9f 93       	push	r25
    3330:	8f 93       	push	r24
    3332:	1f 93       	push	r17
    3334:	0f 93       	push	r16
    3336:	8c eb       	ldi	r24, 0xBC	; 188
    3338:	92 e0       	ldi	r25, 0x02	; 2
    333a:	9f 93       	push	r25
    333c:	8f 93       	push	r24
    333e:	0e 94 dd 2f 	call	0x5fba	; 0x5fba <printf>
    3342:	a8 01       	movw	r20, r16
    3344:	61 ed       	ldi	r22, 0xD1	; 209

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    3346:	72 e0       	ldi	r23, 0x02	; 2
    3348:	82 ef       	ldi	r24, 0xF2	; 242
    334a:	92 e0       	ldi	r25, 0x02	; 2
    334c:	cc d7       	rcall	.+3992   	; 0x42e6 <lora_driver_setOtaaIdentity>
    334e:	ec d7       	rcall	.+4056   	; 0x4328 <lora_driver_mapReturnCodeToText>
    3350:	9f 93       	push	r25
    3352:	8f 93       	push	r24
    3354:	1f 93       	push	r17
    3356:	0f 93       	push	r16
    3358:	81 ed       	ldi	r24, 0xD1	; 209
    335a:	92 e0       	ldi	r25, 0x02	; 2
    335c:	9f 93       	push	r25
    335e:	8f 93       	push	r24
    3360:	82 ef       	ldi	r24, 0xF2	; 242
    3362:	92 e0       	ldi	r25, 0x02	; 2
    3364:	9f 93       	push	r25
    3366:	8f 93       	push	r24
    3368:	83 e0       	ldi	r24, 0x03	; 3
    336a:	93 e0       	ldi	r25, 0x03	; 3
    336c:	9f 93       	push	r25
    336e:	8f 93       	push	r24
    3370:	0e 94 dd 2f 	call	0x5fba	; 0x5fba <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    3374:	bd d5       	rcall	.+2938   	; 0x3ef0 <lora_driver_saveMac>
    3376:	d8 d7       	rcall	.+4016   	; 0x4328 <lora_driver_mapReturnCodeToText>
    3378:	9f 93       	push	r25
    337a:	8f 93       	push	r24
    337c:	89 e3       	ldi	r24, 0x39	; 57
    337e:	93 e0       	ldi	r25, 0x03	; 3
    3380:	9f 93       	push	r25
    3382:	8f 93       	push	r24
    3384:	0e 94 dd 2f 	call	0x5fba	; 0x5fba <printf>
    3388:	0f b6       	in	r0, 0x3f	; 63

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    338a:	f8 94       	cli
    338c:	de bf       	out	0x3e, r29	; 62
    338e:	0f be       	out	0x3f, r0	; 63
    3390:	cd bf       	out	0x3d, r28	; 61
    3392:	81 e0       	ldi	r24, 0x01	; 1
    3394:	a7 d6       	rcall	.+3406   	; 0x40e4 <lora_driver_setAdaptiveDataRate>
    3396:	c8 d7       	rcall	.+3984   	; 0x4328 <lora_driver_mapReturnCodeToText>
    3398:	9f 93       	push	r25
    339a:	8f 93       	push	r24
    339c:	88 e4       	ldi	r24, 0x48	; 72
    339e:	93 e0       	ldi	r25, 0x03	; 3
    33a0:	9f 93       	push	r25
    33a2:	8f 93       	push	r24
    33a4:	0e 94 dd 2f 	call	0x5fba	; 0x5fba <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    33a8:	84 ef       	ldi	r24, 0xF4	; 244
    33aa:	91 e0       	ldi	r25, 0x01	; 1
    33ac:	a6 d6       	rcall	.+3404   	; 0x40fa <lora_driver_setReceiveDelay>
    33ae:	bc d7       	rcall	.+3960   	; 0x4328 <lora_driver_mapReturnCodeToText>
    33b0:	9f 93       	push	r25
    33b2:	8f 93       	push	r24
    33b4:	81 e0       	ldi	r24, 0x01	; 1
    33b6:	8f 93       	push	r24
    33b8:	84 ef       	ldi	r24, 0xF4	; 244
    33ba:	8f 93       	push	r24
    33bc:	89 e6       	ldi	r24, 0x69	; 105
    33be:	93 e0       	ldi	r25, 0x03	; 3
    33c0:	9f 93       	push	r25
    33c2:	8f 93       	push	r24
    33c4:	0e 94 dd 2f 	call	0x5fba	; 0x5fba <printf>
    33c8:	0f b6       	in	r0, 0x3f	; 63
    33ca:	f8 94       	cli
    33cc:	de bf       	out	0x3e, r29	; 62
    33ce:	0f be       	out	0x3f, r0	; 63
    33d0:	cd bf       	out	0x3d, r28	; 61

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
    33d2:	1a e0       	ldi	r17, 0x0A	; 10
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    33d4:	80 e0       	ldi	r24, 0x00	; 0
    33d6:	92 d5       	rcall	.+2852   	; 0x3efc <lora_driver_join>
    33d8:	08 2f       	mov	r16, r24
    33da:	a6 d7       	rcall	.+3916   	; 0x4328 <lora_driver_mapReturnCodeToText>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    33dc:	9f 93       	push	r25
    33de:	8f 93       	push	r24
    33e0:	1f 92       	push	r1
    33e2:	1f 93       	push	r17
    33e4:	89 e8       	ldi	r24, 0x89	; 137
    33e6:	93 e0       	ldi	r25, 0x03	; 3
    33e8:	9f 93       	push	r25
    33ea:	8f 93       	push	r24
    33ec:	0e 94 dd 2f 	call	0x5fba	; 0x5fba <printf>
    33f0:	0f 90       	pop	r0
    33f2:	0f 90       	pop	r0

		if ( rc != LORA_ACCEPTED)
    33f4:	0f 90       	pop	r0
    33f6:	0f 90       	pop	r0
    33f8:	0f 90       	pop	r0
    33fa:	0f 90       	pop	r0
    33fc:	08 30       	cpi	r16, 0x08	; 8
    33fe:	41 f0       	breq	.+16     	; 0x3410 <_lora_setup+0x154>
    3400:	66 e3       	ldi	r22, 0x36	; 54
    3402:	71 e0       	ldi	r23, 0x01	; 1
		{
			// Make the red led pulse to tell something went wrong
			//status_leds_longPuls(led_ST2); // OPTIONAL
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3404:	80 e0       	ldi	r24, 0x00	; 0
    3406:	90 e0       	ldi	r25, 0x00	; 0
    3408:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <vTaskDelay>
    340c:	11 50       	subi	r17, 0x01	; 1
    340e:	11 f7       	brne	.-60     	; 0x33d4 <_lora_setup+0x118>
		else
		{
			
			break;
		}
	} while (--maxJoinTriesLeft );
    3410:	08 30       	cpi	r16, 0x08	; 8
    3412:	39 f4       	brne	.+14     	; 0x3422 <_lora_setup+0x166>

	if (rc == LORA_ACCEPTED)
    3414:	81 e0       	ldi	r24, 0x01	; 1
    3416:	0e 94 4e 2a 	call	0x549c	; 0x549c <status_leds_ledOn>
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    341a:	89 ea       	ldi	r24, 0xA9	; 169
    341c:	93 e0       	ldi	r25, 0x03	; 3
		printf("Lora wan accpeted!\n");
    341e:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <puts>
    3422:	64 96       	adiw	r28, 0x14	; 20
    3424:	0f b6       	in	r0, 0x3f	; 63
	}
}
    3426:	f8 94       	cli
    3428:	de bf       	out	0x3e, r29	; 62
    342a:	0f be       	out	0x3f, r0	; 63
    342c:	cd bf       	out	0x3d, r28	; 61
    342e:	df 91       	pop	r29
    3430:	cf 91       	pop	r28
    3432:	1f 91       	pop	r17
    3434:	0f 91       	pop	r16
    3436:	08 95       	ret

00003438 <lora_handler_task>:
    3438:	81 e0       	ldi	r24, 0x01	; 1
    343a:	eb d4       	rcall	.+2518   	; 0x3e12 <lora_driver_resetRn2483>
/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
	vTaskDelay(2);
    343c:	62 e0       	ldi	r22, 0x02	; 2
    343e:	70 e0       	ldi	r23, 0x00	; 0
    3440:	80 e0       	ldi	r24, 0x00	; 0
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <vTaskDelay>
	lora_driver_resetRn2483(0);
    3448:	80 e0       	ldi	r24, 0x00	; 0
    344a:	e3 d4       	rcall	.+2502   	; 0x3e12 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    344c:	66 e9       	ldi	r22, 0x96	; 150
    344e:	70 e0       	ldi	r23, 0x00	; 0
    3450:	80 e0       	ldi	r24, 0x00	; 0
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <vTaskDelay>
	
	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    3458:	95 d4       	rcall	.+2346   	; 0x3d84 <lora_driver_flushBuffers>

	_lora_setup();
    345a:	30 df       	rcall	.-416    	; 0x32bc <_lora_setup>
    345c:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>
	
	for(;;)
	{
		taskYIELD();
    3460:	fd cf       	rjmp	.-6      	; 0x345c <lora_handler_task+0x24>

00003462 <lora_handler_initialise>:
    3462:	ef 92       	push	r14
void lora_handler_task( void *pvParameters );

static lora_driver_payload_t _uplink_payload;

void lora_handler_initialise(UBaseType_t lora_handler_task_priority)
{
    3464:	ff 92       	push	r15
    3466:	0f 93       	push	r16
	
	xTaskCreate(
    3468:	e1 2c       	mov	r14, r1
    346a:	f1 2c       	mov	r15, r1
    346c:	08 2f       	mov	r16, r24
    346e:	20 e0       	ldi	r18, 0x00	; 0
    3470:	30 e0       	ldi	r19, 0x00	; 0
    3472:	48 e8       	ldi	r20, 0x88	; 136
    3474:	51 e0       	ldi	r21, 0x01	; 1
    3476:	6c eb       	ldi	r22, 0xBC	; 188
    3478:	73 e0       	ldi	r23, 0x03	; 3
    347a:	8c e1       	ldi	r24, 0x1C	; 28
    347c:	9a e1       	ldi	r25, 0x1A	; 26
    347e:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    3482:	0f 91       	pop	r16
    3484:	ff 90       	pop	r15
    3486:	ef 90       	pop	r14
    3488:	08 95       	ret

0000348a <send_measurment>:
		taskYIELD();
	}
}


void send_measurment(measurment_t *newMeasurment){
    348a:	dc 01       	movw	r26, r24
	
	//prepare payload
	_uplink_payload.len = 6;
    348c:	e7 ed       	ldi	r30, 0xD7	; 215
    348e:	f6 e1       	ldi	r31, 0x16	; 22
    3490:	86 e0       	ldi	r24, 0x06	; 6
    3492:	81 83       	std	Z+1, r24	; 0x01
	_uplink_payload.portNo = 2;
    3494:	82 e0       	ldi	r24, 0x02	; 2
    3496:	80 83       	st	Z, r24
	
	//extract data from measurment
	int16_t temp = newMeasurment->tempratur;
    3498:	4c 91       	ld	r20, X
    349a:	11 96       	adiw	r26, 0x01	; 1
    349c:	5c 91       	ld	r21, X
    349e:	11 97       	sbiw	r26, 0x01	; 1
	uint16_t hum = newMeasurment->humidity;
    34a0:	12 96       	adiw	r26, 0x02	; 2
    34a2:	2c 91       	ld	r18, X
    34a4:	12 97       	sbiw	r26, 0x02	; 2
    34a6:	13 96       	adiw	r26, 0x03	; 3
    34a8:	3c 91       	ld	r19, X
    34aa:	13 97       	sbiw	r26, 0x03	; 3
	uint16_t co2_ppm = newMeasurment->co2_ppm;
    34ac:	14 96       	adiw	r26, 0x04	; 4
    34ae:	8c 91       	ld	r24, X
    34b0:	14 97       	sbiw	r26, 0x04	; 4
    34b2:	15 96       	adiw	r26, 0x05	; 5
    34b4:	9c 91       	ld	r25, X

	// format data into bytes (two for each value)
	_uplink_payload.bytes[0] = temp >> 8;
    34b6:	52 83       	std	Z+2, r21	; 0x02
	_uplink_payload.bytes[1] = temp & 0xFF;
    34b8:	43 83       	std	Z+3, r20	; 0x03

	_uplink_payload.bytes[2] = hum >> 8;
    34ba:	34 83       	std	Z+4, r19	; 0x04
	_uplink_payload.bytes[3] = hum & 0xFF;
    34bc:	25 83       	std	Z+5, r18	; 0x05
	
	_uplink_payload.bytes[4] = co2_ppm >> 8;
    34be:	96 83       	std	Z+6, r25	; 0x06
	_uplink_payload.bytes[5] = co2_ppm & 0xFF;
    34c0:	87 83       	std	Z+7, r24	; 0x07
	
	// send to loraWan using loraWan drivers
	printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    34c2:	bf 01       	movw	r22, r30
    34c4:	80 e0       	ldi	r24, 0x00	; 0
    34c6:	43 d5       	rcall	.+2694   	; 0x3f4e <lora_driver_sendUploadMessage>
    34c8:	2f d7       	rcall	.+3678   	; 0x4328 <lora_driver_mapReturnCodeToText>
    34ca:	9f 93       	push	r25
    34cc:	8f 93       	push	r24
    34ce:	83 ec       	ldi	r24, 0xC3	; 195
    34d0:	93 e0       	ldi	r25, 0x03	; 3
    34d2:	9f 93       	push	r25
    34d4:	8f 93       	push	r24
    34d6:	0e 94 dd 2f 	call	0x5fba	; 0x5fba <printf>
	
}
    34da:	0f 90       	pop	r0
    34dc:	0f 90       	pop	r0
    34de:	0f 90       	pop	r0
    34e0:	0f 90       	pop	r0
    34e2:	08 95       	ret

000034e4 <task1>:
	
}

/*-----------------------------------------------------------*/
void task1( void *pvParameters )
{
    34e4:	cf 93       	push	r28
    34e6:	df 93       	push	r29
    34e8:	00 d0       	rcall	.+0      	; 0x34ea <task1+0x6>
    34ea:	1f 92       	push	r1
    34ec:	cd b7       	in	r28, 0x3d	; 61
    34ee:	de b7       	in	r29, 0x3e	; 62
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 3000/portTICK_PERIOD_MS;

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    34f0:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <xTaskGetTickCount>
    34f4:	69 83       	std	Y+1, r22	; 0x01
    34f6:	7a 83       	std	Y+2, r23	; 0x02
    34f8:	8b 83       	std	Y+3, r24	; 0x03
    34fa:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;)
	{
		
		if (xSemaphoreTake(xTask1Semaphore, portMAX_DELAY)){
    34fc:	4f ef       	ldi	r20, 0xFF	; 255
    34fe:	5f ef       	ldi	r21, 0xFF	; 255
    3500:	ba 01       	movw	r22, r20
    3502:	80 91 55 18 	lds	r24, 0x1855	; 0x801855 <xTask1Semaphore>
    3506:	90 91 56 18 	lds	r25, 0x1856	; 0x801856 <xTask1Semaphore+0x1>
    350a:	0e 94 c1 06 	call	0xd82	; 0xd82 <xQueueSemaphoreTake>
    350e:	88 23       	and	r24, r24
    3510:	61 f0       	breq	.+24     	; 0x352a <task1+0x46>
			printf("CO2_sensor started measurment\n");
    3512:	88 ed       	ldi	r24, 0xD8	; 216
    3514:	93 e0       	ldi	r25, 0x03	; 3
    3516:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <puts>
			
			// callback function gives semaphore
			if(MHZ19_OK != mh_z19_takeMeassuring()){
    351a:	0e 94 9a 22 	call	0x4534	; 0x4534 <mh_z19_takeMeassuring>
    351e:	88 23       	and	r24, r24
    3520:	21 f0       	breq	.+8      	; 0x352a <task1+0x46>
				printf("SOmething WIthTHE CO2 Went WONG!\n");
    3522:	86 ef       	ldi	r24, 0xF6	; 246
    3524:	93 e0       	ldi	r25, 0x03	; 3
    3526:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <puts>
			}
			
		}
		
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
    352a:	4b eb       	ldi	r20, 0xBB	; 187
    352c:	50 e0       	ldi	r21, 0x00	; 0
    352e:	60 e0       	ldi	r22, 0x00	; 0
    3530:	70 e0       	ldi	r23, 0x00	; 0
    3532:	ce 01       	movw	r24, r28
    3534:	01 96       	adiw	r24, 0x01	; 1
    3536:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <xTaskDelayUntil>
	}
    353a:	e0 cf       	rjmp	.-64     	; 0x34fc <task1+0x18>

0000353c <task2>:
}

/*-----------------------------------------------------------*/
void task2( void *pvParameters )
{
    353c:	cf 93       	push	r28
    353e:	df 93       	push	r29
    3540:	00 d0       	rcall	.+0      	; 0x3542 <task2+0x6>
    3542:	1f 92       	push	r1
    3544:	cd b7       	in	r28, 0x3d	; 61
    3546:	de b7       	in	r29, 0x3e	; 62

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 3000/portTICK_PERIOD_MS;

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    3548:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <xTaskGetTickCount>
    354c:	69 83       	std	Y+1, r22	; 0x01
    354e:	7a 83       	std	Y+2, r23	; 0x02
    3550:	8b 83       	std	Y+3, r24	; 0x03
    3552:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;)
	{
		
		if (xSemaphoreTake(xTask2Semaphore, portMAX_DELAY)){
    3554:	4f ef       	ldi	r20, 0xFF	; 255
    3556:	5f ef       	ldi	r21, 0xFF	; 255
    3558:	ba 01       	movw	r22, r20
    355a:	80 91 53 18 	lds	r24, 0x1853	; 0x801853 <xTask2Semaphore>
    355e:	90 91 54 18 	lds	r25, 0x1854	; 0x801854 <xTask2Semaphore+0x1>
    3562:	0e 94 c1 06 	call	0xd82	; 0xd82 <xQueueSemaphoreTake>
    3566:	88 23       	and	r24, r24
    3568:	b9 f1       	breq	.+110    	; 0x35d8 <task2+0x9c>
			status_leds_fastBlink(led_ST3);
    356a:	82 e0       	ldi	r24, 0x02	; 2
    356c:	0e 94 2b 2a 	call	0x5456	; 0x5456 <status_leds_fastBlink>

			printf("Measure tempratur and humidity started\n");
    3570:	87 e1       	ldi	r24, 0x17	; 23
    3572:	94 e0       	ldi	r25, 0x04	; 4
    3574:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <puts>
			
			if (HIH8120_OK != hih8120_wakeup()){
    3578:	81 d2       	rcall	.+1282   	; 0x3a7c <hih8120_wakeup>
    357a:	88 23       	and	r24, r24
    357c:	21 f0       	breq	.+8      	; 0x3586 <task2+0x4a>
				printf("temp/hum did not wake up\n");
    357e:	8e e3       	ldi	r24, 0x3E	; 62
    3580:	94 e0       	ldi	r25, 0x04	; 4
    3582:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <puts>
			}
			
			xTaskDelayUntil(&xLastWakeTime,100);
    3586:	44 e6       	ldi	r20, 0x64	; 100
    3588:	50 e0       	ldi	r21, 0x00	; 0
    358a:	60 e0       	ldi	r22, 0x00	; 0
    358c:	70 e0       	ldi	r23, 0x00	; 0
    358e:	ce 01       	movw	r24, r28
    3590:	01 96       	adiw	r24, 0x01	; 1
    3592:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <xTaskDelayUntil>
			
			if (HIH8120_OK != hih8120_measure()){
    3596:	87 d2       	rcall	.+1294   	; 0x3aa6 <hih8120_measure>
    3598:	88 23       	and	r24, r24
    359a:	21 f0       	breq	.+8      	; 0x35a4 <task2+0x68>
				printf("the measurement went wrong\n");
    359c:	87 e5       	ldi	r24, 0x57	; 87
    359e:	94 e0       	ldi	r25, 0x04	; 4
    35a0:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <puts>
			}
			
			xTaskDelayUntil(&xLastWakeTime,100);
    35a4:	44 e6       	ldi	r20, 0x64	; 100
    35a6:	50 e0       	ldi	r21, 0x00	; 0
    35a8:	60 e0       	ldi	r22, 0x00	; 0
    35aa:	70 e0       	ldi	r23, 0x00	; 0
    35ac:	ce 01       	movw	r24, r28
    35ae:	01 96       	adiw	r24, 0x01	; 1
    35b0:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <xTaskDelayUntil>
			
			if(hih8120_isReady()){
    35b4:	60 d2       	rcall	.+1216   	; 0x3a76 <hih8120_isReady>
    35b6:	88 23       	and	r24, r24
    35b8:	79 f0       	breq	.+30     	; 0x35d8 <task2+0x9c>
				status_leds_ledOff(led_ST3);
    35ba:	82 e0       	ldi	r24, 0x02	; 2
    35bc:	0e 94 5d 2a 	call	0x54ba	; 0x54ba <status_leds_ledOff>
				xSemaphoreGive(xTask2Semaphore);
    35c0:	00 e0       	ldi	r16, 0x00	; 0
    35c2:	20 e0       	ldi	r18, 0x00	; 0
    35c4:	30 e0       	ldi	r19, 0x00	; 0
    35c6:	a9 01       	movw	r20, r18
    35c8:	60 e0       	ldi	r22, 0x00	; 0
    35ca:	70 e0       	ldi	r23, 0x00	; 0
    35cc:	80 91 53 18 	lds	r24, 0x1853	; 0x801853 <xTask2Semaphore>
    35d0:	90 91 54 18 	lds	r25, 0x1854	; 0x801854 <xTask2Semaphore+0x1>
    35d4:	0e 94 47 05 	call	0xa8e	; 0xa8e <xQueueGenericSend>
			}
		}
		
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
    35d8:	4b eb       	ldi	r20, 0xBB	; 187
    35da:	50 e0       	ldi	r21, 0x00	; 0
    35dc:	60 e0       	ldi	r22, 0x00	; 0
    35de:	70 e0       	ldi	r23, 0x00	; 0
    35e0:	ce 01       	movw	r24, r28
    35e2:	01 96       	adiw	r24, 0x01	; 1
    35e4:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <xTaskDelayUntil>
	}
    35e8:	b5 cf       	rjmp	.-150    	; 0x3554 <task2+0x18>

000035ea <myCo2CallBack>:
		
	}
}

void myCo2CallBack(uint16_t ppm)
{
    35ea:	0f 93       	push	r16
	xSemaphoreGive(xTask1Semaphore);
    35ec:	00 e0       	ldi	r16, 0x00	; 0
    35ee:	20 e0       	ldi	r18, 0x00	; 0
    35f0:	30 e0       	ldi	r19, 0x00	; 0
    35f2:	a9 01       	movw	r20, r18
    35f4:	60 e0       	ldi	r22, 0x00	; 0
    35f6:	70 e0       	ldi	r23, 0x00	; 0
    35f8:	80 91 55 18 	lds	r24, 0x1855	; 0x801855 <xTask1Semaphore>
    35fc:	90 91 56 18 	lds	r25, 0x1856	; 0x801856 <xTask1Semaphore+0x1>
    3600:	0e 94 47 05 	call	0xa8e	; 0xa8e <xQueueGenericSend>
}
    3604:	0f 91       	pop	r16
    3606:	08 95       	ret

00003608 <taskHandler>:
		
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
	}
}

void taskHandler( void *pvParameters) {
    3608:	cf 93       	push	r28
    360a:	df 93       	push	r29
    360c:	cd b7       	in	r28, 0x3d	; 61
    360e:	de b7       	in	r29, 0x3e	; 62
    3610:	2c 97       	sbiw	r28, 0x0c	; 12
    3612:	0f b6       	in	r0, 0x3f	; 63
    3614:	f8 94       	cli
    3616:	de bf       	out	0x3e, r29	; 62
    3618:	0f be       	out	0x3f, r0	; 63
    361a:	cd bf       	out	0x3d, r28	; 61
	
	xSemaphoreTake(xTask1Semaphore, portMAX_DELAY);
    361c:	4f ef       	ldi	r20, 0xFF	; 255
    361e:	5f ef       	ldi	r21, 0xFF	; 255
    3620:	ba 01       	movw	r22, r20
    3622:	80 91 55 18 	lds	r24, 0x1855	; 0x801855 <xTask1Semaphore>
    3626:	90 91 56 18 	lds	r25, 0x1856	; 0x801856 <xTask1Semaphore+0x1>
    362a:	0e 94 c1 06 	call	0xd82	; 0xd82 <xQueueSemaphoreTake>
	xSemaphoreTake(xTask2Semaphore, portMAX_DELAY);
    362e:	4f ef       	ldi	r20, 0xFF	; 255
    3630:	5f ef       	ldi	r21, 0xFF	; 255
    3632:	ba 01       	movw	r22, r20
    3634:	80 91 53 18 	lds	r24, 0x1853	; 0x801853 <xTask2Semaphore>
    3638:	90 91 54 18 	lds	r25, 0x1854	; 0x801854 <xTask2Semaphore+0x1>
    363c:	0e 94 c1 06 	call	0xd82	; 0xd82 <xQueueSemaphoreTake>
	
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 30000/portTICK_PERIOD_MS;

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    3640:	0e 94 5e 0d 	call	0x1abc	; 0x1abc <xTaskGetTickCount>
    3644:	69 87       	std	Y+9, r22	; 0x09
    3646:	7a 87       	std	Y+10, r23	; 0x0a
    3648:	8b 87       	std	Y+11, r24	; 0x0b
    364a:	9c 87       	std	Y+12, r25	; 0x0c
	
	for (;;)
	{
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
    364c:	43 e5       	ldi	r20, 0x53	; 83
    364e:	57 e0       	ldi	r21, 0x07	; 7
    3650:	60 e0       	ldi	r22, 0x00	; 0
    3652:	70 e0       	ldi	r23, 0x00	; 0
    3654:	ce 01       	movw	r24, r28
    3656:	09 96       	adiw	r24, 0x09	; 9
    3658:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <xTaskDelayUntil>
		
		printf("Task handler : give semaphores! \n");
    365c:	82 e7       	ldi	r24, 0x72	; 114
    365e:	94 e0       	ldi	r25, 0x04	; 4
    3660:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <puts>
		xSemaphoreGive(xTask1Semaphore);
    3664:	00 e0       	ldi	r16, 0x00	; 0
    3666:	20 e0       	ldi	r18, 0x00	; 0
    3668:	30 e0       	ldi	r19, 0x00	; 0
    366a:	a9 01       	movw	r20, r18
    366c:	60 e0       	ldi	r22, 0x00	; 0
    366e:	70 e0       	ldi	r23, 0x00	; 0
    3670:	80 91 55 18 	lds	r24, 0x1855	; 0x801855 <xTask1Semaphore>
    3674:	90 91 56 18 	lds	r25, 0x1856	; 0x801856 <xTask1Semaphore+0x1>
    3678:	0e 94 47 05 	call	0xa8e	; 0xa8e <xQueueGenericSend>
		xSemaphoreGive(xTask2Semaphore);
    367c:	20 e0       	ldi	r18, 0x00	; 0
    367e:	30 e0       	ldi	r19, 0x00	; 0
    3680:	a9 01       	movw	r20, r18
    3682:	60 e0       	ldi	r22, 0x00	; 0
    3684:	70 e0       	ldi	r23, 0x00	; 0
    3686:	80 91 53 18 	lds	r24, 0x1853	; 0x801853 <xTask2Semaphore>
    368a:	90 91 54 18 	lds	r25, 0x1854	; 0x801854 <xTask2Semaphore+0x1>
    368e:	0e 94 47 05 	call	0xa8e	; 0xa8e <xQueueGenericSend>
		
		vTaskDelay(2000);
    3692:	60 ed       	ldi	r22, 0xD0	; 208
    3694:	77 e0       	ldi	r23, 0x07	; 7
    3696:	80 e0       	ldi	r24, 0x00	; 0
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <vTaskDelay>
		
		if (xSemaphoreTake(xTask1Semaphore, portMAX_DELAY)){
    369e:	4f ef       	ldi	r20, 0xFF	; 255
    36a0:	5f ef       	ldi	r21, 0xFF	; 255
    36a2:	ba 01       	movw	r22, r20
    36a4:	80 91 55 18 	lds	r24, 0x1855	; 0x801855 <xTask1Semaphore>
    36a8:	90 91 56 18 	lds	r25, 0x1856	; 0x801856 <xTask1Semaphore+0x1>
    36ac:	0e 94 c1 06 	call	0xd82	; 0xd82 <xQueueSemaphoreTake>
    36b0:	88 23       	and	r24, r24
    36b2:	a9 f0       	breq	.+42     	; 0x36de <taskHandler+0xd6>
			mh_z19_returnCode_t return_code = mh_z19_getCo2Ppm(&co2_ppm);
    36b4:	ce 01       	movw	r24, r28
    36b6:	01 96       	adiw	r24, 0x01	; 1
    36b8:	6c d7       	rcall	.+3800   	; 0x4592 <mh_z19_getCo2Ppm>
			
			printf("co2 : %d, %d \n ",co2_ppm, return_code);
    36ba:	1f 92       	push	r1
    36bc:	8f 93       	push	r24
    36be:	8a 81       	ldd	r24, Y+2	; 0x02
    36c0:	8f 93       	push	r24
    36c2:	89 81       	ldd	r24, Y+1	; 0x01
    36c4:	8f 93       	push	r24
    36c6:	83 e9       	ldi	r24, 0x93	; 147
    36c8:	94 e0       	ldi	r25, 0x04	; 4
    36ca:	9f 93       	push	r25
    36cc:	8f 93       	push	r24
    36ce:	0e 94 dd 2f 	call	0x5fba	; 0x5fba <printf>
    36d2:	0f 90       	pop	r0
    36d4:	0f 90       	pop	r0
    36d6:	0f 90       	pop	r0
    36d8:	0f 90       	pop	r0
    36da:	0f 90       	pop	r0
    36dc:	0f 90       	pop	r0
			
		}
		
		if (xSemaphoreTake(xTask2Semaphore, portMAX_DELAY)){
    36de:	4f ef       	ldi	r20, 0xFF	; 255
    36e0:	5f ef       	ldi	r21, 0xFF	; 255
    36e2:	ba 01       	movw	r22, r20
    36e4:	80 91 53 18 	lds	r24, 0x1853	; 0x801853 <xTask2Semaphore>
    36e8:	90 91 54 18 	lds	r25, 0x1854	; 0x801854 <xTask2Semaphore+0x1>
    36ec:	0e 94 c1 06 	call	0xd82	; 0xd82 <xQueueSemaphoreTake>
    36f0:	88 23       	and	r24, r24
			
			tempratur = hih8120_getTemperature_x10();
    36f2:	d9 f0       	breq	.+54     	; 0x372a <taskHandler+0x122>
    36f4:	24 d2       	rcall	.+1096   	; 0x3b3e <hih8120_getTemperature_x10>
    36f6:	18 2f       	mov	r17, r24
    36f8:	f9 2e       	mov	r15, r25
			printf("Temp: %d \n", tempratur);
    36fa:	9f 93       	push	r25
    36fc:	8f 93       	push	r24
    36fe:	83 ea       	ldi	r24, 0xA3	; 163
    3700:	94 e0       	ldi	r25, 0x04	; 4
    3702:	9f 93       	push	r25
    3704:	8f 93       	push	r24
    3706:	0e 94 dd 2f 	call	0x5fba	; 0x5fba <printf>
			
			humidity = hih8120_getHumidityPercent_x10();
    370a:	f3 d1       	rcall	.+998    	; 0x3af2 <hih8120_getHumidityPercent_x10>
    370c:	e8 2e       	mov	r14, r24
    370e:	d9 2e       	mov	r13, r25
			printf("humidity: %d \n", humidity);
    3710:	9f 93       	push	r25
    3712:	8f 93       	push	r24
    3714:	8e ea       	ldi	r24, 0xAE	; 174
    3716:	94 e0       	ldi	r25, 0x04	; 4
    3718:	9f 93       	push	r25
    371a:	8f 93       	push	r24
    371c:	0e 94 dd 2f 	call	0x5fba	; 0x5fba <printf>
    3720:	0f b6       	in	r0, 0x3f	; 63
    3722:	f8 94       	cli
    3724:	de bf       	out	0x3e, r29	; 62
    3726:	0f be       	out	0x3f, r0	; 63
    3728:	cd bf       	out	0x3d, r28	; 61
		}
		
		measurment.co2_ppm = co2_ppm;
    372a:	89 81       	ldd	r24, Y+1	; 0x01
    372c:	9a 81       	ldd	r25, Y+2	; 0x02
    372e:	8f 83       	std	Y+7, r24	; 0x07
    3730:	98 87       	std	Y+8, r25	; 0x08
		measurment.humidity = humidity;
    3732:	ed 82       	std	Y+5, r14	; 0x05
    3734:	de 82       	std	Y+6, r13	; 0x06
		measurment.tempratur = tempratur;
    3736:	1b 83       	std	Y+3, r17	; 0x03
    3738:	fc 82       	std	Y+4, r15	; 0x04
		
		printf("measurment: temp: %d, hum: %d, co2: %d \n", measurment.tempratur,measurment.humidity,measurment.co2_ppm);
    373a:	9f 93       	push	r25
    373c:	8f 93       	push	r24
    373e:	df 92       	push	r13
    3740:	ef 92       	push	r14
    3742:	ff 92       	push	r15
    3744:	1f 93       	push	r17
    3746:	8d eb       	ldi	r24, 0xBD	; 189
    3748:	94 e0       	ldi	r25, 0x04	; 4
    374a:	9f 93       	push	r25
    374c:	8f 93       	push	r24
    374e:	0e 94 dd 2f 	call	0x5fba	; 0x5fba <printf>
		
		send_measurment(&measurment);
    3752:	ce 01       	movw	r24, r28
    3754:	03 96       	adiw	r24, 0x03	; 3
    3756:	99 de       	rcall	.-718    	; 0x348a <send_measurment>
		
		
	}
    3758:	0f b6       	in	r0, 0x3f	; 63
    375a:	f8 94       	cli
    375c:	de bf       	out	0x3e, r29	; 62
    375e:	0f be       	out	0x3f, r0	; 63
    3760:	cd bf       	out	0x3d, r28	; 61
    3762:	74 cf       	rjmp	.-280    	; 0x364c <taskHandler+0x44>

00003764 <create_tasks_and_semaphores>:
// Prototype for LoRaWAN handler
void lora_handler_initialise(UBaseType_t lora_handler_task_priority);

/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{
    3764:	ef 92       	push	r14
    3766:	ff 92       	push	r15
    3768:	0f 93       	push	r16
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTask1Semaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    376a:	80 91 55 18 	lds	r24, 0x1855	; 0x801855 <xTask1Semaphore>
    376e:	90 91 56 18 	lds	r25, 0x1856	; 0x801856 <xTask1Semaphore+0x1>
    3772:	89 2b       	or	r24, r25
    3774:	39 f4       	brne	.+14     	; 0x3784 <create_tasks_and_semaphores+0x20>
	{
		xTask1Semaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    3776:	81 e0       	ldi	r24, 0x01	; 1
    3778:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <xQueueCreateMutex>
    377c:	90 93 56 18 	sts	0x1856, r25	; 0x801856 <xTask1Semaphore+0x1>
    3780:	80 93 55 18 	sts	0x1855, r24	; 0x801855 <xTask1Semaphore>
		{
			// dont give
		}
	}

	if ( xTask2Semaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    3784:	80 91 53 18 	lds	r24, 0x1853	; 0x801853 <xTask2Semaphore>
    3788:	90 91 54 18 	lds	r25, 0x1854	; 0x801854 <xTask2Semaphore+0x1>
    378c:	89 2b       	or	r24, r25
    378e:	39 f4       	brne	.+14     	; 0x379e <create_tasks_and_semaphores+0x3a>
	{
		xTask2Semaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    3790:	81 e0       	ldi	r24, 0x01	; 1
    3792:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <xQueueCreateMutex>
    3796:	90 93 54 18 	sts	0x1854, r25	; 0x801854 <xTask2Semaphore+0x1>
    379a:	80 93 53 18 	sts	0x1853, r24	; 0x801853 <xTask2Semaphore>
			// dont give
		}
	}


	xTaskCreate(
    379e:	e1 2c       	mov	r14, r1
    37a0:	f1 2c       	mov	r15, r1
    37a2:	01 e0       	ldi	r16, 0x01	; 1
    37a4:	20 e0       	ldi	r18, 0x00	; 0
    37a6:	30 e0       	ldi	r19, 0x00	; 0
    37a8:	40 ec       	ldi	r20, 0xC0	; 192
    37aa:	50 e0       	ldi	r21, 0x00	; 0
    37ac:	66 ee       	ldi	r22, 0xE6	; 230
    37ae:	74 e0       	ldi	r23, 0x04	; 4
    37b0:	82 e7       	ldi	r24, 0x72	; 114
    37b2:	9a e1       	ldi	r25, 0x1A	; 26
    37b4:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );

	xTaskCreate(
    37b8:	20 e0       	ldi	r18, 0x00	; 0
    37ba:	30 e0       	ldi	r19, 0x00	; 0
    37bc:	40 ec       	ldi	r20, 0xC0	; 192
    37be:	50 e0       	ldi	r21, 0x00	; 0
    37c0:	61 ef       	ldi	r22, 0xF1	; 241
    37c2:	74 e0       	ldi	r23, 0x04	; 4
    37c4:	8e e9       	ldi	r24, 0x9E	; 158
    37c6:	9a e1       	ldi	r25, 0x1A	; 26
    37c8:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
	xTaskCreate(
    37cc:	02 e0       	ldi	r16, 0x02	; 2
    37ce:	20 e0       	ldi	r18, 0x00	; 0
    37d0:	30 e0       	ldi	r19, 0x00	; 0
    37d2:	40 ec       	ldi	r20, 0xC0	; 192
    37d4:	50 e0       	ldi	r21, 0x00	; 0
    37d6:	61 e0       	ldi	r22, 0x01	; 1
    37d8:	75 e0       	ldi	r23, 0x05	; 5
    37da:	84 e0       	ldi	r24, 0x04	; 4
    37dc:	9b e1       	ldi	r25, 0x1B	; 27
    37de:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  2  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
}
    37e2:	0f 91       	pop	r16
    37e4:	ff 90       	pop	r15
    37e6:	ef 90       	pop	r14
    37e8:	08 95       	ret

000037ea <initialiseSystem>:
}
/*-----------------------------------------------------------*/
void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    37ea:	81 b1       	in	r24, 0x01	; 1
    37ec:	81 68       	ori	r24, 0x81	; 129
    37ee:	81 b9       	out	0x01, r24	; 1

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    37f0:	80 e0       	ldi	r24, 0x00	; 0
    37f2:	0e 94 98 26 	call	0x4d30	; 0x4d30 <stdio_initialise>
	// maybe sei() ? for global interrupts
	// Let's create some tasks
	create_tasks_and_semaphores();
    37f6:	b6 df       	rcall	.-148    	; 0x3764 <create_tasks_and_semaphores>

	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    37f8:	85 e0       	ldi	r24, 0x05	; 5
    37fa:	0e 94 ba 29 	call	0x5374	; 0x5374 <status_leds_initialise>
	// Initialize the LoRaWAN driver without down-link buffer
	lora_driver_initialise(1, NULL);
    37fe:	60 e0       	ldi	r22, 0x00	; 0
    3800:	70 e0       	ldi	r23, 0x00	; 0
    3802:	81 e0       	ldi	r24, 0x01	; 1
    3804:	c6 d2       	rcall	.+1420   	; 0x3d92 <lora_driver_initialise>
	// Create LoRaWAN task and start it up with priority 3
	lora_handler_initialise(2);
    3806:	82 e0       	ldi	r24, 0x02	; 2
    3808:	2c de       	rcall	.-936    	; 0x3462 <lora_handler_initialise>

	// initialize Display drivers
	display_7seg_initialise(NULL);
    380a:	80 e0       	ldi	r24, 0x00	; 0
    380c:	90 e0       	ldi	r25, 0x00	; 0
	
	// Power up the display
	display_7seg_powerUp();
    380e:	3f d0       	rcall	.+126    	; 0x388e <display_7seg_initialise>
    3810:	33 d0       	rcall	.+102    	; 0x3878 <display_7seg_powerUp>


	// Initialize temp/hum
	if ( HIH8120_OK != hih8120_initialise() )
    3812:	19 d1       	rcall	.+562    	; 0x3a46 <hih8120_initialise>
    3814:	88 23       	and	r24, r24
    3816:	21 f0       	breq	.+8      	; 0x3820 <initialiseSystem+0x36>
	{
		
		printf("failed initializing temp/hum \n");
    3818:	8e e0       	ldi	r24, 0x0E	; 14
    381a:	95 e0       	ldi	r25, 0x05	; 5
    381c:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <puts>
	}

	// co2
	mh_z19_initialise(ser_USART3);
    3820:	83 e0       	ldi	r24, 0x03	; 3
    3822:	5e d6       	rcall	.+3260   	; 0x44e0 <mh_z19_initialise>
	mh_z19_injectCallBack(myCo2CallBack);
    3824:	85 ef       	ldi	r24, 0xF5	; 245
    3826:	9a e1       	ldi	r25, 0x1A	; 26
    3828:	80 c6       	rjmp	.+3328   	; 0x452a <mh_z19_injectCallBack>
    382a:	08 95       	ret

0000382c <main>:
    382c:	de df       	rcall	.-68     	; 0x37ea <initialiseSystem>

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing
	printf("main: Program Started  \n");
    382e:	8c e2       	ldi	r24, 0x2C	; 44
    3830:	95 e0       	ldi	r25, 0x05	; 5
    3832:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <puts>
	
	vTaskStartScheduler(); // Initialize and run the freeRTOS scheduler. Execution should never return from here.
    3836:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <vTaskStartScheduler>
	
	printf("I was here: not good ! \n");
    383a:	84 e4       	ldi	r24, 0x44	; 68
    383c:	95 e0       	ldi	r25, 0x05	; 5
    383e:	0e 94 f0 2f 	call	0x5fe0	; 0x5fe0 <puts>
    3842:	ff cf       	rjmp	.-2      	; 0x3842 <main+0x16>

00003844 <_spiCallBack>:
    3844:	81 b3       	in	r24, 0x11	; 17
    3846:	8f 60       	ori	r24, 0x0F	; 15
    3848:	81 bb       	out	0x11, r24	; 17
    384a:	28 98       	cbi	0x05, 0	; 5
    384c:	28 9a       	sbi	0x05, 0	; 5
    384e:	21 b3       	in	r18, 0x11	; 17
    3850:	81 e0       	ldi	r24, 0x01	; 1
    3852:	90 e0       	ldi	r25, 0x00	; 0
    3854:	00 90 1d 17 	lds	r0, 0x171D	; 0x80171d <_digitNo>
    3858:	02 c0       	rjmp	.+4      	; 0x385e <_spiCallBack+0x1a>
    385a:	88 0f       	add	r24, r24
    385c:	99 1f       	adc	r25, r25
    385e:	0a 94       	dec	r0
    3860:	e2 f7       	brpl	.-8      	; 0x385a <_spiCallBack+0x16>
    3862:	80 95       	com	r24
    3864:	82 23       	and	r24, r18
    3866:	81 bb       	out	0x11, r24	; 17
    3868:	e0 91 ed 16 	lds	r30, 0x16ED	; 0x8016ed <_displayDoneCallBack>
    386c:	f0 91 ee 16 	lds	r31, 0x16EE	; 0x8016ee <_displayDoneCallBack+0x1>
    3870:	30 97       	sbiw	r30, 0x00	; 0
    3872:	09 f0       	breq	.+2      	; 0x3876 <_spiCallBack+0x32>
    3874:	19 95       	eicall
    3876:	08 95       	ret

00003878 <display_7seg_powerUp>:
    3878:	85 b5       	in	r24, 0x25	; 37
    387a:	85 60       	ori	r24, 0x05	; 5
    387c:	85 bd       	out	0x25, r24	; 37
    387e:	08 95       	ret

00003880 <display_7seg_powerDown>:
    3880:	85 b5       	in	r24, 0x25	; 37
    3882:	88 7f       	andi	r24, 0xF8	; 248
    3884:	85 bd       	out	0x25, r24	; 37
    3886:	81 b3       	in	r24, 0x11	; 17
    3888:	8f 60       	ori	r24, 0x0F	; 15
    388a:	81 bb       	out	0x11, r24	; 17
    388c:	08 95       	ret

0000388e <display_7seg_initialise>:
    388e:	8f 92       	push	r8
    3890:	af 92       	push	r10
    3892:	cf 92       	push	r12
    3894:	ef 92       	push	r14
    3896:	0f 93       	push	r16
    3898:	1f 93       	push	r17
    389a:	cf 93       	push	r28
    389c:	df 93       	push	r29
    389e:	ec 01       	movw	r28, r24
    38a0:	80 b3       	in	r24, 0x10	; 16
    38a2:	8f 60       	ori	r24, 0x0F	; 15
    38a4:	80 bb       	out	0x10, r24	; 16
    38a6:	81 b3       	in	r24, 0x11	; 17
    38a8:	8f 60       	ori	r24, 0x0F	; 15
    38aa:	81 bb       	out	0x11, r24	; 17
    38ac:	20 9a       	sbi	0x04, 0	; 4
    38ae:	82 e2       	ldi	r24, 0x22	; 34
    38b0:	9c e1       	ldi	r25, 0x1C	; 28
    38b2:	9f 93       	push	r25
    38b4:	8f 93       	push	r24
    38b6:	81 2c       	mov	r8, r1
    38b8:	a1 2c       	mov	r10, r1
    38ba:	c1 2c       	mov	r12, r1
    38bc:	e1 2c       	mov	r14, r1
    38be:	00 e0       	ldi	r16, 0x00	; 0
    38c0:	10 e0       	ldi	r17, 0x00	; 0
    38c2:	20 e2       	ldi	r18, 0x20	; 32
    38c4:	40 e0       	ldi	r20, 0x00	; 0
    38c6:	63 e0       	ldi	r22, 0x03	; 3
    38c8:	80 e1       	ldi	r24, 0x10	; 16
    38ca:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <spi_create>
    38ce:	90 93 1f 17 	sts	0x171F, r25	; 0x80171f <_spi+0x1>
    38d2:	80 93 1e 17 	sts	0x171E, r24	; 0x80171e <_spi>
    38d6:	89 e1       	ldi	r24, 0x19	; 25
    38d8:	87 bd       	out	0x27, r24	; 39
    38da:	84 b5       	in	r24, 0x24	; 36
    38dc:	82 60       	ori	r24, 0x02	; 2
    38de:	84 bd       	out	0x24, r24	; 36
    38e0:	ee e6       	ldi	r30, 0x6E	; 110
    38e2:	f0 e0       	ldi	r31, 0x00	; 0
    38e4:	80 81       	ld	r24, Z
    38e6:	82 60       	ori	r24, 0x02	; 2
    38e8:	80 83       	st	Z, r24
    38ea:	ca df       	rcall	.-108    	; 0x3880 <display_7seg_powerDown>
    38ec:	d0 93 ee 16 	sts	0x16EE, r29	; 0x8016ee <_displayDoneCallBack+0x1>
    38f0:	c0 93 ed 16 	sts	0x16ED, r28	; 0x8016ed <_displayDoneCallBack>
    38f4:	0f 90       	pop	r0
    38f6:	0f 90       	pop	r0
    38f8:	df 91       	pop	r29
    38fa:	cf 91       	pop	r28
    38fc:	1f 91       	pop	r17
    38fe:	0f 91       	pop	r16
    3900:	ef 90       	pop	r14
    3902:	cf 90       	pop	r12
    3904:	af 90       	pop	r10
    3906:	8f 90       	pop	r8
    3908:	08 95       	ret

0000390a <__vector_21>:
    390a:	1f 92       	push	r1
    390c:	0f 92       	push	r0
    390e:	0f b6       	in	r0, 0x3f	; 63
    3910:	0f 92       	push	r0
    3912:	11 24       	eor	r1, r1
    3914:	0b b6       	in	r0, 0x3b	; 59
    3916:	0f 92       	push	r0
    3918:	2f 93       	push	r18
    391a:	3f 93       	push	r19
    391c:	4f 93       	push	r20
    391e:	5f 93       	push	r21
    3920:	6f 93       	push	r22
    3922:	7f 93       	push	r23
    3924:	8f 93       	push	r24
    3926:	9f 93       	push	r25
    3928:	af 93       	push	r26
    392a:	bf 93       	push	r27
    392c:	ef 93       	push	r30
    392e:	ff 93       	push	r31
    3930:	80 91 f0 16 	lds	r24, 0x16F0	; 0x8016f0 <_maxHexSegmentindex>
    3934:	88 23       	and	r24, r24
    3936:	69 f1       	breq	.+90     	; 0x3992 <__vector_21+0x88>
    3938:	20 91 f1 16 	lds	r18, 0x16F1	; 0x8016f1 <_intCounter>
    393c:	30 91 f2 16 	lds	r19, 0x16F2	; 0x8016f2 <_intCounter+0x1>
    3940:	25 3f       	cpi	r18, 0xF5	; 245
    3942:	91 e0       	ldi	r25, 0x01	; 1
    3944:	39 07       	cpc	r19, r25
    3946:	38 f4       	brcc	.+14     	; 0x3956 <__vector_21+0x4c>
    3948:	2f 5f       	subi	r18, 0xFF	; 255
    394a:	3f 4f       	sbci	r19, 0xFF	; 255
    394c:	30 93 f2 16 	sts	0x16F2, r19	; 0x8016f2 <_intCounter+0x1>
    3950:	20 93 f1 16 	sts	0x16F1, r18	; 0x8016f1 <_intCounter>
    3954:	1e c0       	rjmp	.+60     	; 0x3992 <__vector_21+0x88>
    3956:	10 92 f2 16 	sts	0x16F2, r1	; 0x8016f2 <_intCounter+0x1>
    395a:	10 92 f1 16 	sts	0x16F1, r1	; 0x8016f1 <_intCounter>
    395e:	e0 91 ef 16 	lds	r30, 0x16EF	; 0x8016ef <_scrollIndex>
    3962:	2e 2f       	mov	r18, r30
    3964:	30 e0       	ldi	r19, 0x00	; 0
    3966:	90 e0       	ldi	r25, 0x00	; 0
    3968:	04 97       	sbiw	r24, 0x04	; 4
    396a:	28 17       	cp	r18, r24
    396c:	39 07       	cpc	r19, r25
    396e:	14 f4       	brge	.+4      	; 0x3974 <__vector_21+0x6a>
    3970:	ef 5f       	subi	r30, 0xFF	; 255
    3972:	01 c0       	rjmp	.+2      	; 0x3976 <__vector_21+0x6c>
    3974:	e0 e0       	ldi	r30, 0x00	; 0
    3976:	e0 93 ef 16 	sts	0x16EF, r30	; 0x8016ef <_scrollIndex>
    397a:	f0 e0       	ldi	r31, 0x00	; 0
    397c:	ed 50       	subi	r30, 0x0D	; 13
    397e:	f9 4e       	sbci	r31, 0xE9	; 233
    3980:	a9 e1       	ldi	r26, 0x19	; 25
    3982:	b7 e1       	ldi	r27, 0x17	; 23
    3984:	2d e1       	ldi	r18, 0x1D	; 29
    3986:	37 e1       	ldi	r19, 0x17	; 23
    3988:	81 91       	ld	r24, Z+
    398a:	8d 93       	st	X+, r24
    398c:	a2 17       	cp	r26, r18
    398e:	b3 07       	cpc	r27, r19
    3990:	d9 f7       	brne	.-10     	; 0x3988 <__vector_21+0x7e>
    3992:	80 91 1d 17 	lds	r24, 0x171D	; 0x80171d <_digitNo>
    3996:	90 e0       	ldi	r25, 0x00	; 0
    3998:	01 96       	adiw	r24, 0x01	; 1
    399a:	83 70       	andi	r24, 0x03	; 3
    399c:	90 78       	andi	r25, 0x80	; 128
    399e:	99 23       	and	r25, r25
    39a0:	24 f4       	brge	.+8      	; 0x39aa <__vector_21+0xa0>
    39a2:	01 97       	sbiw	r24, 0x01	; 1
    39a4:	8c 6f       	ori	r24, 0xFC	; 252
    39a6:	9f 6f       	ori	r25, 0xFF	; 255
    39a8:	01 96       	adiw	r24, 0x01	; 1
    39aa:	80 93 1d 17 	sts	0x171D, r24	; 0x80171d <_digitNo>
    39ae:	99 27       	eor	r25, r25
    39b0:	fc 01       	movw	r30, r24
    39b2:	e7 5e       	subi	r30, 0xE7	; 231
    39b4:	f8 4e       	sbci	r31, 0xE8	; 232
    39b6:	60 81       	ld	r22, Z
    39b8:	60 95       	com	r22
    39ba:	80 91 1e 17 	lds	r24, 0x171E	; 0x80171e <_spi>
    39be:	90 91 1f 17 	lds	r25, 0x171F	; 0x80171f <_spi+0x1>
    39c2:	0e 94 cc 27 	call	0x4f98	; 0x4f98 <spi_sendByte>
    39c6:	ff 91       	pop	r31
    39c8:	ef 91       	pop	r30
    39ca:	bf 91       	pop	r27
    39cc:	af 91       	pop	r26
    39ce:	9f 91       	pop	r25
    39d0:	8f 91       	pop	r24
    39d2:	7f 91       	pop	r23
    39d4:	6f 91       	pop	r22
    39d6:	5f 91       	pop	r21
    39d8:	4f 91       	pop	r20
    39da:	3f 91       	pop	r19
    39dc:	2f 91       	pop	r18
    39de:	0f 90       	pop	r0
    39e0:	0b be       	out	0x3b, r0	; 59
    39e2:	0f 90       	pop	r0
    39e4:	0f be       	out	0x3f, r0	; 63
    39e6:	0f 90       	pop	r0
    39e8:	1f 90       	pop	r1
    39ea:	18 95       	reti

000039ec <_hihTwiCallback>:
    39ec:	65 30       	cpi	r22, 0x05	; 5
    39ee:	f1 f4       	brne	.+60     	; 0x3a2c <_hihTwiCallback+0x40>
    39f0:	fa 01       	movw	r30, r20
    39f2:	80 81       	ld	r24, Z
    39f4:	8f 73       	andi	r24, 0x3F	; 63
    39f6:	90 e0       	ldi	r25, 0x00	; 0
    39f8:	98 2f       	mov	r25, r24
    39fa:	88 27       	eor	r24, r24
    39fc:	21 81       	ldd	r18, Z+1	; 0x01
    39fe:	82 2b       	or	r24, r18
    3a00:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3a04:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3a08:	82 81       	ldd	r24, Z+2	; 0x02
    3a0a:	f0 e4       	ldi	r31, 0x40	; 64
    3a0c:	8f 9f       	mul	r24, r31
    3a0e:	c0 01       	movw	r24, r0
    3a10:	11 24       	eor	r1, r1
    3a12:	fa 01       	movw	r30, r20
    3a14:	23 81       	ldd	r18, Z+3	; 0x03
    3a16:	26 95       	lsr	r18
    3a18:	26 95       	lsr	r18
    3a1a:	82 2b       	or	r24, r18
    3a1c:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3a20:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3a24:	81 e0       	ldi	r24, 0x01	; 1
    3a26:	80 93 20 17 	sts	0x1720, r24	; 0x801720 <_measuringIsReady>
    3a2a:	08 95       	ret
    3a2c:	64 30       	cpi	r22, 0x04	; 4
    3a2e:	51 f0       	breq	.+20     	; 0x3a44 <_hihTwiCallback+0x58>
    3a30:	80 e0       	ldi	r24, 0x00	; 0
    3a32:	90 e4       	ldi	r25, 0x40	; 64
    3a34:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    3a38:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    3a3c:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    3a40:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    3a44:	08 95       	ret

00003a46 <hih8120_initialise>:
    3a46:	0f 93       	push	r16
    3a48:	1f 93       	push	r17
    3a4a:	06 ef       	ldi	r16, 0xF6	; 246
    3a4c:	1c e1       	ldi	r17, 0x1C	; 28
    3a4e:	20 e0       	ldi	r18, 0x00	; 0
    3a50:	34 e2       	ldi	r19, 0x24	; 36
    3a52:	44 ef       	ldi	r20, 0xF4	; 244
    3a54:	50 e0       	ldi	r21, 0x00	; 0
    3a56:	60 e0       	ldi	r22, 0x00	; 0
    3a58:	87 e2       	ldi	r24, 0x27	; 39
    3a5a:	0e 94 7d 2a 	call	0x54fa	; 0x54fa <twiCreate>
    3a5e:	90 93 22 17 	sts	0x1722, r25	; 0x801722 <_hih8120Handler+0x1>
    3a62:	80 93 21 17 	sts	0x1721, r24	; 0x801721 <_hih8120Handler>
    3a66:	21 e0       	ldi	r18, 0x01	; 1
    3a68:	89 2b       	or	r24, r25
    3a6a:	09 f0       	breq	.+2      	; 0x3a6e <hih8120_initialise+0x28>
    3a6c:	20 e0       	ldi	r18, 0x00	; 0
    3a6e:	82 2f       	mov	r24, r18
    3a70:	1f 91       	pop	r17
    3a72:	0f 91       	pop	r16
    3a74:	08 95       	ret

00003a76 <hih8120_isReady>:
    3a76:	80 91 20 17 	lds	r24, 0x1720	; 0x801720 <_measuringIsReady>
    3a7a:	08 95       	ret

00003a7c <hih8120_wakeup>:
    3a7c:	80 91 21 17 	lds	r24, 0x1721	; 0x801721 <_hih8120Handler>
    3a80:	90 91 22 17 	lds	r25, 0x1722	; 0x801722 <_hih8120Handler+0x1>
    3a84:	00 97       	sbiw	r24, 0x00	; 0
    3a86:	59 f0       	breq	.+22     	; 0x3a9e <hih8120_wakeup+0x22>
    3a88:	40 e0       	ldi	r20, 0x00	; 0
    3a8a:	60 e0       	ldi	r22, 0x00	; 0
    3a8c:	70 e0       	ldi	r23, 0x00	; 0
    3a8e:	0e 94 ce 2a 	call	0x559c	; 0x559c <twiTransmit>
    3a92:	84 30       	cpi	r24, 0x04	; 4
    3a94:	31 f4       	brne	.+12     	; 0x3aa2 <hih8120_wakeup+0x26>
    3a96:	10 92 20 17 	sts	0x1720, r1	; 0x801720 <_measuringIsReady>
    3a9a:	80 e0       	ldi	r24, 0x00	; 0
    3a9c:	08 95       	ret
    3a9e:	82 e0       	ldi	r24, 0x02	; 2
    3aa0:	08 95       	ret
    3aa2:	83 e0       	ldi	r24, 0x03	; 3
    3aa4:	08 95       	ret

00003aa6 <hih8120_measure>:
    3aa6:	80 91 21 17 	lds	r24, 0x1721	; 0x801721 <_hih8120Handler>
    3aaa:	90 91 22 17 	lds	r25, 0x1722	; 0x801722 <_hih8120Handler+0x1>
    3aae:	00 97       	sbiw	r24, 0x00	; 0
    3ab0:	39 f0       	breq	.+14     	; 0x3ac0 <hih8120_measure+0x1a>
    3ab2:	64 e0       	ldi	r22, 0x04	; 4
    3ab4:	0e 94 1a 2b 	call	0x5634	; 0x5634 <twiReceive>
    3ab8:	85 30       	cpi	r24, 0x05	; 5
    3aba:	21 f0       	breq	.+8      	; 0x3ac4 <hih8120_measure+0x1e>
    3abc:	83 e0       	ldi	r24, 0x03	; 3
    3abe:	08 95       	ret
    3ac0:	82 e0       	ldi	r24, 0x02	; 2
    3ac2:	08 95       	ret
    3ac4:	80 e0       	ldi	r24, 0x00	; 0
    3ac6:	08 95       	ret

00003ac8 <hih8120_getHumidity>:
    3ac8:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    3acc:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    3ad0:	80 e0       	ldi	r24, 0x00	; 0
    3ad2:	90 e0       	ldi	r25, 0x00	; 0
    3ad4:	0e 94 24 2d 	call	0x5a48	; 0x5a48 <__floatunsisf>
    3ad8:	20 e0       	ldi	r18, 0x00	; 0
    3ada:	30 e0       	ldi	r19, 0x00	; 0
    3adc:	48 ec       	ldi	r20, 0xC8	; 200
    3ade:	52 e4       	ldi	r21, 0x42	; 66
    3ae0:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <__mulsf3>
    3ae4:	20 e0       	ldi	r18, 0x00	; 0
    3ae6:	38 ef       	ldi	r19, 0xF8	; 248
    3ae8:	4f e7       	ldi	r20, 0x7F	; 127
    3aea:	56 e4       	ldi	r21, 0x46	; 70
    3aec:	0c 94 8b 2c 	jmp	0x5916	; 0x5916 <__divsf3>
    3af0:	08 95       	ret

00003af2 <hih8120_getHumidityPercent_x10>:
    3af2:	ea df       	rcall	.-44     	; 0x3ac8 <hih8120_getHumidity>
    3af4:	20 e0       	ldi	r18, 0x00	; 0
    3af6:	30 e0       	ldi	r19, 0x00	; 0
    3af8:	40 e2       	ldi	r20, 0x20	; 32
    3afa:	51 e4       	ldi	r21, 0x41	; 65
    3afc:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <__mulsf3>
    3b00:	0e 94 f8 2c 	call	0x59f0	; 0x59f0 <__fixunssfsi>
    3b04:	cb 01       	movw	r24, r22
    3b06:	08 95       	ret

00003b08 <hih8120_getTemperature>:
    3b08:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    3b0c:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    3b10:	80 e0       	ldi	r24, 0x00	; 0
    3b12:	90 e0       	ldi	r25, 0x00	; 0
    3b14:	0e 94 24 2d 	call	0x5a48	; 0x5a48 <__floatunsisf>
    3b18:	20 e0       	ldi	r18, 0x00	; 0
    3b1a:	30 e0       	ldi	r19, 0x00	; 0
    3b1c:	45 e2       	ldi	r20, 0x25	; 37
    3b1e:	53 e4       	ldi	r21, 0x43	; 67
    3b20:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <__mulsf3>
    3b24:	20 e0       	ldi	r18, 0x00	; 0
    3b26:	38 ef       	ldi	r19, 0xF8	; 248
    3b28:	4f e7       	ldi	r20, 0x7F	; 127
    3b2a:	56 e4       	ldi	r21, 0x46	; 70
    3b2c:	0e 94 8b 2c 	call	0x5916	; 0x5916 <__divsf3>
    3b30:	20 e0       	ldi	r18, 0x00	; 0
    3b32:	30 e0       	ldi	r19, 0x00	; 0
    3b34:	40 e2       	ldi	r20, 0x20	; 32
    3b36:	52 e4       	ldi	r21, 0x42	; 66
    3b38:	0c 94 26 2c 	jmp	0x584c	; 0x584c <__subsf3>
    3b3c:	08 95       	ret

00003b3e <hih8120_getTemperature_x10>:
    3b3e:	e4 df       	rcall	.-56     	; 0x3b08 <hih8120_getTemperature>
    3b40:	20 e0       	ldi	r18, 0x00	; 0
    3b42:	30 e0       	ldi	r19, 0x00	; 0
    3b44:	40 e2       	ldi	r20, 0x20	; 32
    3b46:	51 e4       	ldi	r21, 0x41	; 65
    3b48:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <__mulsf3>
    3b4c:	0e 94 f3 2c 	call	0x59e6	; 0x59e6 <__fixsfsi>
    3b50:	cb 01       	movw	r24, r22
    3b52:	08 95       	ret

00003b54 <_serialCallBack>:
    3b54:	0f 93       	push	r16
    3b56:	1f 93       	push	r17
    3b58:	cf 93       	push	r28
    3b5a:	df 93       	push	r29
    3b5c:	1f 92       	push	r1
    3b5e:	1f 92       	push	r1
    3b60:	cd b7       	in	r28, 0x3d	; 61
    3b62:	de b7       	in	r29, 0x3e	; 62
    3b64:	8c 01       	movw	r16, r24
    3b66:	19 82       	std	Y+1, r1	; 0x01
    3b68:	2d c0       	rjmp	.+90     	; 0x3bc4 <_serialCallBack+0x70>
    3b6a:	e0 91 5a 17 	lds	r30, 0x175A	; 0x80175a <rec_buf_inp.2878>
    3b6e:	ec 32       	cpi	r30, 0x2C	; 44
    3b70:	50 f4       	brcc	.+20     	; 0x3b86 <_serialCallBack+0x32>
    3b72:	81 e0       	ldi	r24, 0x01	; 1
    3b74:	8e 0f       	add	r24, r30
    3b76:	80 93 5a 17 	sts	0x175A, r24	; 0x80175a <rec_buf_inp.2878>
    3b7a:	f0 e0       	ldi	r31, 0x00	; 0
    3b7c:	e4 57       	subi	r30, 0x74	; 116
    3b7e:	f8 4e       	sbci	r31, 0xE8	; 232
    3b80:	8a 81       	ldd	r24, Y+2	; 0x02
    3b82:	80 83       	st	Z, r24
    3b84:	02 c0       	rjmp	.+4      	; 0x3b8a <_serialCallBack+0x36>
    3b86:	10 92 5a 17 	sts	0x175A, r1	; 0x80175a <rec_buf_inp.2878>
    3b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b8c:	8a 30       	cpi	r24, 0x0A	; 10
    3b8e:	d1 f4       	brne	.+52     	; 0x3bc4 <_serialCallBack+0x70>
    3b90:	40 91 5a 17 	lds	r20, 0x175A	; 0x80175a <rec_buf_inp.2878>
    3b94:	50 e0       	ldi	r21, 0x00	; 0
    3b96:	fa 01       	movw	r30, r20
    3b98:	e6 57       	subi	r30, 0x76	; 118
    3b9a:	f8 4e       	sbci	r31, 0xE8	; 232
    3b9c:	10 82       	st	Z, r1
    3b9e:	41 50       	subi	r20, 0x01	; 1
    3ba0:	51 09       	sbc	r21, r1
    3ba2:	9e 01       	movw	r18, r28
    3ba4:	2f 5f       	subi	r18, 0xFF	; 255
    3ba6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ba8:	6c e8       	ldi	r22, 0x8C	; 140
    3baa:	77 e1       	ldi	r23, 0x17	; 23
    3bac:	80 91 5d 17 	lds	r24, 0x175D	; 0x80175d <_serialReplyBufferHandle>
    3bb0:	90 91 5e 17 	lds	r25, 0x175E	; 0x80175e <_serialReplyBufferHandle+0x1>
    3bb4:	0e 94 f6 09 	call	0x13ec	; 0x13ec <xStreamBufferSendFromISR>
    3bb8:	89 81       	ldd	r24, Y+1	; 0x01
    3bba:	81 11       	cpse	r24, r1
    3bbc:	0e 94 2f 03 	call	0x65e	; 0x65e <vPortYield>
    3bc0:	10 92 5a 17 	sts	0x175A, r1	; 0x80175a <rec_buf_inp.2878>
    3bc4:	be 01       	movw	r22, r28
    3bc6:	6e 5f       	subi	r22, 0xFE	; 254
    3bc8:	7f 4f       	sbci	r23, 0xFF	; 255
    3bca:	c8 01       	movw	r24, r16
    3bcc:	1b d6       	rcall	.+3126   	; 0x4804 <serial_getByte>
    3bce:	88 23       	and	r24, r24
    3bd0:	61 f2       	breq	.-104    	; 0x3b6a <_serialCallBack+0x16>
    3bd2:	0f 90       	pop	r0
    3bd4:	0f 90       	pop	r0
    3bd6:	df 91       	pop	r29
    3bd8:	cf 91       	pop	r28
    3bda:	1f 91       	pop	r17
    3bdc:	0f 91       	pop	r16
    3bde:	08 95       	ret

00003be0 <_uploadMessage>:
    3be0:	0f 93       	push	r16
    3be2:	1f 93       	push	r17
    3be4:	cf 93       	push	r28
    3be6:	df 93       	push	r29
    3be8:	8c 01       	movw	r16, r24
    3bea:	eb 01       	movw	r28, r22
    3bec:	80 91 5d 17 	lds	r24, 0x175D	; 0x80175d <_serialReplyBufferHandle>
    3bf0:	90 91 5e 17 	lds	r25, 0x175E	; 0x80175e <_serialReplyBufferHandle+0x1>
    3bf4:	0e 94 03 09 	call	0x1206	; 0x1206 <xStreamBufferReset>
    3bf8:	b8 01       	movw	r22, r16
    3bfa:	83 e2       	ldi	r24, 0x23	; 35
    3bfc:	97 e1       	ldi	r25, 0x17	; 23
    3bfe:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <strcpy>
    3c02:	20 97       	sbiw	r28, 0x00	; 0
    3c04:	79 f0       	breq	.+30     	; 0x3c24 <_uploadMessage+0x44>
    3c06:	e3 e2       	ldi	r30, 0x23	; 35
    3c08:	f7 e1       	ldi	r31, 0x17	; 23
    3c0a:	01 90       	ld	r0, Z+
    3c0c:	00 20       	and	r0, r0
    3c0e:	e9 f7       	brne	.-6      	; 0x3c0a <_uploadMessage+0x2a>
    3c10:	31 97       	sbiw	r30, 0x01	; 1
    3c12:	80 e2       	ldi	r24, 0x20	; 32
    3c14:	90 e0       	ldi	r25, 0x00	; 0
    3c16:	91 83       	std	Z+1, r25	; 0x01
    3c18:	80 83       	st	Z, r24
    3c1a:	be 01       	movw	r22, r28
    3c1c:	83 e2       	ldi	r24, 0x23	; 35
    3c1e:	97 e1       	ldi	r25, 0x17	; 23
    3c20:	0e 94 b3 2f 	call	0x5f66	; 0x5f66 <strcat>
    3c24:	e3 e2       	ldi	r30, 0x23	; 35
    3c26:	f7 e1       	ldi	r31, 0x17	; 23
    3c28:	df 01       	movw	r26, r30
    3c2a:	0d 90       	ld	r0, X+
    3c2c:	00 20       	and	r0, r0
    3c2e:	e9 f7       	brne	.-6      	; 0x3c2a <_uploadMessage+0x4a>
    3c30:	11 97       	sbiw	r26, 0x01	; 1
    3c32:	8d e0       	ldi	r24, 0x0D	; 13
    3c34:	9a e0       	ldi	r25, 0x0A	; 10
    3c36:	11 96       	adiw	r26, 0x01	; 1
    3c38:	9c 93       	st	X, r25
    3c3a:	8e 93       	st	-X, r24
    3c3c:	12 96       	adiw	r26, 0x02	; 2
    3c3e:	1c 92       	st	X, r1
    3c40:	01 90       	ld	r0, Z+
    3c42:	00 20       	and	r0, r0
    3c44:	e9 f7       	brne	.-6      	; 0x3c40 <_uploadMessage+0x60>
    3c46:	31 97       	sbiw	r30, 0x01	; 1
    3c48:	e3 52       	subi	r30, 0x23	; 35
    3c4a:	f7 41       	sbci	r31, 0x17	; 23
    3c4c:	ae 2f       	mov	r26, r30
    3c4e:	83 e2       	ldi	r24, 0x23	; 35
    3c50:	97 e1       	ldi	r25, 0x17	; 23
    3c52:	ac 01       	movw	r20, r24
    3c54:	6a 2f       	mov	r22, r26
    3c56:	80 91 5f 17 	lds	r24, 0x175F	; 0x80175f <_rn2483_serial>
    3c5a:	90 91 60 17 	lds	r25, 0x1760	; 0x801760 <_rn2483_serial+0x1>
    3c5e:	7d d5       	rcall	.+2810   	; 0x475a <serial_sendBytes>
    3c60:	81 11       	cpse	r24, r1
    3c62:	11 c0       	rjmp	.+34     	; 0x3c86 <_uploadMessage+0xa6>
    3c64:	08 e2       	ldi	r16, 0x28	; 40
    3c66:	15 e0       	ldi	r17, 0x05	; 5
    3c68:	20 e0       	ldi	r18, 0x00	; 0
    3c6a:	30 e0       	ldi	r19, 0x00	; 0
    3c6c:	4d e2       	ldi	r20, 0x2D	; 45
    3c6e:	50 e0       	ldi	r21, 0x00	; 0
    3c70:	66 ee       	ldi	r22, 0xE6	; 230
    3c72:	77 e1       	ldi	r23, 0x17	; 23
    3c74:	80 91 5d 17 	lds	r24, 0x175D	; 0x80175d <_serialReplyBufferHandle>
    3c78:	90 91 5e 17 	lds	r25, 0x175E	; 0x80175e <_serialReplyBufferHandle+0x1>
    3c7c:	0e 94 3a 0a 	call	0x1474	; 0x1474 <xStreamBufferReceive>
    3c80:	86 ee       	ldi	r24, 0xE6	; 230
    3c82:	97 e1       	ldi	r25, 0x17	; 23
    3c84:	02 c0       	rjmp	.+4      	; 0x3c8a <_uploadMessage+0xaa>
    3c86:	80 e0       	ldi	r24, 0x00	; 0
    3c88:	90 e0       	ldi	r25, 0x00	; 0
    3c8a:	df 91       	pop	r29
    3c8c:	cf 91       	pop	r28
    3c8e:	1f 91       	pop	r17
    3c90:	0f 91       	pop	r16
    3c92:	08 95       	ret

00003c94 <_reply2ReturnCode>:
    3c94:	2f 92       	push	r2
    3c96:	3f 92       	push	r3
    3c98:	4f 92       	push	r4
    3c9a:	5f 92       	push	r5
    3c9c:	6f 92       	push	r6
    3c9e:	7f 92       	push	r7
    3ca0:	8f 92       	push	r8
    3ca2:	9f 92       	push	r9
    3ca4:	af 92       	push	r10
    3ca6:	bf 92       	push	r11
    3ca8:	cf 92       	push	r12
    3caa:	df 92       	push	r13
    3cac:	ef 92       	push	r14
    3cae:	ff 92       	push	r15
    3cb0:	0f 93       	push	r16
    3cb2:	1f 93       	push	r17
    3cb4:	cf 93       	push	r28
    3cb6:	df 93       	push	r29
    3cb8:	5c 01       	movw	r10, r24
    3cba:	fc 01       	movw	r30, r24
    3cbc:	01 90       	ld	r0, Z+
    3cbe:	00 20       	and	r0, r0
    3cc0:	e9 f7       	brne	.-6      	; 0x3cbc <_reply2ReturnCode+0x28>
    3cc2:	31 97       	sbiw	r30, 0x01	; 1
    3cc4:	6f 01       	movw	r12, r30
    3cc6:	c8 1a       	sub	r12, r24
    3cc8:	d9 0a       	sbc	r13, r25
    3cca:	5c 2c       	mov	r5, r12
    3ccc:	0f 2e       	mov	r0, r31
    3cce:	f5 ef       	ldi	r31, 0xF5	; 245
    3cd0:	8f 2e       	mov	r8, r31
    3cd2:	f7 e0       	ldi	r31, 0x07	; 7
    3cd4:	9f 2e       	mov	r9, r31
    3cd6:	f0 2d       	mov	r31, r0
    3cd8:	e1 2c       	mov	r14, r1
    3cda:	f1 2c       	mov	r15, r1
    3cdc:	4c 2c       	mov	r4, r12
    3cde:	37 01       	movw	r6, r14
    3ce0:	f4 01       	movw	r30, r8
    3ce2:	01 81       	ldd	r16, Z+1	; 0x01
    3ce4:	12 81       	ldd	r17, Z+2	; 0x02
    3ce6:	e8 01       	movw	r28, r16
    3ce8:	09 90       	ld	r0, Y+
    3cea:	00 20       	and	r0, r0
    3cec:	e9 f7       	brne	.-6      	; 0x3ce8 <_reply2ReturnCode+0x54>
    3cee:	21 97       	sbiw	r28, 0x01	; 1
    3cf0:	c0 1b       	sub	r28, r16
    3cf2:	d1 0b       	sbc	r29, r17
    3cf4:	3c 2e       	mov	r3, r28
    3cf6:	f9 e0       	ldi	r31, 0x09	; 9
    3cf8:	cf 16       	cp	r12, r31
    3cfa:	d1 04       	cpc	r13, r1
    3cfc:	58 f0       	brcs	.+22     	; 0x3d14 <_reply2ReturnCode+0x80>
    3cfe:	f4 01       	movw	r30, r8
    3d00:	20 80       	ld	r2, Z
    3d02:	fe e0       	ldi	r31, 0x0E	; 14
    3d04:	2f 12       	cpse	r2, r31
    3d06:	06 c0       	rjmp	.+12     	; 0x3d14 <_reply2ReturnCode+0x80>
    3d08:	b8 01       	movw	r22, r16
    3d0a:	c5 01       	movw	r24, r10
    3d0c:	0e 94 8e 2f 	call	0x5f1c	; 0x5f1c <strcasestr>
    3d10:	89 2b       	or	r24, r25
    3d12:	09 f5       	brne	.+66     	; 0x3d56 <_reply2ReturnCode+0xc2>
    3d14:	44 2d       	mov	r20, r4
    3d16:	35 14       	cp	r3, r5
    3d18:	08 f4       	brcc	.+2      	; 0x3d1c <_reply2ReturnCode+0x88>
    3d1a:	4c 2f       	mov	r20, r28
    3d1c:	50 e0       	ldi	r21, 0x00	; 0
    3d1e:	b8 01       	movw	r22, r16
    3d20:	c5 01       	movw	r24, r10
    3d22:	0e 94 c5 2f 	call	0x5f8a	; 0x5f8a <strncasecmp>
    3d26:	89 2b       	or	r24, r25
    3d28:	49 f4       	brne	.+18     	; 0x3d3c <_reply2ReturnCode+0xa8>
    3d2a:	f3 01       	movw	r30, r6
    3d2c:	ee 0f       	add	r30, r30
    3d2e:	ff 1f       	adc	r31, r31
    3d30:	e6 0d       	add	r30, r6
    3d32:	f7 1d       	adc	r31, r7
    3d34:	eb 50       	subi	r30, 0x0B	; 11
    3d36:	f8 4f       	sbci	r31, 0xF8	; 248
    3d38:	20 80       	ld	r2, Z
    3d3a:	0d c0       	rjmp	.+26     	; 0x3d56 <_reply2ReturnCode+0xc2>
    3d3c:	8f ef       	ldi	r24, 0xFF	; 255
    3d3e:	e8 1a       	sub	r14, r24
    3d40:	f8 0a       	sbc	r15, r24
    3d42:	e3 e0       	ldi	r30, 0x03	; 3
    3d44:	8e 0e       	add	r8, r30
    3d46:	91 1c       	adc	r9, r1
    3d48:	f1 e1       	ldi	r31, 0x11	; 17
    3d4a:	ef 16       	cp	r14, r31
    3d4c:	f1 04       	cpc	r15, r1
    3d4e:	39 f6       	brne	.-114    	; 0x3cde <_reply2ReturnCode+0x4a>
    3d50:	68 94       	set
    3d52:	22 24       	eor	r2, r2
    3d54:	24 f8       	bld	r2, 4
    3d56:	82 2d       	mov	r24, r2
    3d58:	df 91       	pop	r29
    3d5a:	cf 91       	pop	r28
    3d5c:	1f 91       	pop	r17
    3d5e:	0f 91       	pop	r16
    3d60:	ff 90       	pop	r15
    3d62:	ef 90       	pop	r14
    3d64:	df 90       	pop	r13
    3d66:	cf 90       	pop	r12
    3d68:	bf 90       	pop	r11
    3d6a:	af 90       	pop	r10
    3d6c:	9f 90       	pop	r9
    3d6e:	8f 90       	pop	r8
    3d70:	7f 90       	pop	r7
    3d72:	6f 90       	pop	r6
    3d74:	5f 90       	pop	r5
    3d76:	4f 90       	pop	r4
    3d78:	3f 90       	pop	r3
    3d7a:	2f 90       	pop	r2
    3d7c:	08 95       	ret

00003d7e <_uploadMessageRc>:
    3d7e:	30 df       	rcall	.-416    	; 0x3be0 <_uploadMessage>
    3d80:	89 cf       	rjmp	.-238    	; 0x3c94 <_reply2ReturnCode>
    3d82:	08 95       	ret

00003d84 <lora_driver_flushBuffers>:
    3d84:	80 91 5d 17 	lds	r24, 0x175D	; 0x80175d <_serialReplyBufferHandle>
    3d88:	90 91 5e 17 	lds	r25, 0x175E	; 0x80175e <_serialReplyBufferHandle+0x1>
    3d8c:	0c 94 03 09 	jmp	0x1206	; 0x1206 <xStreamBufferReset>
    3d90:	08 95       	ret

00003d92 <lora_driver_initialise>:
    3d92:	8f 92       	push	r8
    3d94:	9f 92       	push	r9
    3d96:	af 92       	push	r10
    3d98:	cf 92       	push	r12
    3d9a:	ef 92       	push	r14
    3d9c:	0f 93       	push	r16
    3d9e:	1f 93       	push	r17
    3da0:	cf 93       	push	r28
    3da2:	c8 2f       	mov	r28, r24
    3da4:	8b 01       	movw	r16, r22
    3da6:	41 e0       	ldi	r20, 0x01	; 1
    3da8:	60 e0       	ldi	r22, 0x00	; 0
    3daa:	70 e0       	ldi	r23, 0x00	; 0
    3dac:	88 ec       	ldi	r24, 0xC8	; 200
    3dae:	90 e0       	ldi	r25, 0x00	; 0
    3db0:	0e 94 d1 08 	call	0x11a2	; 0x11a2 <xStreamBufferGenericCreate>
    3db4:	90 93 5e 17 	sts	0x175E, r25	; 0x80175e <_serialReplyBufferHandle+0x1>
    3db8:	80 93 5d 17 	sts	0x175D, r24	; 0x80175d <_serialReplyBufferHandle>
    3dbc:	10 93 5c 17 	sts	0x175C, r17	; 0x80175c <_downlinkMessageBuffer+0x1>
    3dc0:	00 93 5b 17 	sts	0x175B, r16	; 0x80175b <_downlinkMessageBuffer>
    3dc4:	0f 2e       	mov	r0, r31
    3dc6:	fa ea       	ldi	r31, 0xAA	; 170
    3dc8:	8f 2e       	mov	r8, r31
    3dca:	fd e1       	ldi	r31, 0x1D	; 29
    3dcc:	9f 2e       	mov	r9, r31
    3dce:	f0 2d       	mov	r31, r0
    3dd0:	68 94       	set
    3dd2:	aa 24       	eor	r10, r10
    3dd4:	a6 f8       	bld	r10, 6
    3dd6:	68 94       	set
    3dd8:	cc 24       	eor	r12, r12
    3dda:	c6 f8       	bld	r12, 6
    3ddc:	e1 2c       	mov	r14, r1
    3dde:	00 e0       	ldi	r16, 0x00	; 0
    3de0:	23 e0       	ldi	r18, 0x03	; 3
    3de2:	40 e0       	ldi	r20, 0x00	; 0
    3de4:	51 ee       	ldi	r21, 0xE1	; 225
    3de6:	60 e0       	ldi	r22, 0x00	; 0
    3de8:	70 e0       	ldi	r23, 0x00	; 0
    3dea:	8c 2f       	mov	r24, r28
    3dec:	e3 d3       	rcall	.+1990   	; 0x45b4 <serial_create>
    3dee:	90 93 60 17 	sts	0x1760, r25	; 0x801760 <_rn2483_serial+0x1>
    3df2:	80 93 5f 17 	sts	0x175F, r24	; 0x80175f <_rn2483_serial>
    3df6:	e7 e0       	ldi	r30, 0x07	; 7
    3df8:	f1 e0       	ldi	r31, 0x01	; 1
    3dfa:	80 81       	ld	r24, Z
    3dfc:	80 61       	ori	r24, 0x10	; 16
    3dfe:	80 83       	st	Z, r24
    3e00:	cf 91       	pop	r28
    3e02:	1f 91       	pop	r17
    3e04:	0f 91       	pop	r16
    3e06:	ef 90       	pop	r14
    3e08:	cf 90       	pop	r12
    3e0a:	af 90       	pop	r10
    3e0c:	9f 90       	pop	r9
    3e0e:	8f 90       	pop	r8
    3e10:	08 95       	ret

00003e12 <lora_driver_resetRn2483>:
    3e12:	88 23       	and	r24, r24
    3e14:	31 f0       	breq	.+12     	; 0x3e22 <lora_driver_resetRn2483+0x10>
    3e16:	e8 e0       	ldi	r30, 0x08	; 8
    3e18:	f1 e0       	ldi	r31, 0x01	; 1
    3e1a:	80 81       	ld	r24, Z
    3e1c:	8f 7e       	andi	r24, 0xEF	; 239
    3e1e:	80 83       	st	Z, r24
    3e20:	08 95       	ret
    3e22:	e8 e0       	ldi	r30, 0x08	; 8
    3e24:	f1 e0       	ldi	r31, 0x01	; 1
    3e26:	80 81       	ld	r24, Z
    3e28:	80 61       	ori	r24, 0x10	; 16
    3e2a:	80 83       	st	Z, r24
    3e2c:	08 95       	ret

00003e2e <lora_driver_rn2483FactoryReset>:
    3e2e:	60 e0       	ldi	r22, 0x00	; 0
    3e30:	70 e0       	ldi	r23, 0x00	; 0
    3e32:	8b e7       	ldi	r24, 0x7B	; 123
    3e34:	95 e0       	ldi	r25, 0x05	; 5
    3e36:	d4 de       	rcall	.-600    	; 0x3be0 <_uploadMessage>
    3e38:	e6 ee       	ldi	r30, 0xE6	; 230
    3e3a:	f7 e1       	ldi	r31, 0x17	; 23
    3e3c:	01 90       	ld	r0, Z+
    3e3e:	00 20       	and	r0, r0
    3e40:	e9 f7       	brne	.-6      	; 0x3e3c <lora_driver_rn2483FactoryReset+0xe>
    3e42:	31 97       	sbiw	r30, 0x01	; 1
    3e44:	e6 5e       	subi	r30, 0xE6	; 230
    3e46:	f7 41       	sbci	r31, 0x17	; 23
    3e48:	81 e0       	ldi	r24, 0x01	; 1
    3e4a:	75 97       	sbiw	r30, 0x15	; 21
    3e4c:	08 f0       	brcs	.+2      	; 0x3e50 <lora_driver_rn2483FactoryReset+0x22>
    3e4e:	80 e0       	ldi	r24, 0x00	; 0
    3e50:	08 95       	ret

00003e52 <lora_driver_getRn2483Hweui>:
    3e52:	cf 93       	push	r28
    3e54:	df 93       	push	r29
    3e56:	ec 01       	movw	r28, r24
    3e58:	60 e0       	ldi	r22, 0x00	; 0
    3e5a:	70 e0       	ldi	r23, 0x00	; 0
    3e5c:	8c e8       	ldi	r24, 0x8C	; 140
    3e5e:	95 e0       	ldi	r25, 0x05	; 5
    3e60:	bf de       	rcall	.-642    	; 0x3be0 <_uploadMessage>
    3e62:	e6 ee       	ldi	r30, 0xE6	; 230
    3e64:	f7 e1       	ldi	r31, 0x17	; 23
    3e66:	01 90       	ld	r0, Z+
    3e68:	00 20       	and	r0, r0
    3e6a:	e9 f7       	brne	.-6      	; 0x3e66 <lora_driver_getRn2483Hweui+0x14>
    3e6c:	e7 5f       	subi	r30, 0xF7	; 247
    3e6e:	f7 41       	sbci	r31, 0x17	; 23
    3e70:	39 f4       	brne	.+14     	; 0x3e80 <lora_driver_getRn2483Hweui+0x2e>
    3e72:	66 ee       	ldi	r22, 0xE6	; 230
    3e74:	77 e1       	ldi	r23, 0x17	; 23
    3e76:	ce 01       	movw	r24, r28
    3e78:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <strcpy>
    3e7c:	80 e0       	ldi	r24, 0x00	; 0
    3e7e:	02 c0       	rjmp	.+4      	; 0x3e84 <lora_driver_getRn2483Hweui+0x32>
    3e80:	18 82       	st	Y, r1
    3e82:	81 e0       	ldi	r24, 0x01	; 1
    3e84:	df 91       	pop	r29
    3e86:	cf 91       	pop	r28
    3e88:	08 95       	ret

00003e8a <lora_driver_setDeviceIdentifier>:
    3e8a:	fc 01       	movw	r30, r24
    3e8c:	01 90       	ld	r0, Z+
    3e8e:	00 20       	and	r0, r0
    3e90:	e9 f7       	brne	.-6      	; 0x3e8c <lora_driver_setDeviceIdentifier+0x2>
    3e92:	9f 01       	movw	r18, r30
    3e94:	21 51       	subi	r18, 0x11	; 17
    3e96:	31 09       	sbc	r19, r1
    3e98:	28 17       	cp	r18, r24
    3e9a:	39 07       	cpc	r19, r25
    3e9c:	29 f4       	brne	.+10     	; 0x3ea8 <lora_driver_setDeviceIdentifier+0x1e>
    3e9e:	bc 01       	movw	r22, r24
    3ea0:	8a eb       	ldi	r24, 0xBA	; 186
    3ea2:	95 e0       	ldi	r25, 0x05	; 5
    3ea4:	6c cf       	rjmp	.-296    	; 0x3d7e <_uploadMessageRc>
    3ea6:	08 95       	ret
    3ea8:	89 e0       	ldi	r24, 0x09	; 9
    3eaa:	08 95       	ret

00003eac <lora_driver_setApplicationIdentifier>:
    3eac:	fc 01       	movw	r30, r24
    3eae:	01 90       	ld	r0, Z+
    3eb0:	00 20       	and	r0, r0
    3eb2:	e9 f7       	brne	.-6      	; 0x3eae <lora_driver_setApplicationIdentifier+0x2>
    3eb4:	9f 01       	movw	r18, r30
    3eb6:	21 51       	subi	r18, 0x11	; 17
    3eb8:	31 09       	sbc	r19, r1
    3eba:	28 17       	cp	r18, r24
    3ebc:	39 07       	cpc	r19, r25
    3ebe:	29 f4       	brne	.+10     	; 0x3eca <lora_driver_setApplicationIdentifier+0x1e>
    3ec0:	bc 01       	movw	r22, r24
    3ec2:	89 ec       	ldi	r24, 0xC9	; 201
    3ec4:	95 e0       	ldi	r25, 0x05	; 5
    3ec6:	5b cf       	rjmp	.-330    	; 0x3d7e <_uploadMessageRc>
    3ec8:	08 95       	ret
    3eca:	89 e0       	ldi	r24, 0x09	; 9
    3ecc:	08 95       	ret

00003ece <lora_driver_setApplicationKey>:
    3ece:	fc 01       	movw	r30, r24
    3ed0:	01 90       	ld	r0, Z+
    3ed2:	00 20       	and	r0, r0
    3ed4:	e9 f7       	brne	.-6      	; 0x3ed0 <lora_driver_setApplicationKey+0x2>
    3ed6:	9f 01       	movw	r18, r30
    3ed8:	21 52       	subi	r18, 0x21	; 33
    3eda:	31 09       	sbc	r19, r1
    3edc:	28 17       	cp	r18, r24
    3ede:	39 07       	cpc	r19, r25
    3ee0:	29 f4       	brne	.+10     	; 0x3eec <lora_driver_setApplicationKey+0x1e>
    3ee2:	bc 01       	movw	r22, r24
    3ee4:	88 ed       	ldi	r24, 0xD8	; 216
    3ee6:	95 e0       	ldi	r25, 0x05	; 5
    3ee8:	4a cf       	rjmp	.-364    	; 0x3d7e <_uploadMessageRc>
    3eea:	08 95       	ret
    3eec:	89 e0       	ldi	r24, 0x09	; 9
    3eee:	08 95       	ret

00003ef0 <lora_driver_saveMac>:
    3ef0:	60 e0       	ldi	r22, 0x00	; 0
    3ef2:	70 e0       	ldi	r23, 0x00	; 0
    3ef4:	87 e1       	ldi	r24, 0x17	; 23
    3ef6:	96 e0       	ldi	r25, 0x06	; 6
    3ef8:	42 cf       	rjmp	.-380    	; 0x3d7e <_uploadMessageRc>
    3efa:	08 95       	ret

00003efc <lora_driver_join>:
    3efc:	0f 93       	push	r16
    3efe:	1f 93       	push	r17
    3f00:	e8 2f       	mov	r30, r24
    3f02:	f0 e0       	ldi	r31, 0x00	; 0
    3f04:	ee 0f       	add	r30, r30
    3f06:	ff 1f       	adc	r31, r31
    3f08:	ef 50       	subi	r30, 0x0F	; 15
    3f0a:	f8 4f       	sbci	r31, 0xF8	; 248
    3f0c:	60 81       	ld	r22, Z
    3f0e:	71 81       	ldd	r23, Z+1	; 0x01
    3f10:	80 e2       	ldi	r24, 0x20	; 32
    3f12:	96 e0       	ldi	r25, 0x06	; 6
    3f14:	34 df       	rcall	.-408    	; 0x3d7e <_uploadMessageRc>
    3f16:	81 11       	cpse	r24, r1
    3f18:	14 c0       	rjmp	.+40     	; 0x3f42 <lora_driver_join+0x46>
    3f1a:	08 e2       	ldi	r16, 0x28	; 40
    3f1c:	15 e0       	ldi	r17, 0x05	; 5
    3f1e:	20 e0       	ldi	r18, 0x00	; 0
    3f20:	30 e0       	ldi	r19, 0x00	; 0
    3f22:	4d e2       	ldi	r20, 0x2D	; 45
    3f24:	50 e0       	ldi	r21, 0x00	; 0
    3f26:	66 ee       	ldi	r22, 0xE6	; 230
    3f28:	77 e1       	ldi	r23, 0x17	; 23
    3f2a:	80 91 5d 17 	lds	r24, 0x175D	; 0x80175d <_serialReplyBufferHandle>
    3f2e:	90 91 5e 17 	lds	r25, 0x175E	; 0x80175e <_serialReplyBufferHandle+0x1>
    3f32:	0e 94 3a 0a 	call	0x1474	; 0x1474 <xStreamBufferReceive>
    3f36:	88 23       	and	r24, r24
    3f38:	21 f0       	breq	.+8      	; 0x3f42 <lora_driver_join+0x46>
    3f3a:	86 ee       	ldi	r24, 0xE6	; 230
    3f3c:	97 e1       	ldi	r25, 0x17	; 23
    3f3e:	aa de       	rcall	.-684    	; 0x3c94 <_reply2ReturnCode>
    3f40:	03 c0       	rjmp	.+6      	; 0x3f48 <lora_driver_join+0x4c>
    3f42:	86 ee       	ldi	r24, 0xE6	; 230
    3f44:	97 e1       	ldi	r25, 0x17	; 23
    3f46:	a6 de       	rcall	.-692    	; 0x3c94 <_reply2ReturnCode>
    3f48:	1f 91       	pop	r17
    3f4a:	0f 91       	pop	r16
    3f4c:	08 95       	ret

00003f4e <lora_driver_sendUploadMessage>:
    3f4e:	0f 93       	push	r16
    3f50:	1f 93       	push	r17
    3f52:	cf 93       	push	r28
    3f54:	df 93       	push	r29
    3f56:	1f 92       	push	r1
    3f58:	cd b7       	in	r28, 0x3d	; 61
    3f5a:	de b7       	in	r29, 0x3e	; 62
    3f5c:	db 01       	movw	r26, r22
    3f5e:	11 96       	adiw	r26, 0x01	; 1
    3f60:	9c 91       	ld	r25, X
    3f62:	11 97       	sbiw	r26, 0x01	; 1
    3f64:	95 31       	cpi	r25, 0x15	; 21
    3f66:	08 f0       	brcs	.+2      	; 0x3f6a <lora_driver_sendUploadMessage+0x1c>
    3f68:	b4 c0       	rjmp	.+360    	; 0x40d2 <lora_driver_sendUploadMessage+0x184>
    3f6a:	99 23       	and	r25, r25
    3f6c:	81 f1       	breq	.+96     	; 0x3fce <lora_driver_sendUploadMessage+0x80>
    3f6e:	60 e0       	ldi	r22, 0x00	; 0
    3f70:	70 e0       	ldi	r23, 0x00	; 0
    3f72:	27 2f       	mov	r18, r23
    3f74:	30 e0       	ldi	r19, 0x00	; 0
    3f76:	46 2f       	mov	r20, r22
    3f78:	50 e0       	ldi	r21, 0x00	; 0
    3f7a:	fd 01       	movw	r30, r26
    3f7c:	e4 0f       	add	r30, r20
    3f7e:	f5 1f       	adc	r31, r21
    3f80:	92 81       	ldd	r25, Z+2	; 0x02
    3f82:	92 95       	swap	r25
    3f84:	9f 70       	andi	r25, 0x0F	; 15
    3f86:	9a 30       	cpi	r25, 0x0A	; 10
    3f88:	10 f0       	brcs	.+4      	; 0x3f8e <lora_driver_sendUploadMessage+0x40>
    3f8a:	99 5c       	subi	r25, 0xC9	; 201
    3f8c:	01 c0       	rjmp	.+2      	; 0x3f90 <lora_driver_sendUploadMessage+0x42>
    3f8e:	90 5d       	subi	r25, 0xD0	; 208
    3f90:	f9 01       	movw	r30, r18
    3f92:	e9 58       	subi	r30, 0x89	; 137
    3f94:	f8 4e       	sbci	r31, 0xE8	; 232
    3f96:	90 83       	st	Z, r25
    3f98:	2f 5f       	subi	r18, 0xFF	; 255
    3f9a:	3f 4f       	sbci	r19, 0xFF	; 255
    3f9c:	fd 01       	movw	r30, r26
    3f9e:	e4 0f       	add	r30, r20
    3fa0:	f5 1f       	adc	r31, r21
    3fa2:	92 81       	ldd	r25, Z+2	; 0x02
    3fa4:	9f 70       	andi	r25, 0x0F	; 15
    3fa6:	49 2f       	mov	r20, r25
    3fa8:	50 e0       	ldi	r21, 0x00	; 0
    3faa:	4a 30       	cpi	r20, 0x0A	; 10
    3fac:	51 05       	cpc	r21, r1
    3fae:	14 f0       	brlt	.+4      	; 0x3fb4 <lora_driver_sendUploadMessage+0x66>
    3fb0:	99 5c       	subi	r25, 0xC9	; 201
    3fb2:	01 c0       	rjmp	.+2      	; 0x3fb6 <lora_driver_sendUploadMessage+0x68>
    3fb4:	90 5d       	subi	r25, 0xD0	; 208
    3fb6:	f9 01       	movw	r30, r18
    3fb8:	e9 58       	subi	r30, 0x89	; 137
    3fba:	f8 4e       	sbci	r31, 0xE8	; 232
    3fbc:	90 83       	st	Z, r25
    3fbe:	7e 5f       	subi	r23, 0xFE	; 254
    3fc0:	6f 5f       	subi	r22, 0xFF	; 255
    3fc2:	11 96       	adiw	r26, 0x01	; 1
    3fc4:	9c 91       	ld	r25, X
    3fc6:	11 97       	sbiw	r26, 0x01	; 1
    3fc8:	69 17       	cp	r22, r25
    3fca:	98 f2       	brcs	.-90     	; 0x3f72 <lora_driver_sendUploadMessage+0x24>
    3fcc:	01 c0       	rjmp	.+2      	; 0x3fd0 <lora_driver_sendUploadMessage+0x82>
    3fce:	70 e0       	ldi	r23, 0x00	; 0
    3fd0:	e7 2f       	mov	r30, r23
    3fd2:	f0 e0       	ldi	r31, 0x00	; 0
    3fd4:	e9 58       	subi	r30, 0x89	; 137
    3fd6:	f8 4e       	sbci	r31, 0xE8	; 232
    3fd8:	10 82       	st	Z, r1
    3fda:	4c 91       	ld	r20, X
    3fdc:	81 11       	cpse	r24, r1
    3fde:	03 c0       	rjmp	.+6      	; 0x3fe6 <lora_driver_sendUploadMessage+0x98>
    3fe0:	89 e2       	ldi	r24, 0x29	; 41
    3fe2:	96 e0       	ldi	r25, 0x06	; 6
    3fe4:	02 c0       	rjmp	.+4      	; 0x3fea <lora_driver_sendUploadMessage+0x9c>
    3fe6:	8b e2       	ldi	r24, 0x2B	; 43
    3fe8:	96 e0       	ldi	r25, 0x06	; 6
    3fea:	27 e7       	ldi	r18, 0x77	; 119
    3fec:	37 e1       	ldi	r19, 0x17	; 23
    3fee:	3f 93       	push	r19
    3ff0:	2f 93       	push	r18
    3ff2:	1f 92       	push	r1
    3ff4:	4f 93       	push	r20
    3ff6:	9f 93       	push	r25
    3ff8:	8f 93       	push	r24
    3ffa:	8f e2       	ldi	r24, 0x2F	; 47
    3ffc:	96 e0       	ldi	r25, 0x06	; 6
    3ffe:	9f 93       	push	r25
    4000:	8f 93       	push	r24
    4002:	89 eb       	ldi	r24, 0xB9	; 185
    4004:	97 e1       	ldi	r25, 0x17	; 23
    4006:	9f 93       	push	r25
    4008:	8f 93       	push	r24
    400a:	0e 94 20 30 	call	0x6040	; 0x6040 <sprintf>
    400e:	60 e0       	ldi	r22, 0x00	; 0
    4010:	70 e0       	ldi	r23, 0x00	; 0
    4012:	89 eb       	ldi	r24, 0xB9	; 185
    4014:	97 e1       	ldi	r25, 0x17	; 23
    4016:	b3 de       	rcall	.-666    	; 0x3d7e <_uploadMessageRc>
    4018:	0f b6       	in	r0, 0x3f	; 63
    401a:	f8 94       	cli
    401c:	de bf       	out	0x3e, r29	; 62
    401e:	0f be       	out	0x3f, r0	; 63
    4020:	cd bf       	out	0x3d, r28	; 61
    4022:	81 11       	cpse	r24, r1
    4024:	59 c0       	rjmp	.+178    	; 0x40d8 <lora_driver_sendUploadMessage+0x18a>
    4026:	08 e2       	ldi	r16, 0x28	; 40
    4028:	15 e0       	ldi	r17, 0x05	; 5
    402a:	20 e0       	ldi	r18, 0x00	; 0
    402c:	30 e0       	ldi	r19, 0x00	; 0
    402e:	4d e2       	ldi	r20, 0x2D	; 45
    4030:	50 e0       	ldi	r21, 0x00	; 0
    4032:	66 ee       	ldi	r22, 0xE6	; 230
    4034:	77 e1       	ldi	r23, 0x17	; 23
    4036:	80 91 5d 17 	lds	r24, 0x175D	; 0x80175d <_serialReplyBufferHandle>
    403a:	90 91 5e 17 	lds	r25, 0x175E	; 0x80175e <_serialReplyBufferHandle+0x1>
    403e:	0e 94 3a 0a 	call	0x1474	; 0x1474 <xStreamBufferReceive>
    4042:	88 23       	and	r24, r24
    4044:	09 f4       	brne	.+2      	; 0x4048 <lora_driver_sendUploadMessage+0xfa>
    4046:	47 c0       	rjmp	.+142    	; 0x40d6 <lora_driver_sendUploadMessage+0x188>
    4048:	86 ee       	ldi	r24, 0xE6	; 230
    404a:	97 e1       	ldi	r25, 0x17	; 23
    404c:	23 de       	rcall	.-954    	; 0x3c94 <_reply2ReturnCode>
    404e:	8e 30       	cpi	r24, 0x0E	; 14
    4050:	09 f0       	breq	.+2      	; 0x4054 <lora_driver_sendUploadMessage+0x106>
    4052:	42 c0       	rjmp	.+132    	; 0x40d8 <lora_driver_sendUploadMessage+0x18a>
    4054:	87 e0       	ldi	r24, 0x07	; 7
    4056:	89 83       	std	Y+1, r24	; 0x01
    4058:	80 91 5b 17 	lds	r24, 0x175B	; 0x80175b <_downlinkMessageBuffer>
    405c:	90 91 5c 17 	lds	r25, 0x175C	; 0x80175c <_downlinkMessageBuffer+0x1>
    4060:	89 2b       	or	r24, r25
    4062:	a9 f1       	breq	.+106    	; 0x40ce <lora_driver_sendUploadMessage+0x180>
    4064:	be 01       	movw	r22, r28
    4066:	6f 5f       	subi	r22, 0xFF	; 255
    4068:	7f 4f       	sbci	r23, 0xFF	; 255
    406a:	86 ee       	ldi	r24, 0xE6	; 230
    406c:	97 e1       	ldi	r25, 0x17	; 23
    406e:	68 d1       	rcall	.+720    	; 0x4340 <decode_port_no>
    4070:	80 93 61 17 	sts	0x1761, r24	; 0x801761 <_downlinkPayload>
    4074:	e9 81       	ldd	r30, Y+1	; 0x01
    4076:	f0 e0       	ldi	r31, 0x00	; 0
    4078:	ea 51       	subi	r30, 0x1A	; 26
    407a:	f8 4e       	sbci	r31, 0xE8	; 232
    407c:	df 01       	movw	r26, r30
    407e:	0d 90       	ld	r0, X+
    4080:	00 20       	and	r0, r0
    4082:	e9 f7       	brne	.-6      	; 0x407e <lora_driver_sendUploadMessage+0x130>
    4084:	11 97       	sbiw	r26, 0x01	; 1
    4086:	ae 1b       	sub	r26, r30
    4088:	bf 0b       	sbc	r27, r31
    408a:	aa 23       	and	r26, r26
    408c:	91 f0       	breq	.+36     	; 0x40b2 <lora_driver_sendUploadMessage+0x164>
    408e:	bb 27       	eor	r27, r27
    4090:	cd 01       	movw	r24, r26
    4092:	01 97       	sbiw	r24, 0x01	; 1
    4094:	9c 01       	movw	r18, r24
    4096:	12 f4       	brpl	.+4      	; 0x409c <lora_driver_sendUploadMessage+0x14e>
    4098:	2f 5f       	subi	r18, 0xFF	; 255
    409a:	3f 4f       	sbci	r19, 0xFF	; 255
    409c:	35 95       	asr	r19
    409e:	27 95       	ror	r18
    40a0:	20 93 62 17 	sts	0x1762, r18	; 0x801762 <_downlinkPayload+0x1>
    40a4:	af 01       	movw	r20, r30
    40a6:	4f 5f       	subi	r20, 0xFF	; 255
    40a8:	5f 4f       	sbci	r21, 0xFF	; 255
    40aa:	64 e1       	ldi	r22, 0x14	; 20
    40ac:	83 e6       	ldi	r24, 0x63	; 99
    40ae:	97 e1       	ldi	r25, 0x17	; 23
    40b0:	73 d1       	rcall	.+742    	; 0x4398 <decode_hexadecimal_string_bytes>
    40b2:	01 e0       	ldi	r16, 0x01	; 1
    40b4:	10 e0       	ldi	r17, 0x00	; 0
    40b6:	20 e0       	ldi	r18, 0x00	; 0
    40b8:	30 e0       	ldi	r19, 0x00	; 0
    40ba:	46 e1       	ldi	r20, 0x16	; 22
    40bc:	50 e0       	ldi	r21, 0x00	; 0
    40be:	61 e6       	ldi	r22, 0x61	; 97
    40c0:	77 e1       	ldi	r23, 0x17	; 23
    40c2:	80 91 5b 17 	lds	r24, 0x175B	; 0x80175b <_downlinkMessageBuffer>
    40c6:	90 91 5c 17 	lds	r25, 0x175C	; 0x80175c <_downlinkMessageBuffer+0x1>
    40ca:	0e 94 33 09 	call	0x1266	; 0x1266 <xStreamBufferSend>
    40ce:	8e e0       	ldi	r24, 0x0E	; 14
    40d0:	03 c0       	rjmp	.+6      	; 0x40d8 <lora_driver_sendUploadMessage+0x18a>
    40d2:	84 e1       	ldi	r24, 0x14	; 20
    40d4:	01 c0       	rjmp	.+2      	; 0x40d8 <lora_driver_sendUploadMessage+0x18a>
    40d6:	80 e0       	ldi	r24, 0x00	; 0
    40d8:	0f 90       	pop	r0
    40da:	df 91       	pop	r29
    40dc:	cf 91       	pop	r28
    40de:	1f 91       	pop	r17
    40e0:	0f 91       	pop	r16
    40e2:	08 95       	ret

000040e4 <lora_driver_setAdaptiveDataRate>:
    40e4:	81 30       	cpi	r24, 0x01	; 1
    40e6:	19 f0       	breq	.+6      	; 0x40ee <lora_driver_setAdaptiveDataRate+0xa>
    40e8:	6f e3       	ldi	r22, 0x3F	; 63
    40ea:	76 e0       	ldi	r23, 0x06	; 6
    40ec:	02 c0       	rjmp	.+4      	; 0x40f2 <lora_driver_setAdaptiveDataRate+0xe>
    40ee:	68 e1       	ldi	r22, 0x18	; 24
    40f0:	77 e0       	ldi	r23, 0x07	; 7
    40f2:	83 e4       	ldi	r24, 0x43	; 67
    40f4:	96 e0       	ldi	r25, 0x06	; 6
    40f6:	43 ce       	rjmp	.-890    	; 0x3d7e <_uploadMessageRc>
    40f8:	08 95       	ret

000040fa <lora_driver_setReceiveDelay>:
    40fa:	9f 93       	push	r25
    40fc:	8f 93       	push	r24
    40fe:	84 e7       	ldi	r24, 0x74	; 116
    4100:	96 e0       	ldi	r25, 0x06	; 6
    4102:	9f 93       	push	r25
    4104:	8f 93       	push	r24
    4106:	89 eb       	ldi	r24, 0xB9	; 185
    4108:	97 e1       	ldi	r25, 0x17	; 23
    410a:	9f 93       	push	r25
    410c:	8f 93       	push	r24
    410e:	0e 94 20 30 	call	0x6040	; 0x6040 <sprintf>
    4112:	60 e0       	ldi	r22, 0x00	; 0
    4114:	70 e0       	ldi	r23, 0x00	; 0
    4116:	89 eb       	ldi	r24, 0xB9	; 185
    4118:	97 e1       	ldi	r25, 0x17	; 23
    411a:	31 de       	rcall	.-926    	; 0x3d7e <_uploadMessageRc>
    411c:	0f 90       	pop	r0
    411e:	0f 90       	pop	r0
    4120:	0f 90       	pop	r0
    4122:	0f 90       	pop	r0
    4124:	0f 90       	pop	r0
    4126:	0f 90       	pop	r0
    4128:	08 95       	ret

0000412a <lora_driver_configureToEu868>:
    412a:	2f 92       	push	r2
    412c:	3f 92       	push	r3
    412e:	4f 92       	push	r4
    4130:	5f 92       	push	r5
    4132:	6f 92       	push	r6
    4134:	7f 92       	push	r7
    4136:	8f 92       	push	r8
    4138:	9f 92       	push	r9
    413a:	af 92       	push	r10
    413c:	bf 92       	push	r11
    413e:	cf 92       	push	r12
    4140:	df 92       	push	r13
    4142:	ef 92       	push	r14
    4144:	ff 92       	push	r15
    4146:	0f 93       	push	r16
    4148:	1f 93       	push	r17
    414a:	cf 93       	push	r28
    414c:	df 93       	push	r29
    414e:	cd b7       	in	r28, 0x3d	; 61
    4150:	de b7       	in	r29, 0x3e	; 62
    4152:	a0 97       	sbiw	r28, 0x20	; 32
    4154:	0f b6       	in	r0, 0x3f	; 63
    4156:	f8 94       	cli
    4158:	de bf       	out	0x3e, r29	; 62
    415a:	0f be       	out	0x3f, r0	; 63
    415c:	cd bf       	out	0x3d, r28	; 61
    415e:	61 ea       	ldi	r22, 0xA1	; 161
    4160:	76 e0       	ldi	r23, 0x06	; 6
    4162:	8d ea       	ldi	r24, 0xAD	; 173
    4164:	96 e0       	ldi	r25, 0x06	; 6
    4166:	3c dd       	rcall	.-1416   	; 0x3be0 <_uploadMessage>
    4168:	95 dd       	rcall	.-1238   	; 0x3c94 <_reply2ReturnCode>
    416a:	81 11       	cpse	r24, r1
    416c:	a3 c0       	rjmp	.+326    	; 0x42b4 <lora_driver_configureToEu868+0x18a>
    416e:	80 e2       	ldi	r24, 0x20	; 32
    4170:	e2 e2       	ldi	r30, 0x22	; 34
    4172:	f2 e0       	ldi	r31, 0x02	; 2
    4174:	de 01       	movw	r26, r28
    4176:	11 96       	adiw	r26, 0x01	; 1
    4178:	01 90       	ld	r0, Z+
    417a:	0d 92       	st	X+, r0
    417c:	8a 95       	dec	r24
    417e:	e1 f7       	brne	.-8      	; 0x4178 <lora_driver_configureToEu868+0x4e>
    4180:	9e 01       	movw	r18, r28
    4182:	2f 5f       	subi	r18, 0xFF	; 255
    4184:	3f 4f       	sbci	r19, 0xFF	; 255
    4186:	69 01       	movw	r12, r18
    4188:	e1 2c       	mov	r14, r1
    418a:	f1 2c       	mov	r15, r1
    418c:	0f 2e       	mov	r0, r31
    418e:	f9 eb       	ldi	r31, 0xB9	; 185
    4190:	af 2e       	mov	r10, r31
    4192:	f6 e0       	ldi	r31, 0x06	; 6
    4194:	bf 2e       	mov	r11, r31
    4196:	f0 2d       	mov	r31, r0
    4198:	09 eb       	ldi	r16, 0xB9	; 185
    419a:	17 e1       	ldi	r17, 0x17	; 23
    419c:	0f 2e       	mov	r0, r31
    419e:	f2 ed       	ldi	r31, 0xD2	; 210
    41a0:	4f 2e       	mov	r4, r31
    41a2:	f6 e0       	ldi	r31, 0x06	; 6
    41a4:	5f 2e       	mov	r5, r31
    41a6:	f0 2d       	mov	r31, r0
    41a8:	0f 2e       	mov	r0, r31
    41aa:	f9 ee       	ldi	r31, 0xE9	; 233
    41ac:	8f 2e       	mov	r8, r31
    41ae:	f6 e0       	ldi	r31, 0x06	; 6
    41b0:	9f 2e       	mov	r9, r31
    41b2:	f0 2d       	mov	r31, r0
    41b4:	0f 2e       	mov	r0, r31
    41b6:	f3 e0       	ldi	r31, 0x03	; 3
    41b8:	6f 2e       	mov	r6, r31
    41ba:	f7 e0       	ldi	r31, 0x07	; 7
    41bc:	7f 2e       	mov	r7, r31
    41be:	f0 2d       	mov	r31, r0
    41c0:	3e 2c       	mov	r3, r14
    41c2:	2f 2c       	mov	r2, r15
    41c4:	ff 92       	push	r15
    41c6:	ef 92       	push	r14
    41c8:	bf 92       	push	r11
    41ca:	af 92       	push	r10
    41cc:	1f 93       	push	r17
    41ce:	0f 93       	push	r16
    41d0:	0e 94 20 30 	call	0x6040	; 0x6040 <sprintf>
    41d4:	60 e0       	ldi	r22, 0x00	; 0
    41d6:	70 e0       	ldi	r23, 0x00	; 0
    41d8:	c8 01       	movw	r24, r16
    41da:	02 dd       	rcall	.-1532   	; 0x3be0 <_uploadMessage>
    41dc:	5b dd       	rcall	.-1354   	; 0x3c94 <_reply2ReturnCode>
    41de:	0f 90       	pop	r0
    41e0:	0f 90       	pop	r0
    41e2:	0f 90       	pop	r0
    41e4:	0f 90       	pop	r0
    41e6:	0f 90       	pop	r0
    41e8:	0f 90       	pop	r0
    41ea:	81 11       	cpse	r24, r1
    41ec:	63 c0       	rjmp	.+198    	; 0x42b4 <lora_driver_configureToEu868+0x18a>
    41ee:	32 e0       	ldi	r19, 0x02	; 2
    41f0:	3e 15       	cp	r19, r14
    41f2:	e8 f4       	brcc	.+58     	; 0x422e <lora_driver_configureToEu868+0x104>
    41f4:	f6 01       	movw	r30, r12
    41f6:	83 81       	ldd	r24, Z+3	; 0x03
    41f8:	8f 93       	push	r24
    41fa:	82 81       	ldd	r24, Z+2	; 0x02
    41fc:	8f 93       	push	r24
    41fe:	81 81       	ldd	r24, Z+1	; 0x01
    4200:	8f 93       	push	r24
    4202:	80 81       	ld	r24, Z
    4204:	8f 93       	push	r24
    4206:	ff 92       	push	r15
    4208:	ef 92       	push	r14
    420a:	5f 92       	push	r5
    420c:	4f 92       	push	r4
    420e:	1f 93       	push	r17
    4210:	0f 93       	push	r16
    4212:	0e 94 20 30 	call	0x6040	; 0x6040 <sprintf>
    4216:	60 e0       	ldi	r22, 0x00	; 0
    4218:	70 e0       	ldi	r23, 0x00	; 0
    421a:	c8 01       	movw	r24, r16
    421c:	e1 dc       	rcall	.-1598   	; 0x3be0 <_uploadMessage>
    421e:	3a dd       	rcall	.-1420   	; 0x3c94 <_reply2ReturnCode>
    4220:	0f b6       	in	r0, 0x3f	; 63
    4222:	f8 94       	cli
    4224:	de bf       	out	0x3e, r29	; 62
    4226:	0f be       	out	0x3f, r0	; 63
    4228:	cd bf       	out	0x3d, r28	; 61
    422a:	81 11       	cpse	r24, r1
    422c:	43 c0       	rjmp	.+134    	; 0x42b4 <lora_driver_configureToEu868+0x18a>
    422e:	2f 92       	push	r2
    4230:	3f 92       	push	r3
    4232:	9f 92       	push	r9
    4234:	8f 92       	push	r8
    4236:	1f 93       	push	r17
    4238:	0f 93       	push	r16
    423a:	0e 94 20 30 	call	0x6040	; 0x6040 <sprintf>
    423e:	60 e0       	ldi	r22, 0x00	; 0
    4240:	70 e0       	ldi	r23, 0x00	; 0
    4242:	c8 01       	movw	r24, r16
    4244:	cd dc       	rcall	.-1638   	; 0x3be0 <_uploadMessage>
    4246:	26 dd       	rcall	.-1460   	; 0x3c94 <_reply2ReturnCode>
    4248:	0f 90       	pop	r0
    424a:	0f 90       	pop	r0
    424c:	0f 90       	pop	r0
    424e:	0f 90       	pop	r0
    4250:	0f 90       	pop	r0
    4252:	0f 90       	pop	r0
    4254:	81 11       	cpse	r24, r1
    4256:	2e c0       	rjmp	.+92     	; 0x42b4 <lora_driver_configureToEu868+0x18a>
    4258:	2f 92       	push	r2
    425a:	3f 92       	push	r3
    425c:	7f 92       	push	r7
    425e:	6f 92       	push	r6
    4260:	1f 93       	push	r17
    4262:	0f 93       	push	r16
    4264:	0e 94 20 30 	call	0x6040	; 0x6040 <sprintf>
    4268:	60 e0       	ldi	r22, 0x00	; 0
    426a:	70 e0       	ldi	r23, 0x00	; 0
    426c:	c8 01       	movw	r24, r16
    426e:	b8 dc       	rcall	.-1680   	; 0x3be0 <_uploadMessage>
    4270:	11 dd       	rcall	.-1502   	; 0x3c94 <_reply2ReturnCode>
    4272:	0f 90       	pop	r0
    4274:	0f 90       	pop	r0
    4276:	0f 90       	pop	r0
    4278:	0f 90       	pop	r0
    427a:	0f 90       	pop	r0
    427c:	0f 90       	pop	r0
    427e:	81 11       	cpse	r24, r1
    4280:	19 c0       	rjmp	.+50     	; 0x42b4 <lora_driver_configureToEu868+0x18a>
    4282:	3f ef       	ldi	r19, 0xFF	; 255
    4284:	e3 1a       	sub	r14, r19
    4286:	f3 0a       	sbc	r15, r19
    4288:	84 e0       	ldi	r24, 0x04	; 4
    428a:	c8 0e       	add	r12, r24
    428c:	d1 1c       	adc	r13, r1
    428e:	98 e0       	ldi	r25, 0x08	; 8
    4290:	e9 16       	cp	r14, r25
    4292:	f1 04       	cpc	r15, r1
    4294:	09 f0       	breq	.+2      	; 0x4298 <lora_driver_configureToEu868+0x16e>
    4296:	94 cf       	rjmp	.-216    	; 0x41c0 <lora_driver_configureToEu868+0x96>
    4298:	60 e0       	ldi	r22, 0x00	; 0
    429a:	70 e0       	ldi	r23, 0x00	; 0
    429c:	8b e1       	ldi	r24, 0x1B	; 27
    429e:	97 e0       	ldi	r25, 0x07	; 7
    42a0:	9f dc       	rcall	.-1730   	; 0x3be0 <_uploadMessage>
    42a2:	f8 dc       	rcall	.-1552   	; 0x3c94 <_reply2ReturnCode>
    42a4:	81 11       	cpse	r24, r1
    42a6:	06 c0       	rjmp	.+12     	; 0x42b4 <lora_driver_configureToEu868+0x18a>
    42a8:	60 e0       	ldi	r22, 0x00	; 0
    42aa:	70 e0       	ldi	r23, 0x00	; 0
    42ac:	8c e2       	ldi	r24, 0x2C	; 44
    42ae:	97 e0       	ldi	r25, 0x07	; 7
    42b0:	97 dc       	rcall	.-1746   	; 0x3be0 <_uploadMessage>
    42b2:	f0 dc       	rcall	.-1568   	; 0x3c94 <_reply2ReturnCode>
    42b4:	a0 96       	adiw	r28, 0x20	; 32
    42b6:	0f b6       	in	r0, 0x3f	; 63
    42b8:	f8 94       	cli
    42ba:	de bf       	out	0x3e, r29	; 62
    42bc:	0f be       	out	0x3f, r0	; 63
    42be:	cd bf       	out	0x3d, r28	; 61
    42c0:	df 91       	pop	r29
    42c2:	cf 91       	pop	r28
    42c4:	1f 91       	pop	r17
    42c6:	0f 91       	pop	r16
    42c8:	ff 90       	pop	r15
    42ca:	ef 90       	pop	r14
    42cc:	df 90       	pop	r13
    42ce:	cf 90       	pop	r12
    42d0:	bf 90       	pop	r11
    42d2:	af 90       	pop	r10
    42d4:	9f 90       	pop	r9
    42d6:	8f 90       	pop	r8
    42d8:	7f 90       	pop	r7
    42da:	6f 90       	pop	r6
    42dc:	5f 90       	pop	r5
    42de:	4f 90       	pop	r4
    42e0:	3f 90       	pop	r3
    42e2:	2f 90       	pop	r2
    42e4:	08 95       	ret

000042e6 <lora_driver_setOtaaIdentity>:
    42e6:	ef 92       	push	r14
    42e8:	ff 92       	push	r15
    42ea:	0f 93       	push	r16
    42ec:	1f 93       	push	r17
    42ee:	cf 93       	push	r28
    42f0:	df 93       	push	r29
    42f2:	ec 01       	movw	r28, r24
    42f4:	8b 01       	movw	r16, r22
    42f6:	7a 01       	movw	r14, r20
    42f8:	81 e0       	ldi	r24, 0x01	; 1
    42fa:	f4 de       	rcall	.-536    	; 0x40e4 <lora_driver_setAdaptiveDataRate>
    42fc:	81 11       	cpse	r24, r1
    42fe:	0d c0       	rjmp	.+26     	; 0x431a <lora_driver_setOtaaIdentity+0x34>
    4300:	ce 01       	movw	r24, r28
    4302:	d4 dd       	rcall	.-1112   	; 0x3eac <lora_driver_setApplicationIdentifier>
    4304:	81 11       	cpse	r24, r1
    4306:	09 c0       	rjmp	.+18     	; 0x431a <lora_driver_setOtaaIdentity+0x34>
    4308:	c8 01       	movw	r24, r16
    430a:	e1 dd       	rcall	.-1086   	; 0x3ece <lora_driver_setApplicationKey>
    430c:	81 11       	cpse	r24, r1
    430e:	05 c0       	rjmp	.+10     	; 0x431a <lora_driver_setOtaaIdentity+0x34>
    4310:	c7 01       	movw	r24, r14
    4312:	bb dd       	rcall	.-1162   	; 0x3e8a <lora_driver_setDeviceIdentifier>
    4314:	81 11       	cpse	r24, r1
    4316:	01 c0       	rjmp	.+2      	; 0x431a <lora_driver_setOtaaIdentity+0x34>
    4318:	eb dd       	rcall	.-1066   	; 0x3ef0 <lora_driver_saveMac>
    431a:	df 91       	pop	r29
    431c:	cf 91       	pop	r28
    431e:	1f 91       	pop	r17
    4320:	0f 91       	pop	r16
    4322:	ff 90       	pop	r15
    4324:	ef 90       	pop	r14
    4326:	08 95       	ret

00004328 <lora_driver_mapReturnCodeToText>:
    4328:	90 e0       	ldi	r25, 0x00	; 0
    432a:	fc 01       	movw	r30, r24
    432c:	ee 0f       	add	r30, r30
    432e:	ff 1f       	adc	r31, r31
    4330:	8e 0f       	add	r24, r30
    4332:	9f 1f       	adc	r25, r31
    4334:	fc 01       	movw	r30, r24
    4336:	eb 50       	subi	r30, 0x0B	; 11
    4338:	f8 4f       	sbci	r31, 0xF8	; 248
    433a:	81 81       	ldd	r24, Z+1	; 0x01
    433c:	92 81       	ldd	r25, Z+2	; 0x02
    433e:	08 95       	ret

00004340 <decode_port_no>:
    4340:	dc 01       	movw	r26, r24
    4342:	00 97       	sbiw	r24, 0x00	; 0
    4344:	29 f1       	breq	.+74     	; 0x4390 <decode_port_no+0x50>
    4346:	fb 01       	movw	r30, r22
    4348:	20 81       	ld	r18, Z
    434a:	fc 01       	movw	r30, r24
    434c:	01 90       	ld	r0, Z+
    434e:	00 20       	and	r0, r0
    4350:	e9 f7       	brne	.-6      	; 0x434c <decode_port_no+0xc>
    4352:	31 97       	sbiw	r30, 0x01	; 1
    4354:	e8 1b       	sub	r30, r24
    4356:	f9 0b       	sbc	r31, r25
    4358:	82 2f       	mov	r24, r18
    435a:	90 e0       	ldi	r25, 0x00	; 0
    435c:	e8 17       	cp	r30, r24
    435e:	f9 07       	cpc	r31, r25
    4360:	c8 f0       	brcs	.+50     	; 0x4394 <decode_port_no+0x54>
    4362:	80 e0       	ldi	r24, 0x00	; 0
    4364:	08 c0       	rjmp	.+16     	; 0x4376 <decode_port_no+0x36>
    4366:	88 0f       	add	r24, r24
    4368:	38 2f       	mov	r19, r24
    436a:	33 0f       	add	r19, r19
    436c:	33 0f       	add	r19, r19
    436e:	83 0f       	add	r24, r19
    4370:	80 53       	subi	r24, 0x30	; 48
    4372:	89 0f       	add	r24, r25
    4374:	2f 5f       	subi	r18, 0xFF	; 255
    4376:	fd 01       	movw	r30, r26
    4378:	e2 0f       	add	r30, r18
    437a:	f1 1d       	adc	r31, r1
    437c:	90 81       	ld	r25, Z
    437e:	30 ed       	ldi	r19, 0xD0	; 208
    4380:	39 0f       	add	r19, r25
    4382:	3a 30       	cpi	r19, 0x0A	; 10
    4384:	10 f4       	brcc	.+4      	; 0x438a <decode_port_no+0x4a>
    4386:	91 11       	cpse	r25, r1
    4388:	ee cf       	rjmp	.-36     	; 0x4366 <decode_port_no+0x26>
    438a:	fb 01       	movw	r30, r22
    438c:	20 83       	st	Z, r18
    438e:	08 95       	ret
    4390:	80 e0       	ldi	r24, 0x00	; 0
    4392:	08 95       	ret
    4394:	80 e0       	ldi	r24, 0x00	; 0
    4396:	08 95       	ret

00004398 <decode_hexadecimal_string_bytes>:
    4398:	0f 93       	push	r16
    439a:	1f 93       	push	r17
    439c:	cf 93       	push	r28
    439e:	df 93       	push	r29
    43a0:	dc 01       	movw	r26, r24
    43a2:	ea 01       	movw	r28, r20
    43a4:	20 97       	sbiw	r28, 0x00	; 0
    43a6:	e1 f1       	breq	.+120    	; 0x4420 <decode_hexadecimal_string_bytes+0x88>
    43a8:	fa 01       	movw	r30, r20
    43aa:	01 90       	ld	r0, Z+
    43ac:	00 20       	and	r0, r0
    43ae:	e9 f7       	brne	.-6      	; 0x43aa <decode_hexadecimal_string_bytes+0x12>
    43b0:	31 97       	sbiw	r30, 0x01	; 1
    43b2:	e4 1b       	sub	r30, r20
    43b4:	f5 0b       	sbc	r31, r21
    43b6:	32 97       	sbiw	r30, 0x02	; 2
    43b8:	10 f5       	brcc	.+68     	; 0x43fe <decode_hexadecimal_string_bytes+0x66>
    43ba:	32 c0       	rjmp	.+100    	; 0x4420 <decode_hexadecimal_string_bytes+0x88>
    43bc:	8d 01       	movw	r16, r26
    43be:	04 0f       	add	r16, r20
    43c0:	15 1f       	adc	r17, r21
    43c2:	30 e0       	ldi	r19, 0x00	; 0
    43c4:	ae 01       	movw	r20, r28
    43c6:	42 0f       	add	r20, r18
    43c8:	53 1f       	adc	r21, r19
    43ca:	fa 01       	movw	r30, r20
    43cc:	90 81       	ld	r25, Z
    43ce:	91 34       	cpi	r25, 0x41	; 65
    43d0:	28 f0       	brcs	.+10     	; 0x43dc <decode_hexadecimal_string_bytes+0x44>
    43d2:	97 53       	subi	r25, 0x37	; 55
    43d4:	59 2f       	mov	r21, r25
    43d6:	52 95       	swap	r21
    43d8:	50 7f       	andi	r21, 0xF0	; 240
    43da:	03 c0       	rjmp	.+6      	; 0x43e2 <decode_hexadecimal_string_bytes+0x4a>
    43dc:	59 2f       	mov	r21, r25
    43de:	52 95       	swap	r21
    43e0:	50 7f       	andi	r21, 0xF0	; 240
    43e2:	2c 0f       	add	r18, r28
    43e4:	3d 1f       	adc	r19, r29
    43e6:	f9 01       	movw	r30, r18
    43e8:	91 81       	ldd	r25, Z+1	; 0x01
    43ea:	91 34       	cpi	r25, 0x41	; 65
    43ec:	10 f0       	brcs	.+4      	; 0x43f2 <decode_hexadecimal_string_bytes+0x5a>
    43ee:	97 53       	subi	r25, 0x37	; 55
    43f0:	01 c0       	rjmp	.+2      	; 0x43f4 <decode_hexadecimal_string_bytes+0x5c>
    43f2:	90 53       	subi	r25, 0x30	; 48
    43f4:	95 0f       	add	r25, r21
    43f6:	f8 01       	movw	r30, r16
    43f8:	90 83       	st	Z, r25
    43fa:	8f 5f       	subi	r24, 0xFF	; 255
    43fc:	01 c0       	rjmp	.+2      	; 0x4400 <decode_hexadecimal_string_bytes+0x68>
    43fe:	80 e0       	ldi	r24, 0x00	; 0
    4400:	28 2f       	mov	r18, r24
    4402:	22 0f       	add	r18, r18
    4404:	48 2f       	mov	r20, r24
    4406:	50 e0       	ldi	r21, 0x00	; 0
    4408:	fe 01       	movw	r30, r28
    440a:	01 90       	ld	r0, Z+
    440c:	00 20       	and	r0, r0
    440e:	e9 f7       	brne	.-6      	; 0x440a <decode_hexadecimal_string_bytes+0x72>
    4410:	31 97       	sbiw	r30, 0x01	; 1
    4412:	ec 1b       	sub	r30, r28
    4414:	fd 0b       	sbc	r31, r29
    4416:	4e 17       	cp	r20, r30
    4418:	5f 07       	cpc	r21, r31
    441a:	10 f4       	brcc	.+4      	; 0x4420 <decode_hexadecimal_string_bytes+0x88>
    441c:	86 13       	cpse	r24, r22
    441e:	ce cf       	rjmp	.-100    	; 0x43bc <decode_hexadecimal_string_bytes+0x24>
    4420:	df 91       	pop	r29
    4422:	cf 91       	pop	r28
    4424:	1f 91       	pop	r17
    4426:	0f 91       	pop	r16
    4428:	08 95       	ret

0000442a <_serialCallBack>:
    442a:	80 91 16 18 	lds	r24, 0x1816	; 0x801816 <crc_sum.1945>
    442e:	86 0f       	add	r24, r22
    4430:	80 93 16 18 	sts	0x1816, r24	; 0x801816 <crc_sum.1945>
    4434:	90 91 19 18 	lds	r25, 0x1819	; 0x801819 <_mh_state>
    4438:	91 30       	cpi	r25, 0x01	; 1
    443a:	79 f0       	breq	.+30     	; 0x445a <_serialCallBack+0x30>
    443c:	28 f0       	brcs	.+10     	; 0x4448 <_serialCallBack+0x1e>
    443e:	92 30       	cpi	r25, 0x02	; 2
    4440:	a9 f0       	breq	.+42     	; 0x446c <_serialCallBack+0x42>
    4442:	93 30       	cpi	r25, 0x03	; 3
    4444:	19 f1       	breq	.+70     	; 0x448c <_serialCallBack+0x62>
    4446:	08 95       	ret
    4448:	6f 3f       	cpi	r22, 0xFF	; 255
    444a:	09 f0       	breq	.+2      	; 0x444e <_serialCallBack+0x24>
    444c:	48 c0       	rjmp	.+144    	; 0x44de <_serialCallBack+0xb4>
    444e:	10 92 16 18 	sts	0x1816, r1	; 0x801816 <crc_sum.1945>
    4452:	81 e0       	ldi	r24, 0x01	; 1
    4454:	80 93 19 18 	sts	0x1819, r24	; 0x801819 <_mh_state>
    4458:	08 95       	ret
    445a:	66 38       	cpi	r22, 0x86	; 134
    445c:	09 f0       	breq	.+2      	; 0x4460 <_serialCallBack+0x36>
    445e:	3f c0       	rjmp	.+126    	; 0x44de <_serialCallBack+0xb4>
    4460:	10 92 15 18 	sts	0x1815, r1	; 0x801815 <inDex.1943>
    4464:	82 e0       	ldi	r24, 0x02	; 2
    4466:	80 93 19 18 	sts	0x1819, r24	; 0x801819 <_mh_state>
    446a:	08 95       	ret
    446c:	e0 91 15 18 	lds	r30, 0x1815	; 0x801815 <inDex.1943>
    4470:	81 e0       	ldi	r24, 0x01	; 1
    4472:	8e 0f       	add	r24, r30
    4474:	80 93 15 18 	sts	0x1815, r24	; 0x801815 <inDex.1943>
    4478:	f0 e0       	ldi	r31, 0x00	; 0
    447a:	ed 5e       	subi	r30, 0xED	; 237
    447c:	f7 4e       	sbci	r31, 0xE7	; 231
    447e:	60 83       	st	Z, r22
    4480:	82 30       	cpi	r24, 0x02	; 2
    4482:	69 f5       	brne	.+90     	; 0x44de <_serialCallBack+0xb4>
    4484:	83 e0       	ldi	r24, 0x03	; 3
    4486:	80 93 19 18 	sts	0x1819, r24	; 0x801819 <_mh_state>
    448a:	08 95       	ret
    448c:	90 91 15 18 	lds	r25, 0x1815	; 0x801815 <inDex.1943>
    4490:	21 e0       	ldi	r18, 0x01	; 1
    4492:	29 0f       	add	r18, r25
    4494:	20 93 15 18 	sts	0x1815, r18	; 0x801815 <inDex.1943>
    4498:	96 30       	cpi	r25, 0x06	; 6
    449a:	09 f5       	brne	.+66     	; 0x44de <_serialCallBack+0xb4>
    449c:	81 11       	cpse	r24, r1
    449e:	0e c0       	rjmp	.+28     	; 0x44bc <_serialCallBack+0x92>
    44a0:	e3 e1       	ldi	r30, 0x13	; 19
    44a2:	f8 e1       	ldi	r31, 0x18	; 24
    44a4:	80 81       	ld	r24, Z
    44a6:	90 e0       	ldi	r25, 0x00	; 0
    44a8:	98 2f       	mov	r25, r24
    44aa:	88 27       	eor	r24, r24
    44ac:	21 81       	ldd	r18, Z+1	; 0x01
    44ae:	82 0f       	add	r24, r18
    44b0:	91 1d       	adc	r25, r1
    44b2:	90 93 1b 18 	sts	0x181B, r25	; 0x80181b <_ppm+0x1>
    44b6:	80 93 1a 18 	sts	0x181A, r24	; 0x80181a <_ppm>
    44ba:	04 c0       	rjmp	.+8      	; 0x44c4 <_serialCallBack+0x9a>
    44bc:	10 92 1b 18 	sts	0x181B, r1	; 0x80181b <_ppm+0x1>
    44c0:	10 92 1a 18 	sts	0x181A, r1	; 0x80181a <_ppm>
    44c4:	10 92 19 18 	sts	0x1819, r1	; 0x801819 <_mh_state>
    44c8:	e0 91 17 18 	lds	r30, 0x1817	; 0x801817 <_appCallBack>
    44cc:	f0 91 18 18 	lds	r31, 0x1818	; 0x801818 <_appCallBack+0x1>
    44d0:	30 97       	sbiw	r30, 0x00	; 0
    44d2:	29 f0       	breq	.+10     	; 0x44de <_serialCallBack+0xb4>
    44d4:	80 91 1a 18 	lds	r24, 0x181A	; 0x80181a <_ppm>
    44d8:	90 91 1b 18 	lds	r25, 0x181B	; 0x80181b <_ppm+0x1>
    44dc:	19 95       	eicall
    44de:	08 95       	ret

000044e0 <mh_z19_initialise>:
    44e0:	8f 92       	push	r8
    44e2:	9f 92       	push	r9
    44e4:	af 92       	push	r10
    44e6:	cf 92       	push	r12
    44e8:	ef 92       	push	r14
    44ea:	0f 93       	push	r16
    44ec:	0f 2e       	mov	r0, r31
    44ee:	f5 e1       	ldi	r31, 0x15	; 21
    44f0:	8f 2e       	mov	r8, r31
    44f2:	f2 e2       	ldi	r31, 0x22	; 34
    44f4:	9f 2e       	mov	r9, r31
    44f6:	f0 2d       	mov	r31, r0
    44f8:	68 94       	set
    44fa:	aa 24       	eor	r10, r10
    44fc:	a4 f8       	bld	r10, 4
    44fe:	68 94       	set
    4500:	cc 24       	eor	r12, r12
    4502:	c4 f8       	bld	r12, 4
    4504:	e1 2c       	mov	r14, r1
    4506:	00 e0       	ldi	r16, 0x00	; 0
    4508:	23 e0       	ldi	r18, 0x03	; 3
    450a:	40 e8       	ldi	r20, 0x80	; 128
    450c:	55 e2       	ldi	r21, 0x25	; 37
    450e:	60 e0       	ldi	r22, 0x00	; 0
    4510:	70 e0       	ldi	r23, 0x00	; 0
    4512:	50 d0       	rcall	.+160    	; 0x45b4 <serial_create>
    4514:	90 93 1d 18 	sts	0x181D, r25	; 0x80181d <_serial+0x1>
    4518:	80 93 1c 18 	sts	0x181C, r24	; 0x80181c <_serial>
    451c:	0f 91       	pop	r16
    451e:	ef 90       	pop	r14
    4520:	cf 90       	pop	r12
    4522:	af 90       	pop	r10
    4524:	9f 90       	pop	r9
    4526:	8f 90       	pop	r8
    4528:	08 95       	ret

0000452a <mh_z19_injectCallBack>:
    452a:	90 93 18 18 	sts	0x1818, r25	; 0x801818 <_appCallBack+0x1>
    452e:	80 93 17 18 	sts	0x1817, r24	; 0x801817 <_appCallBack>
    4532:	08 95       	ret

00004534 <mh_z19_takeMeassuring>:
    4534:	cf 93       	push	r28
    4536:	df 93       	push	r29
    4538:	cd b7       	in	r28, 0x3d	; 61
    453a:	de b7       	in	r29, 0x3e	; 62
    453c:	29 97       	sbiw	r28, 0x09	; 9
    453e:	0f b6       	in	r0, 0x3f	; 63
    4540:	f8 94       	cli
    4542:	de bf       	out	0x3e, r29	; 62
    4544:	0f be       	out	0x3f, r0	; 63
    4546:	cd bf       	out	0x3d, r28	; 61
    4548:	89 e0       	ldi	r24, 0x09	; 9
    454a:	e2 e4       	ldi	r30, 0x42	; 66
    454c:	f2 e0       	ldi	r31, 0x02	; 2
    454e:	9e 01       	movw	r18, r28
    4550:	2f 5f       	subi	r18, 0xFF	; 255
    4552:	3f 4f       	sbci	r19, 0xFF	; 255
    4554:	d9 01       	movw	r26, r18
    4556:	01 90       	ld	r0, Z+
    4558:	0d 92       	st	X+, r0
    455a:	8a 95       	dec	r24
    455c:	e1 f7       	brne	.-8      	; 0x4556 <mh_z19_takeMeassuring+0x22>
    455e:	10 92 1b 18 	sts	0x181B, r1	; 0x80181b <_ppm+0x1>
    4562:	10 92 1a 18 	sts	0x181A, r1	; 0x80181a <_ppm>
    4566:	80 91 1c 18 	lds	r24, 0x181C	; 0x80181c <_serial>
    456a:	90 91 1d 18 	lds	r25, 0x181D	; 0x80181d <_serial+0x1>
    456e:	00 97       	sbiw	r24, 0x00	; 0
    4570:	31 f0       	breq	.+12     	; 0x457e <mh_z19_takeMeassuring+0x4a>
    4572:	42 2f       	mov	r20, r18
    4574:	53 2f       	mov	r21, r19
    4576:	69 e0       	ldi	r22, 0x09	; 9
    4578:	f0 d0       	rcall	.+480    	; 0x475a <serial_sendBytes>
    457a:	80 e0       	ldi	r24, 0x00	; 0
    457c:	01 c0       	rjmp	.+2      	; 0x4580 <mh_z19_takeMeassuring+0x4c>
    457e:	82 e0       	ldi	r24, 0x02	; 2
    4580:	29 96       	adiw	r28, 0x09	; 9
    4582:	0f b6       	in	r0, 0x3f	; 63
    4584:	f8 94       	cli
    4586:	de bf       	out	0x3e, r29	; 62
    4588:	0f be       	out	0x3f, r0	; 63
    458a:	cd bf       	out	0x3d, r28	; 61
    458c:	df 91       	pop	r29
    458e:	cf 91       	pop	r28
    4590:	08 95       	ret

00004592 <mh_z19_getCo2Ppm>:
    4592:	20 91 1a 18 	lds	r18, 0x181A	; 0x80181a <_ppm>
    4596:	30 91 1b 18 	lds	r19, 0x181B	; 0x80181b <_ppm+0x1>
    459a:	21 15       	cp	r18, r1
    459c:	31 05       	cpc	r19, r1
    459e:	29 f4       	brne	.+10     	; 0x45aa <mh_z19_getCo2Ppm+0x18>
    45a0:	fc 01       	movw	r30, r24
    45a2:	11 82       	std	Z+1, r1	; 0x01
    45a4:	10 82       	st	Z, r1
    45a6:	81 e0       	ldi	r24, 0x01	; 1
    45a8:	08 95       	ret
    45aa:	fc 01       	movw	r30, r24
    45ac:	31 83       	std	Z+1, r19	; 0x01
    45ae:	20 83       	st	Z, r18
    45b0:	80 e0       	ldi	r24, 0x00	; 0
    45b2:	08 95       	ret

000045b4 <serial_create>:
    45b4:	2f 92       	push	r2
    45b6:	3f 92       	push	r3
    45b8:	4f 92       	push	r4
    45ba:	5f 92       	push	r5
    45bc:	6f 92       	push	r6
    45be:	7f 92       	push	r7
    45c0:	8f 92       	push	r8
    45c2:	9f 92       	push	r9
    45c4:	af 92       	push	r10
    45c6:	cf 92       	push	r12
    45c8:	ef 92       	push	r14
    45ca:	ff 92       	push	r15
    45cc:	0f 93       	push	r16
    45ce:	1f 93       	push	r17
    45d0:	cf 93       	push	r28
    45d2:	df 93       	push	r29
    45d4:	cd b7       	in	r28, 0x3d	; 61
    45d6:	de b7       	in	r29, 0x3e	; 62
    45d8:	f8 2e       	mov	r15, r24
    45da:	2a 01       	movw	r4, r20
    45dc:	3b 01       	movw	r6, r22
    45de:	88 e0       	ldi	r24, 0x08	; 8
    45e0:	90 e0       	ldi	r25, 0x00	; 0
    45e2:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <malloc>
    45e6:	8c 01       	movw	r16, r24
    45e8:	8f 2d       	mov	r24, r15
    45ea:	90 e0       	ldi	r25, 0x00	; 0
    45ec:	fc 01       	movw	r30, r24
    45ee:	ee 0f       	add	r30, r30
    45f0:	ff 1f       	adc	r31, r31
    45f2:	e2 5e       	subi	r30, 0xE2	; 226
    45f4:	f7 4e       	sbci	r31, 0xE7	; 231
    45f6:	11 83       	std	Z+1, r17	; 0x01
    45f8:	00 83       	st	Z, r16
    45fa:	01 15       	cp	r16, r1
    45fc:	11 05       	cpc	r17, r1
    45fe:	09 f4       	brne	.+2      	; 0x4602 <serial_create+0x4e>
    4600:	6f c0       	rjmp	.+222    	; 0x46e0 <serial_create+0x12c>
    4602:	88 0f       	add	r24, r24
    4604:	99 1f       	adc	r25, r25
    4606:	fc 01       	movw	r30, r24
    4608:	e5 5f       	subi	r30, 0xF5	; 245
    460a:	fd 4f       	sbci	r31, 0xFD	; 253
    460c:	80 81       	ld	r24, Z
    460e:	91 81       	ldd	r25, Z+1	; 0x01
    4610:	d8 01       	movw	r26, r16
    4612:	8d 93       	st	X+, r24
    4614:	9c 93       	st	X, r25
    4616:	8c 2d       	mov	r24, r12
    4618:	90 e0       	ldi	r25, 0x00	; 0
    461a:	88 0f       	add	r24, r24
    461c:	99 1f       	adc	r25, r25
    461e:	88 0f       	add	r24, r24
    4620:	99 1f       	adc	r25, r25
    4622:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <malloc>
    4626:	1c 01       	movw	r2, r24
    4628:	86 e0       	ldi	r24, 0x06	; 6
    462a:	90 e0       	ldi	r25, 0x00	; 0
    462c:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <malloc>
    4630:	7c 01       	movw	r14, r24
    4632:	4c 2d       	mov	r20, r12
    4634:	b1 01       	movw	r22, r2
    4636:	0e 94 0a 2c 	call	0x5814	; 0x5814 <fifo_init>
    463a:	f8 01       	movw	r30, r16
    463c:	f5 82       	std	Z+5, r15	; 0x05
    463e:	e4 82       	std	Z+4, r14	; 0x04
    4640:	8a 2d       	mov	r24, r10
    4642:	90 e0       	ldi	r25, 0x00	; 0
    4644:	88 0f       	add	r24, r24
    4646:	99 1f       	adc	r25, r25
    4648:	88 0f       	add	r24, r24
    464a:	99 1f       	adc	r25, r25
    464c:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <malloc>
    4650:	1c 01       	movw	r2, r24
    4652:	86 e0       	ldi	r24, 0x06	; 6
    4654:	90 e0       	ldi	r25, 0x00	; 0
    4656:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <malloc>
    465a:	7c 01       	movw	r14, r24
    465c:	4a 2d       	mov	r20, r10
    465e:	b1 01       	movw	r22, r2
    4660:	0e 94 0a 2c 	call	0x5814	; 0x5814 <fifo_init>
    4664:	d8 01       	movw	r26, r16
    4666:	13 96       	adiw	r26, 0x03	; 3
    4668:	fc 92       	st	X, r15
    466a:	ee 92       	st	-X, r14
    466c:	12 97       	sbiw	r26, 0x02	; 2
    466e:	17 96       	adiw	r26, 0x07	; 7
    4670:	9c 92       	st	X, r9
    4672:	8e 92       	st	-X, r8
    4674:	16 97       	sbiw	r26, 0x06	; 6
    4676:	ff b6       	in	r15, 0x3f	; 63
    4678:	f8 94       	cli
    467a:	ed 91       	ld	r30, X+
    467c:	fc 91       	ld	r31, X
    467e:	11 97       	sbiw	r26, 0x01	; 1
    4680:	36 97       	sbiw	r30, 0x06	; 6
    4682:	80 81       	ld	r24, Z
    4684:	82 60       	ori	r24, 0x02	; 2
    4686:	80 83       	st	Z, r24
    4688:	8d 90       	ld	r8, X+
    468a:	9c 90       	ld	r9, X
    468c:	c3 01       	movw	r24, r6
    468e:	b2 01       	movw	r22, r4
    4690:	0e 94 24 2d 	call	0x5a48	; 0x5a48 <__floatunsisf>
    4694:	20 e0       	ldi	r18, 0x00	; 0
    4696:	30 e0       	ldi	r19, 0x00	; 0
    4698:	40 e0       	ldi	r20, 0x00	; 0
    469a:	51 e4       	ldi	r21, 0x41	; 65
    469c:	0e 94 b2 2d 	call	0x5b64	; 0x5b64 <__mulsf3>
    46a0:	9b 01       	movw	r18, r22
    46a2:	ac 01       	movw	r20, r24
    46a4:	60 e0       	ldi	r22, 0x00	; 0
    46a6:	74 e2       	ldi	r23, 0x24	; 36
    46a8:	84 e7       	ldi	r24, 0x74	; 116
    46aa:	9b e4       	ldi	r25, 0x4B	; 75
    46ac:	0e 94 8b 2c 	call	0x5916	; 0x5916 <__divsf3>
    46b0:	20 e0       	ldi	r18, 0x00	; 0
    46b2:	30 e0       	ldi	r19, 0x00	; 0
    46b4:	40 e8       	ldi	r20, 0x80	; 128
    46b6:	5f e3       	ldi	r21, 0x3F	; 63
    46b8:	0e 94 26 2c 	call	0x584c	; 0x584c <__subsf3>
    46bc:	0e 94 f8 2c 	call	0x59f0	; 0x59f0 <__fixunssfsi>
    46c0:	f4 01       	movw	r30, r8
    46c2:	32 97       	sbiw	r30, 0x02	; 2
    46c4:	60 83       	st	Z, r22
    46c6:	d8 01       	movw	r26, r16
    46c8:	ed 91       	ld	r30, X+
    46ca:	fc 91       	ld	r31, X
    46cc:	11 97       	sbiw	r26, 0x01	; 1
    46ce:	35 97       	sbiw	r30, 0x05	; 5
    46d0:	88 e9       	ldi	r24, 0x98	; 152
    46d2:	80 83       	st	Z, r24
    46d4:	ed 91       	ld	r30, X+
    46d6:	fc 91       	ld	r31, X
    46d8:	34 97       	sbiw	r30, 0x04	; 4
    46da:	86 e0       	ldi	r24, 0x06	; 6
    46dc:	80 83       	st	Z, r24
    46de:	ff be       	out	0x3f, r15	; 63
    46e0:	c8 01       	movw	r24, r16
    46e2:	df 91       	pop	r29
    46e4:	cf 91       	pop	r28
    46e6:	1f 91       	pop	r17
    46e8:	0f 91       	pop	r16
    46ea:	ff 90       	pop	r15
    46ec:	ef 90       	pop	r14
    46ee:	cf 90       	pop	r12
    46f0:	af 90       	pop	r10
    46f2:	9f 90       	pop	r9
    46f4:	8f 90       	pop	r8
    46f6:	7f 90       	pop	r7
    46f8:	6f 90       	pop	r6
    46fa:	5f 90       	pop	r5
    46fc:	4f 90       	pop	r4
    46fe:	3f 90       	pop	r3
    4700:	2f 90       	pop	r2
    4702:	08 95       	ret

00004704 <serial_sendByte>:
    4704:	cf 93       	push	r28
    4706:	df 93       	push	r29
    4708:	dc 01       	movw	r26, r24
    470a:	89 2b       	or	r24, r25
    470c:	01 f1       	breq	.+64     	; 0x474e <serial_sendByte+0x4a>
    470e:	12 96       	adiw	r26, 0x02	; 2
    4710:	ed 91       	ld	r30, X+
    4712:	fc 91       	ld	r31, X
    4714:	13 97       	sbiw	r26, 0x03	; 3
    4716:	93 81       	ldd	r25, Z+3	; 0x03
    4718:	82 81       	ldd	r24, Z+2	; 0x02
    471a:	25 81       	ldd	r18, Z+5	; 0x05
    471c:	98 1b       	sub	r25, r24
    471e:	92 23       	and	r25, r18
    4720:	84 81       	ldd	r24, Z+4	; 0x04
    4722:	98 17       	cp	r25, r24
    4724:	b1 f0       	breq	.+44     	; 0x4752 <serial_sendByte+0x4e>
    4726:	83 81       	ldd	r24, Z+3	; 0x03
    4728:	26 95       	lsr	r18
    472a:	28 23       	and	r18, r24
    472c:	c0 81       	ld	r28, Z
    472e:	d1 81       	ldd	r29, Z+1	; 0x01
    4730:	c2 0f       	add	r28, r18
    4732:	d1 1d       	adc	r29, r1
    4734:	68 83       	st	Y, r22
    4736:	8f 5f       	subi	r24, 0xFF	; 255
    4738:	95 81       	ldd	r25, Z+5	; 0x05
    473a:	89 23       	and	r24, r25
    473c:	83 83       	std	Z+3, r24	; 0x03
    473e:	ed 91       	ld	r30, X+
    4740:	fc 91       	ld	r31, X
    4742:	35 97       	sbiw	r30, 0x05	; 5
    4744:	80 81       	ld	r24, Z
    4746:	80 62       	ori	r24, 0x20	; 32
    4748:	80 83       	st	Z, r24
    474a:	80 e0       	ldi	r24, 0x00	; 0
    474c:	03 c0       	rjmp	.+6      	; 0x4754 <serial_sendByte+0x50>
    474e:	81 e0       	ldi	r24, 0x01	; 1
    4750:	01 c0       	rjmp	.+2      	; 0x4754 <serial_sendByte+0x50>
    4752:	82 e0       	ldi	r24, 0x02	; 2
    4754:	df 91       	pop	r29
    4756:	cf 91       	pop	r28
    4758:	08 95       	ret

0000475a <serial_sendBytes>:
    475a:	ef 92       	push	r14
    475c:	ff 92       	push	r15
    475e:	0f 93       	push	r16
    4760:	1f 93       	push	r17
    4762:	cf 93       	push	r28
    4764:	df 93       	push	r29
    4766:	7c 01       	movw	r14, r24
    4768:	00 97       	sbiw	r24, 0x00	; 0
    476a:	09 f4       	brne	.+2      	; 0x476e <serial_sendBytes+0x14>
    476c:	41 c0       	rjmp	.+130    	; 0x47f0 <serial_sendBytes+0x96>
    476e:	dc 01       	movw	r26, r24
    4770:	12 96       	adiw	r26, 0x02	; 2
    4772:	ed 91       	ld	r30, X+
    4774:	fc 91       	ld	r31, X
    4776:	13 97       	sbiw	r26, 0x03	; 3
    4778:	93 81       	ldd	r25, Z+3	; 0x03
    477a:	82 81       	ldd	r24, Z+2	; 0x02
    477c:	98 1b       	sub	r25, r24
    477e:	85 81       	ldd	r24, Z+5	; 0x05
    4780:	98 23       	and	r25, r24
    4782:	84 81       	ldd	r24, Z+4	; 0x04
    4784:	89 1b       	sub	r24, r25
    4786:	86 17       	cp	r24, r22
    4788:	a8 f1       	brcs	.+106    	; 0x47f4 <serial_sendBytes+0x9a>
    478a:	66 23       	and	r22, r22
    478c:	41 f1       	breq	.+80     	; 0x47de <serial_sendBytes+0x84>
    478e:	84 2f       	mov	r24, r20
    4790:	95 2f       	mov	r25, r21
    4792:	dc 01       	movw	r26, r24
    4794:	61 50       	subi	r22, 0x01	; 1
    4796:	46 2f       	mov	r20, r22
    4798:	50 e0       	ldi	r21, 0x00	; 0
    479a:	4f 5f       	subi	r20, 0xFF	; 255
    479c:	5f 4f       	sbci	r21, 0xFF	; 255
    479e:	48 0f       	add	r20, r24
    47a0:	59 1f       	adc	r21, r25
    47a2:	e7 01       	movw	r28, r14
    47a4:	ea 81       	ldd	r30, Y+2	; 0x02
    47a6:	fb 81       	ldd	r31, Y+3	; 0x03
    47a8:	93 81       	ldd	r25, Z+3	; 0x03
    47aa:	82 81       	ldd	r24, Z+2	; 0x02
    47ac:	25 81       	ldd	r18, Z+5	; 0x05
    47ae:	98 1b       	sub	r25, r24
    47b0:	92 23       	and	r25, r18
    47b2:	84 81       	ldd	r24, Z+4	; 0x04
    47b4:	98 17       	cp	r25, r24
    47b6:	79 f0       	breq	.+30     	; 0x47d6 <serial_sendBytes+0x7c>
    47b8:	8c 91       	ld	r24, X
    47ba:	93 81       	ldd	r25, Z+3	; 0x03
    47bc:	26 95       	lsr	r18
    47be:	29 23       	and	r18, r25
    47c0:	60 81       	ld	r22, Z
    47c2:	71 81       	ldd	r23, Z+1	; 0x01
    47c4:	8b 01       	movw	r16, r22
    47c6:	02 0f       	add	r16, r18
    47c8:	11 1d       	adc	r17, r1
    47ca:	e8 01       	movw	r28, r16
    47cc:	88 83       	st	Y, r24
    47ce:	9f 5f       	subi	r25, 0xFF	; 255
    47d0:	85 81       	ldd	r24, Z+5	; 0x05
    47d2:	98 23       	and	r25, r24
    47d4:	93 83       	std	Z+3, r25	; 0x03
    47d6:	11 96       	adiw	r26, 0x01	; 1
    47d8:	a4 17       	cp	r26, r20
    47da:	b5 07       	cpc	r27, r21
    47dc:	11 f7       	brne	.-60     	; 0x47a2 <serial_sendBytes+0x48>
    47de:	d7 01       	movw	r26, r14
    47e0:	ed 91       	ld	r30, X+
    47e2:	fc 91       	ld	r31, X
    47e4:	35 97       	sbiw	r30, 0x05	; 5
    47e6:	80 81       	ld	r24, Z
    47e8:	80 62       	ori	r24, 0x20	; 32
    47ea:	80 83       	st	Z, r24
    47ec:	80 e0       	ldi	r24, 0x00	; 0
    47ee:	03 c0       	rjmp	.+6      	; 0x47f6 <serial_sendBytes+0x9c>
    47f0:	81 e0       	ldi	r24, 0x01	; 1
    47f2:	01 c0       	rjmp	.+2      	; 0x47f6 <serial_sendBytes+0x9c>
    47f4:	82 e0       	ldi	r24, 0x02	; 2
    47f6:	df 91       	pop	r29
    47f8:	cf 91       	pop	r28
    47fa:	1f 91       	pop	r17
    47fc:	0f 91       	pop	r16
    47fe:	ff 90       	pop	r15
    4800:	ef 90       	pop	r14
    4802:	08 95       	ret

00004804 <serial_getByte>:
    4804:	00 97       	sbiw	r24, 0x00	; 0
    4806:	d1 f0       	breq	.+52     	; 0x483c <serial_getByte+0x38>
    4808:	dc 01       	movw	r26, r24
    480a:	14 96       	adiw	r26, 0x04	; 4
    480c:	ed 91       	ld	r30, X+
    480e:	fc 91       	ld	r31, X
    4810:	15 97       	sbiw	r26, 0x05	; 5
    4812:	93 81       	ldd	r25, Z+3	; 0x03
    4814:	82 81       	ldd	r24, Z+2	; 0x02
    4816:	98 17       	cp	r25, r24
    4818:	99 f0       	breq	.+38     	; 0x4840 <serial_getByte+0x3c>
    481a:	92 81       	ldd	r25, Z+2	; 0x02
    481c:	85 81       	ldd	r24, Z+5	; 0x05
    481e:	86 95       	lsr	r24
    4820:	89 23       	and	r24, r25
    4822:	a0 81       	ld	r26, Z
    4824:	b1 81       	ldd	r27, Z+1	; 0x01
    4826:	a8 0f       	add	r26, r24
    4828:	b1 1d       	adc	r27, r1
    482a:	8c 91       	ld	r24, X
    482c:	db 01       	movw	r26, r22
    482e:	8c 93       	st	X, r24
    4830:	9f 5f       	subi	r25, 0xFF	; 255
    4832:	85 81       	ldd	r24, Z+5	; 0x05
    4834:	98 23       	and	r25, r24
    4836:	92 83       	std	Z+2, r25	; 0x02
    4838:	80 e0       	ldi	r24, 0x00	; 0
    483a:	08 95       	ret
    483c:	81 e0       	ldi	r24, 0x01	; 1
    483e:	08 95       	ret
    4840:	83 e0       	ldi	r24, 0x03	; 3
    4842:	08 95       	ret

00004844 <__vector_25>:
    4844:	1f 92       	push	r1
    4846:	0f 92       	push	r0
    4848:	0f b6       	in	r0, 0x3f	; 63
    484a:	0f 92       	push	r0
    484c:	11 24       	eor	r1, r1
    484e:	0b b6       	in	r0, 0x3b	; 59
    4850:	0f 92       	push	r0
    4852:	2f 93       	push	r18
    4854:	3f 93       	push	r19
    4856:	4f 93       	push	r20
    4858:	5f 93       	push	r21
    485a:	6f 93       	push	r22
    485c:	7f 93       	push	r23
    485e:	8f 93       	push	r24
    4860:	9f 93       	push	r25
    4862:	af 93       	push	r26
    4864:	bf 93       	push	r27
    4866:	cf 93       	push	r28
    4868:	df 93       	push	r29
    486a:	ef 93       	push	r30
    486c:	ff 93       	push	r31
    486e:	a0 91 1e 18 	lds	r26, 0x181E	; 0x80181e <_ser_handle>
    4872:	b0 91 1f 18 	lds	r27, 0x181F	; 0x80181f <_ser_handle+0x1>
    4876:	10 97       	sbiw	r26, 0x00	; 0
    4878:	11 f1       	breq	.+68     	; 0x48be <__vector_25+0x7a>
    487a:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    487e:	14 96       	adiw	r26, 0x04	; 4
    4880:	ed 91       	ld	r30, X+
    4882:	fc 91       	ld	r31, X
    4884:	15 97       	sbiw	r26, 0x05	; 5
    4886:	93 81       	ldd	r25, Z+3	; 0x03
    4888:	82 81       	ldd	r24, Z+2	; 0x02
    488a:	25 81       	ldd	r18, Z+5	; 0x05
    488c:	98 1b       	sub	r25, r24
    488e:	92 23       	and	r25, r18
    4890:	84 81       	ldd	r24, Z+4	; 0x04
    4892:	98 17       	cp	r25, r24
    4894:	61 f0       	breq	.+24     	; 0x48ae <__vector_25+0x6a>
    4896:	83 81       	ldd	r24, Z+3	; 0x03
    4898:	26 95       	lsr	r18
    489a:	28 23       	and	r18, r24
    489c:	c0 81       	ld	r28, Z
    489e:	d1 81       	ldd	r29, Z+1	; 0x01
    48a0:	c2 0f       	add	r28, r18
    48a2:	d1 1d       	adc	r29, r1
    48a4:	68 83       	st	Y, r22
    48a6:	8f 5f       	subi	r24, 0xFF	; 255
    48a8:	95 81       	ldd	r25, Z+5	; 0x05
    48aa:	89 23       	and	r24, r25
    48ac:	83 83       	std	Z+3, r24	; 0x03
    48ae:	16 96       	adiw	r26, 0x06	; 6
    48b0:	ed 91       	ld	r30, X+
    48b2:	fc 91       	ld	r31, X
    48b4:	17 97       	sbiw	r26, 0x07	; 7
    48b6:	30 97       	sbiw	r30, 0x00	; 0
    48b8:	11 f0       	breq	.+4      	; 0x48be <__vector_25+0x7a>
    48ba:	cd 01       	movw	r24, r26
    48bc:	19 95       	eicall
    48be:	ff 91       	pop	r31
    48c0:	ef 91       	pop	r30
    48c2:	df 91       	pop	r29
    48c4:	cf 91       	pop	r28
    48c6:	bf 91       	pop	r27
    48c8:	af 91       	pop	r26
    48ca:	9f 91       	pop	r25
    48cc:	8f 91       	pop	r24
    48ce:	7f 91       	pop	r23
    48d0:	6f 91       	pop	r22
    48d2:	5f 91       	pop	r21
    48d4:	4f 91       	pop	r20
    48d6:	3f 91       	pop	r19
    48d8:	2f 91       	pop	r18
    48da:	0f 90       	pop	r0
    48dc:	0b be       	out	0x3b, r0	; 59
    48de:	0f 90       	pop	r0
    48e0:	0f be       	out	0x3f, r0	; 63
    48e2:	0f 90       	pop	r0
    48e4:	1f 90       	pop	r1
    48e6:	18 95       	reti

000048e8 <__vector_26>:
    48e8:	1f 92       	push	r1
    48ea:	0f 92       	push	r0
    48ec:	0f b6       	in	r0, 0x3f	; 63
    48ee:	0f 92       	push	r0
    48f0:	11 24       	eor	r1, r1
    48f2:	0b b6       	in	r0, 0x3b	; 59
    48f4:	0f 92       	push	r0
    48f6:	2f 93       	push	r18
    48f8:	8f 93       	push	r24
    48fa:	9f 93       	push	r25
    48fc:	af 93       	push	r26
    48fe:	bf 93       	push	r27
    4900:	ef 93       	push	r30
    4902:	ff 93       	push	r31
    4904:	e0 91 1e 18 	lds	r30, 0x181E	; 0x80181e <_ser_handle>
    4908:	f0 91 1f 18 	lds	r31, 0x181F	; 0x80181f <_ser_handle+0x1>
    490c:	30 97       	sbiw	r30, 0x00	; 0
    490e:	b9 f0       	breq	.+46     	; 0x493e <__vector_26+0x56>
    4910:	02 80       	ldd	r0, Z+2	; 0x02
    4912:	f3 81       	ldd	r31, Z+3	; 0x03
    4914:	e0 2d       	mov	r30, r0
    4916:	93 81       	ldd	r25, Z+3	; 0x03
    4918:	82 81       	ldd	r24, Z+2	; 0x02
    491a:	98 17       	cp	r25, r24
    491c:	b1 f0       	breq	.+44     	; 0x494a <__vector_26+0x62>
    491e:	92 81       	ldd	r25, Z+2	; 0x02
    4920:	85 81       	ldd	r24, Z+5	; 0x05
    4922:	28 2f       	mov	r18, r24
    4924:	26 95       	lsr	r18
    4926:	29 23       	and	r18, r25
    4928:	a0 81       	ld	r26, Z
    492a:	b1 81       	ldd	r27, Z+1	; 0x01
    492c:	a2 0f       	add	r26, r18
    492e:	b1 1d       	adc	r27, r1
    4930:	2c 91       	ld	r18, X
    4932:	9f 5f       	subi	r25, 0xFF	; 255
    4934:	89 23       	and	r24, r25
    4936:	82 83       	std	Z+2, r24	; 0x02
    4938:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    493c:	0b c0       	rjmp	.+22     	; 0x4954 <__vector_26+0x6c>
    493e:	e1 ec       	ldi	r30, 0xC1	; 193
    4940:	f0 e0       	ldi	r31, 0x00	; 0
    4942:	80 81       	ld	r24, Z
    4944:	8f 7d       	andi	r24, 0xDF	; 223
    4946:	80 83       	st	Z, r24
    4948:	05 c0       	rjmp	.+10     	; 0x4954 <__vector_26+0x6c>
    494a:	e1 ec       	ldi	r30, 0xC1	; 193
    494c:	f0 e0       	ldi	r31, 0x00	; 0
    494e:	80 81       	ld	r24, Z
    4950:	8f 7d       	andi	r24, 0xDF	; 223
    4952:	80 83       	st	Z, r24
    4954:	ff 91       	pop	r31
    4956:	ef 91       	pop	r30
    4958:	bf 91       	pop	r27
    495a:	af 91       	pop	r26
    495c:	9f 91       	pop	r25
    495e:	8f 91       	pop	r24
    4960:	2f 91       	pop	r18
    4962:	0f 90       	pop	r0
    4964:	0b be       	out	0x3b, r0	; 59
    4966:	0f 90       	pop	r0
    4968:	0f be       	out	0x3f, r0	; 63
    496a:	0f 90       	pop	r0
    496c:	1f 90       	pop	r1
    496e:	18 95       	reti

00004970 <__vector_36>:
    4970:	1f 92       	push	r1
    4972:	0f 92       	push	r0
    4974:	0f b6       	in	r0, 0x3f	; 63
    4976:	0f 92       	push	r0
    4978:	11 24       	eor	r1, r1
    497a:	0b b6       	in	r0, 0x3b	; 59
    497c:	0f 92       	push	r0
    497e:	2f 93       	push	r18
    4980:	3f 93       	push	r19
    4982:	4f 93       	push	r20
    4984:	5f 93       	push	r21
    4986:	6f 93       	push	r22
    4988:	7f 93       	push	r23
    498a:	8f 93       	push	r24
    498c:	9f 93       	push	r25
    498e:	af 93       	push	r26
    4990:	bf 93       	push	r27
    4992:	cf 93       	push	r28
    4994:	df 93       	push	r29
    4996:	ef 93       	push	r30
    4998:	ff 93       	push	r31
    499a:	a0 91 20 18 	lds	r26, 0x1820	; 0x801820 <_ser_handle+0x2>
    499e:	b0 91 21 18 	lds	r27, 0x1821	; 0x801821 <_ser_handle+0x3>
    49a2:	10 97       	sbiw	r26, 0x00	; 0
    49a4:	11 f1       	breq	.+68     	; 0x49ea <__vector_36+0x7a>
    49a6:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    49aa:	14 96       	adiw	r26, 0x04	; 4
    49ac:	ed 91       	ld	r30, X+
    49ae:	fc 91       	ld	r31, X
    49b0:	15 97       	sbiw	r26, 0x05	; 5
    49b2:	93 81       	ldd	r25, Z+3	; 0x03
    49b4:	82 81       	ldd	r24, Z+2	; 0x02
    49b6:	25 81       	ldd	r18, Z+5	; 0x05
    49b8:	98 1b       	sub	r25, r24
    49ba:	92 23       	and	r25, r18
    49bc:	84 81       	ldd	r24, Z+4	; 0x04
    49be:	98 17       	cp	r25, r24
    49c0:	61 f0       	breq	.+24     	; 0x49da <__vector_36+0x6a>
    49c2:	83 81       	ldd	r24, Z+3	; 0x03
    49c4:	26 95       	lsr	r18
    49c6:	28 23       	and	r18, r24
    49c8:	c0 81       	ld	r28, Z
    49ca:	d1 81       	ldd	r29, Z+1	; 0x01
    49cc:	c2 0f       	add	r28, r18
    49ce:	d1 1d       	adc	r29, r1
    49d0:	68 83       	st	Y, r22
    49d2:	8f 5f       	subi	r24, 0xFF	; 255
    49d4:	95 81       	ldd	r25, Z+5	; 0x05
    49d6:	89 23       	and	r24, r25
    49d8:	83 83       	std	Z+3, r24	; 0x03
    49da:	16 96       	adiw	r26, 0x06	; 6
    49dc:	ed 91       	ld	r30, X+
    49de:	fc 91       	ld	r31, X
    49e0:	17 97       	sbiw	r26, 0x07	; 7
    49e2:	30 97       	sbiw	r30, 0x00	; 0
    49e4:	11 f0       	breq	.+4      	; 0x49ea <__vector_36+0x7a>
    49e6:	cd 01       	movw	r24, r26
    49e8:	19 95       	eicall
    49ea:	ff 91       	pop	r31
    49ec:	ef 91       	pop	r30
    49ee:	df 91       	pop	r29
    49f0:	cf 91       	pop	r28
    49f2:	bf 91       	pop	r27
    49f4:	af 91       	pop	r26
    49f6:	9f 91       	pop	r25
    49f8:	8f 91       	pop	r24
    49fa:	7f 91       	pop	r23
    49fc:	6f 91       	pop	r22
    49fe:	5f 91       	pop	r21
    4a00:	4f 91       	pop	r20
    4a02:	3f 91       	pop	r19
    4a04:	2f 91       	pop	r18
    4a06:	0f 90       	pop	r0
    4a08:	0b be       	out	0x3b, r0	; 59
    4a0a:	0f 90       	pop	r0
    4a0c:	0f be       	out	0x3f, r0	; 63
    4a0e:	0f 90       	pop	r0
    4a10:	1f 90       	pop	r1
    4a12:	18 95       	reti

00004a14 <__vector_37>:
    4a14:	1f 92       	push	r1
    4a16:	0f 92       	push	r0
    4a18:	0f b6       	in	r0, 0x3f	; 63
    4a1a:	0f 92       	push	r0
    4a1c:	11 24       	eor	r1, r1
    4a1e:	0b b6       	in	r0, 0x3b	; 59
    4a20:	0f 92       	push	r0
    4a22:	2f 93       	push	r18
    4a24:	8f 93       	push	r24
    4a26:	9f 93       	push	r25
    4a28:	af 93       	push	r26
    4a2a:	bf 93       	push	r27
    4a2c:	ef 93       	push	r30
    4a2e:	ff 93       	push	r31
    4a30:	e0 91 20 18 	lds	r30, 0x1820	; 0x801820 <_ser_handle+0x2>
    4a34:	f0 91 21 18 	lds	r31, 0x1821	; 0x801821 <_ser_handle+0x3>
    4a38:	30 97       	sbiw	r30, 0x00	; 0
    4a3a:	b9 f0       	breq	.+46     	; 0x4a6a <__vector_37+0x56>
    4a3c:	02 80       	ldd	r0, Z+2	; 0x02
    4a3e:	f3 81       	ldd	r31, Z+3	; 0x03
    4a40:	e0 2d       	mov	r30, r0
    4a42:	93 81       	ldd	r25, Z+3	; 0x03
    4a44:	82 81       	ldd	r24, Z+2	; 0x02
    4a46:	98 17       	cp	r25, r24
    4a48:	b1 f0       	breq	.+44     	; 0x4a76 <__vector_37+0x62>
    4a4a:	92 81       	ldd	r25, Z+2	; 0x02
    4a4c:	85 81       	ldd	r24, Z+5	; 0x05
    4a4e:	28 2f       	mov	r18, r24
    4a50:	26 95       	lsr	r18
    4a52:	29 23       	and	r18, r25
    4a54:	a0 81       	ld	r26, Z
    4a56:	b1 81       	ldd	r27, Z+1	; 0x01
    4a58:	a2 0f       	add	r26, r18
    4a5a:	b1 1d       	adc	r27, r1
    4a5c:	2c 91       	ld	r18, X
    4a5e:	9f 5f       	subi	r25, 0xFF	; 255
    4a60:	89 23       	and	r24, r25
    4a62:	82 83       	std	Z+2, r24	; 0x02
    4a64:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7c00ce>
    4a68:	0b c0       	rjmp	.+22     	; 0x4a80 <__vector_37+0x6c>
    4a6a:	e9 ec       	ldi	r30, 0xC9	; 201
    4a6c:	f0 e0       	ldi	r31, 0x00	; 0
    4a6e:	80 81       	ld	r24, Z
    4a70:	8f 7d       	andi	r24, 0xDF	; 223
    4a72:	80 83       	st	Z, r24
    4a74:	05 c0       	rjmp	.+10     	; 0x4a80 <__vector_37+0x6c>
    4a76:	e9 ec       	ldi	r30, 0xC9	; 201
    4a78:	f0 e0       	ldi	r31, 0x00	; 0
    4a7a:	80 81       	ld	r24, Z
    4a7c:	8f 7d       	andi	r24, 0xDF	; 223
    4a7e:	80 83       	st	Z, r24
    4a80:	ff 91       	pop	r31
    4a82:	ef 91       	pop	r30
    4a84:	bf 91       	pop	r27
    4a86:	af 91       	pop	r26
    4a88:	9f 91       	pop	r25
    4a8a:	8f 91       	pop	r24
    4a8c:	2f 91       	pop	r18
    4a8e:	0f 90       	pop	r0
    4a90:	0b be       	out	0x3b, r0	; 59
    4a92:	0f 90       	pop	r0
    4a94:	0f be       	out	0x3f, r0	; 63
    4a96:	0f 90       	pop	r0
    4a98:	1f 90       	pop	r1
    4a9a:	18 95       	reti

00004a9c <__vector_51>:
    4a9c:	1f 92       	push	r1
    4a9e:	0f 92       	push	r0
    4aa0:	0f b6       	in	r0, 0x3f	; 63
    4aa2:	0f 92       	push	r0
    4aa4:	11 24       	eor	r1, r1
    4aa6:	0b b6       	in	r0, 0x3b	; 59
    4aa8:	0f 92       	push	r0
    4aaa:	2f 93       	push	r18
    4aac:	3f 93       	push	r19
    4aae:	4f 93       	push	r20
    4ab0:	5f 93       	push	r21
    4ab2:	6f 93       	push	r22
    4ab4:	7f 93       	push	r23
    4ab6:	8f 93       	push	r24
    4ab8:	9f 93       	push	r25
    4aba:	af 93       	push	r26
    4abc:	bf 93       	push	r27
    4abe:	cf 93       	push	r28
    4ac0:	df 93       	push	r29
    4ac2:	ef 93       	push	r30
    4ac4:	ff 93       	push	r31
    4ac6:	a0 91 22 18 	lds	r26, 0x1822	; 0x801822 <_ser_handle+0x4>
    4aca:	b0 91 23 18 	lds	r27, 0x1823	; 0x801823 <_ser_handle+0x5>
    4ace:	10 97       	sbiw	r26, 0x00	; 0
    4ad0:	11 f1       	breq	.+68     	; 0x4b16 <__vector_51+0x7a>
    4ad2:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4ad6:	14 96       	adiw	r26, 0x04	; 4
    4ad8:	ed 91       	ld	r30, X+
    4ada:	fc 91       	ld	r31, X
    4adc:	15 97       	sbiw	r26, 0x05	; 5
    4ade:	93 81       	ldd	r25, Z+3	; 0x03
    4ae0:	82 81       	ldd	r24, Z+2	; 0x02
    4ae2:	25 81       	ldd	r18, Z+5	; 0x05
    4ae4:	98 1b       	sub	r25, r24
    4ae6:	92 23       	and	r25, r18
    4ae8:	84 81       	ldd	r24, Z+4	; 0x04
    4aea:	98 17       	cp	r25, r24
    4aec:	61 f0       	breq	.+24     	; 0x4b06 <__vector_51+0x6a>
    4aee:	83 81       	ldd	r24, Z+3	; 0x03
    4af0:	26 95       	lsr	r18
    4af2:	28 23       	and	r18, r24
    4af4:	c0 81       	ld	r28, Z
    4af6:	d1 81       	ldd	r29, Z+1	; 0x01
    4af8:	c2 0f       	add	r28, r18
    4afa:	d1 1d       	adc	r29, r1
    4afc:	68 83       	st	Y, r22
    4afe:	8f 5f       	subi	r24, 0xFF	; 255
    4b00:	95 81       	ldd	r25, Z+5	; 0x05
    4b02:	89 23       	and	r24, r25
    4b04:	83 83       	std	Z+3, r24	; 0x03
    4b06:	16 96       	adiw	r26, 0x06	; 6
    4b08:	ed 91       	ld	r30, X+
    4b0a:	fc 91       	ld	r31, X
    4b0c:	17 97       	sbiw	r26, 0x07	; 7
    4b0e:	30 97       	sbiw	r30, 0x00	; 0
    4b10:	11 f0       	breq	.+4      	; 0x4b16 <__vector_51+0x7a>
    4b12:	cd 01       	movw	r24, r26
    4b14:	19 95       	eicall
    4b16:	ff 91       	pop	r31
    4b18:	ef 91       	pop	r30
    4b1a:	df 91       	pop	r29
    4b1c:	cf 91       	pop	r28
    4b1e:	bf 91       	pop	r27
    4b20:	af 91       	pop	r26
    4b22:	9f 91       	pop	r25
    4b24:	8f 91       	pop	r24
    4b26:	7f 91       	pop	r23
    4b28:	6f 91       	pop	r22
    4b2a:	5f 91       	pop	r21
    4b2c:	4f 91       	pop	r20
    4b2e:	3f 91       	pop	r19
    4b30:	2f 91       	pop	r18
    4b32:	0f 90       	pop	r0
    4b34:	0b be       	out	0x3b, r0	; 59
    4b36:	0f 90       	pop	r0
    4b38:	0f be       	out	0x3f, r0	; 63
    4b3a:	0f 90       	pop	r0
    4b3c:	1f 90       	pop	r1
    4b3e:	18 95       	reti

00004b40 <__vector_52>:
    4b40:	1f 92       	push	r1
    4b42:	0f 92       	push	r0
    4b44:	0f b6       	in	r0, 0x3f	; 63
    4b46:	0f 92       	push	r0
    4b48:	11 24       	eor	r1, r1
    4b4a:	0b b6       	in	r0, 0x3b	; 59
    4b4c:	0f 92       	push	r0
    4b4e:	2f 93       	push	r18
    4b50:	8f 93       	push	r24
    4b52:	9f 93       	push	r25
    4b54:	af 93       	push	r26
    4b56:	bf 93       	push	r27
    4b58:	ef 93       	push	r30
    4b5a:	ff 93       	push	r31
    4b5c:	e0 91 22 18 	lds	r30, 0x1822	; 0x801822 <_ser_handle+0x4>
    4b60:	f0 91 23 18 	lds	r31, 0x1823	; 0x801823 <_ser_handle+0x5>
    4b64:	30 97       	sbiw	r30, 0x00	; 0
    4b66:	b9 f0       	breq	.+46     	; 0x4b96 <__vector_52+0x56>
    4b68:	02 80       	ldd	r0, Z+2	; 0x02
    4b6a:	f3 81       	ldd	r31, Z+3	; 0x03
    4b6c:	e0 2d       	mov	r30, r0
    4b6e:	93 81       	ldd	r25, Z+3	; 0x03
    4b70:	82 81       	ldd	r24, Z+2	; 0x02
    4b72:	98 17       	cp	r25, r24
    4b74:	b1 f0       	breq	.+44     	; 0x4ba2 <__vector_52+0x62>
    4b76:	92 81       	ldd	r25, Z+2	; 0x02
    4b78:	85 81       	ldd	r24, Z+5	; 0x05
    4b7a:	28 2f       	mov	r18, r24
    4b7c:	26 95       	lsr	r18
    4b7e:	29 23       	and	r18, r25
    4b80:	a0 81       	ld	r26, Z
    4b82:	b1 81       	ldd	r27, Z+1	; 0x01
    4b84:	a2 0f       	add	r26, r18
    4b86:	b1 1d       	adc	r27, r1
    4b88:	2c 91       	ld	r18, X
    4b8a:	9f 5f       	subi	r25, 0xFF	; 255
    4b8c:	89 23       	and	r24, r25
    4b8e:	82 83       	std	Z+2, r24	; 0x02
    4b90:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7c00d6>
    4b94:	0b c0       	rjmp	.+22     	; 0x4bac <__vector_52+0x6c>
    4b96:	e1 ed       	ldi	r30, 0xD1	; 209
    4b98:	f0 e0       	ldi	r31, 0x00	; 0
    4b9a:	80 81       	ld	r24, Z
    4b9c:	8f 7d       	andi	r24, 0xDF	; 223
    4b9e:	80 83       	st	Z, r24
    4ba0:	05 c0       	rjmp	.+10     	; 0x4bac <__vector_52+0x6c>
    4ba2:	e1 ed       	ldi	r30, 0xD1	; 209
    4ba4:	f0 e0       	ldi	r31, 0x00	; 0
    4ba6:	80 81       	ld	r24, Z
    4ba8:	8f 7d       	andi	r24, 0xDF	; 223
    4baa:	80 83       	st	Z, r24
    4bac:	ff 91       	pop	r31
    4bae:	ef 91       	pop	r30
    4bb0:	bf 91       	pop	r27
    4bb2:	af 91       	pop	r26
    4bb4:	9f 91       	pop	r25
    4bb6:	8f 91       	pop	r24
    4bb8:	2f 91       	pop	r18
    4bba:	0f 90       	pop	r0
    4bbc:	0b be       	out	0x3b, r0	; 59
    4bbe:	0f 90       	pop	r0
    4bc0:	0f be       	out	0x3f, r0	; 63
    4bc2:	0f 90       	pop	r0
    4bc4:	1f 90       	pop	r1
    4bc6:	18 95       	reti

00004bc8 <__vector_54>:
    4bc8:	1f 92       	push	r1
    4bca:	0f 92       	push	r0
    4bcc:	0f b6       	in	r0, 0x3f	; 63
    4bce:	0f 92       	push	r0
    4bd0:	11 24       	eor	r1, r1
    4bd2:	0b b6       	in	r0, 0x3b	; 59
    4bd4:	0f 92       	push	r0
    4bd6:	2f 93       	push	r18
    4bd8:	3f 93       	push	r19
    4bda:	4f 93       	push	r20
    4bdc:	5f 93       	push	r21
    4bde:	6f 93       	push	r22
    4be0:	7f 93       	push	r23
    4be2:	8f 93       	push	r24
    4be4:	9f 93       	push	r25
    4be6:	af 93       	push	r26
    4be8:	bf 93       	push	r27
    4bea:	cf 93       	push	r28
    4bec:	df 93       	push	r29
    4bee:	ef 93       	push	r30
    4bf0:	ff 93       	push	r31
    4bf2:	a0 91 24 18 	lds	r26, 0x1824	; 0x801824 <_ser_handle+0x6>
    4bf6:	b0 91 25 18 	lds	r27, 0x1825	; 0x801825 <_ser_handle+0x7>
    4bfa:	10 97       	sbiw	r26, 0x00	; 0
    4bfc:	11 f1       	breq	.+68     	; 0x4c42 <__vector_54+0x7a>
    4bfe:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4c02:	14 96       	adiw	r26, 0x04	; 4
    4c04:	ed 91       	ld	r30, X+
    4c06:	fc 91       	ld	r31, X
    4c08:	15 97       	sbiw	r26, 0x05	; 5
    4c0a:	93 81       	ldd	r25, Z+3	; 0x03
    4c0c:	82 81       	ldd	r24, Z+2	; 0x02
    4c0e:	25 81       	ldd	r18, Z+5	; 0x05
    4c10:	98 1b       	sub	r25, r24
    4c12:	92 23       	and	r25, r18
    4c14:	84 81       	ldd	r24, Z+4	; 0x04
    4c16:	98 17       	cp	r25, r24
    4c18:	61 f0       	breq	.+24     	; 0x4c32 <__vector_54+0x6a>
    4c1a:	83 81       	ldd	r24, Z+3	; 0x03
    4c1c:	26 95       	lsr	r18
    4c1e:	28 23       	and	r18, r24
    4c20:	c0 81       	ld	r28, Z
    4c22:	d1 81       	ldd	r29, Z+1	; 0x01
    4c24:	c2 0f       	add	r28, r18
    4c26:	d1 1d       	adc	r29, r1
    4c28:	68 83       	st	Y, r22
    4c2a:	8f 5f       	subi	r24, 0xFF	; 255
    4c2c:	95 81       	ldd	r25, Z+5	; 0x05
    4c2e:	89 23       	and	r24, r25
    4c30:	83 83       	std	Z+3, r24	; 0x03
    4c32:	16 96       	adiw	r26, 0x06	; 6
    4c34:	ed 91       	ld	r30, X+
    4c36:	fc 91       	ld	r31, X
    4c38:	17 97       	sbiw	r26, 0x07	; 7
    4c3a:	30 97       	sbiw	r30, 0x00	; 0
    4c3c:	11 f0       	breq	.+4      	; 0x4c42 <__vector_54+0x7a>
    4c3e:	cd 01       	movw	r24, r26
    4c40:	19 95       	eicall
    4c42:	ff 91       	pop	r31
    4c44:	ef 91       	pop	r30
    4c46:	df 91       	pop	r29
    4c48:	cf 91       	pop	r28
    4c4a:	bf 91       	pop	r27
    4c4c:	af 91       	pop	r26
    4c4e:	9f 91       	pop	r25
    4c50:	8f 91       	pop	r24
    4c52:	7f 91       	pop	r23
    4c54:	6f 91       	pop	r22
    4c56:	5f 91       	pop	r21
    4c58:	4f 91       	pop	r20
    4c5a:	3f 91       	pop	r19
    4c5c:	2f 91       	pop	r18
    4c5e:	0f 90       	pop	r0
    4c60:	0b be       	out	0x3b, r0	; 59
    4c62:	0f 90       	pop	r0
    4c64:	0f be       	out	0x3f, r0	; 63
    4c66:	0f 90       	pop	r0
    4c68:	1f 90       	pop	r1
    4c6a:	18 95       	reti

00004c6c <__vector_55>:
    4c6c:	1f 92       	push	r1
    4c6e:	0f 92       	push	r0
    4c70:	0f b6       	in	r0, 0x3f	; 63
    4c72:	0f 92       	push	r0
    4c74:	11 24       	eor	r1, r1
    4c76:	0b b6       	in	r0, 0x3b	; 59
    4c78:	0f 92       	push	r0
    4c7a:	2f 93       	push	r18
    4c7c:	8f 93       	push	r24
    4c7e:	9f 93       	push	r25
    4c80:	af 93       	push	r26
    4c82:	bf 93       	push	r27
    4c84:	ef 93       	push	r30
    4c86:	ff 93       	push	r31
    4c88:	e0 91 24 18 	lds	r30, 0x1824	; 0x801824 <_ser_handle+0x6>
    4c8c:	f0 91 25 18 	lds	r31, 0x1825	; 0x801825 <_ser_handle+0x7>
    4c90:	30 97       	sbiw	r30, 0x00	; 0
    4c92:	b9 f0       	breq	.+46     	; 0x4cc2 <__vector_55+0x56>
    4c94:	02 80       	ldd	r0, Z+2	; 0x02
    4c96:	f3 81       	ldd	r31, Z+3	; 0x03
    4c98:	e0 2d       	mov	r30, r0
    4c9a:	93 81       	ldd	r25, Z+3	; 0x03
    4c9c:	82 81       	ldd	r24, Z+2	; 0x02
    4c9e:	98 17       	cp	r25, r24
    4ca0:	b1 f0       	breq	.+44     	; 0x4cce <__vector_55+0x62>
    4ca2:	92 81       	ldd	r25, Z+2	; 0x02
    4ca4:	85 81       	ldd	r24, Z+5	; 0x05
    4ca6:	28 2f       	mov	r18, r24
    4ca8:	26 95       	lsr	r18
    4caa:	29 23       	and	r18, r25
    4cac:	a0 81       	ld	r26, Z
    4cae:	b1 81       	ldd	r27, Z+1	; 0x01
    4cb0:	a2 0f       	add	r26, r18
    4cb2:	b1 1d       	adc	r27, r1
    4cb4:	2c 91       	ld	r18, X
    4cb6:	9f 5f       	subi	r25, 0xFF	; 255
    4cb8:	89 23       	and	r24, r25
    4cba:	82 83       	std	Z+2, r24	; 0x02
    4cbc:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x7c0136>
    4cc0:	0b c0       	rjmp	.+22     	; 0x4cd8 <__vector_55+0x6c>
    4cc2:	e1 e3       	ldi	r30, 0x31	; 49
    4cc4:	f1 e0       	ldi	r31, 0x01	; 1
    4cc6:	80 81       	ld	r24, Z
    4cc8:	8f 7d       	andi	r24, 0xDF	; 223
    4cca:	80 83       	st	Z, r24
    4ccc:	05 c0       	rjmp	.+10     	; 0x4cd8 <__vector_55+0x6c>
    4cce:	e1 e3       	ldi	r30, 0x31	; 49
    4cd0:	f1 e0       	ldi	r31, 0x01	; 1
    4cd2:	80 81       	ld	r24, Z
    4cd4:	8f 7d       	andi	r24, 0xDF	; 223
    4cd6:	80 83       	st	Z, r24
    4cd8:	ff 91       	pop	r31
    4cda:	ef 91       	pop	r30
    4cdc:	bf 91       	pop	r27
    4cde:	af 91       	pop	r26
    4ce0:	9f 91       	pop	r25
    4ce2:	8f 91       	pop	r24
    4ce4:	2f 91       	pop	r18
    4ce6:	0f 90       	pop	r0
    4ce8:	0b be       	out	0x3b, r0	; 59
    4cea:	0f 90       	pop	r0
    4cec:	0f be       	out	0x3f, r0	; 63
    4cee:	0f 90       	pop	r0
    4cf0:	1f 90       	pop	r1
    4cf2:	18 95       	reti

00004cf4 <usart_getchar>:
    4cf4:	cf 93       	push	r28
    4cf6:	df 93       	push	r29
    4cf8:	1f 92       	push	r1
    4cfa:	cd b7       	in	r28, 0x3d	; 61
    4cfc:	de b7       	in	r29, 0x3e	; 62
    4cfe:	be 01       	movw	r22, r28
    4d00:	6f 5f       	subi	r22, 0xFF	; 255
    4d02:	7f 4f       	sbci	r23, 0xFF	; 255
    4d04:	80 91 26 18 	lds	r24, 0x1826	; 0x801826 <_com_serial_instance>
    4d08:	90 91 27 18 	lds	r25, 0x1827	; 0x801827 <_com_serial_instance+0x1>
    4d0c:	7b dd       	rcall	.-1290   	; 0x4804 <serial_getByte>
    4d0e:	81 11       	cpse	r24, r1
    4d10:	f6 cf       	rjmp	.-20     	; 0x4cfe <usart_getchar+0xa>
    4d12:	89 81       	ldd	r24, Y+1	; 0x01
    4d14:	90 e0       	ldi	r25, 0x00	; 0
    4d16:	0f 90       	pop	r0
    4d18:	df 91       	pop	r29
    4d1a:	cf 91       	pop	r28
    4d1c:	08 95       	ret

00004d1e <usart_putchar>:
    4d1e:	68 2f       	mov	r22, r24
    4d20:	80 91 26 18 	lds	r24, 0x1826	; 0x801826 <_com_serial_instance>
    4d24:	90 91 27 18 	lds	r25, 0x1827	; 0x801827 <_com_serial_instance+0x1>
    4d28:	ed dc       	rcall	.-1574   	; 0x4704 <serial_sendByte>
    4d2a:	80 e0       	ldi	r24, 0x00	; 0
    4d2c:	90 e0       	ldi	r25, 0x00	; 0
    4d2e:	08 95       	ret

00004d30 <stdio_initialise>:
    4d30:	8f 92       	push	r8
    4d32:	9f 92       	push	r9
    4d34:	af 92       	push	r10
    4d36:	cf 92       	push	r12
    4d38:	ef 92       	push	r14
    4d3a:	0f 93       	push	r16
    4d3c:	81 2c       	mov	r8, r1
    4d3e:	91 2c       	mov	r9, r1
    4d40:	68 94       	set
    4d42:	aa 24       	eor	r10, r10
    4d44:	a7 f8       	bld	r10, 7
    4d46:	68 94       	set
    4d48:	cc 24       	eor	r12, r12
    4d4a:	c7 f8       	bld	r12, 7
    4d4c:	e1 2c       	mov	r14, r1
    4d4e:	00 e0       	ldi	r16, 0x00	; 0
    4d50:	23 e0       	ldi	r18, 0x03	; 3
    4d52:	40 e0       	ldi	r20, 0x00	; 0
    4d54:	51 ee       	ldi	r21, 0xE1	; 225
    4d56:	60 e0       	ldi	r22, 0x00	; 0
    4d58:	70 e0       	ldi	r23, 0x00	; 0
    4d5a:	2c dc       	rcall	.-1960   	; 0x45b4 <serial_create>
    4d5c:	90 93 27 18 	sts	0x1827, r25	; 0x801827 <_com_serial_instance+0x1>
    4d60:	80 93 26 18 	sts	0x1826, r24	; 0x801826 <_com_serial_instance>
    4d64:	eb e5       	ldi	r30, 0x5B	; 91
    4d66:	f8 e1       	ldi	r31, 0x18	; 24
    4d68:	83 e1       	ldi	r24, 0x13	; 19
    4d6a:	92 e0       	ldi	r25, 0x02	; 2
    4d6c:	91 83       	std	Z+1, r25	; 0x01
    4d6e:	80 83       	st	Z, r24
    4d70:	93 83       	std	Z+3, r25	; 0x03
    4d72:	82 83       	std	Z+2, r24	; 0x02
    4d74:	0f 91       	pop	r16
    4d76:	ef 90       	pop	r14
    4d78:	cf 90       	pop	r12
    4d7a:	af 90       	pop	r10
    4d7c:	9f 90       	pop	r9
    4d7e:	8f 90       	pop	r8
    4d80:	08 95       	ret

00004d82 <_select_instance>:
    4d82:	e0 91 29 18 	lds	r30, 0x1829	; 0x801829 <_this>
    4d86:	f0 91 2a 18 	lds	r31, 0x182A	; 0x80182a <_this+0x1>
    4d8a:	30 97       	sbiw	r30, 0x00	; 0
    4d8c:	f9 f0       	breq	.+62     	; 0x4dcc <_select_instance+0x4a>
    4d8e:	a0 81       	ld	r26, Z
    4d90:	b1 81       	ldd	r27, Z+1	; 0x01
    4d92:	10 97       	sbiw	r26, 0x00	; 0
    4d94:	d9 f0       	breq	.+54     	; 0x4dcc <_select_instance+0x4a>
    4d96:	23 81       	ldd	r18, Z+3	; 0x03
    4d98:	21 30       	cpi	r18, 0x01	; 1
    4d9a:	69 f4       	brne	.+26     	; 0x4db6 <_select_instance+0x34>
    4d9c:	4c 91       	ld	r20, X
    4d9e:	21 e0       	ldi	r18, 0x01	; 1
    4da0:	30 e0       	ldi	r19, 0x00	; 0
    4da2:	02 80       	ldd	r0, Z+2	; 0x02
    4da4:	02 c0       	rjmp	.+4      	; 0x4daa <_select_instance+0x28>
    4da6:	22 0f       	add	r18, r18
    4da8:	33 1f       	adc	r19, r19
    4daa:	0a 94       	dec	r0
    4dac:	e2 f7       	brpl	.-8      	; 0x4da6 <_select_instance+0x24>
    4dae:	20 95       	com	r18
    4db0:	24 23       	and	r18, r20
    4db2:	2c 93       	st	X, r18
    4db4:	0b c0       	rjmp	.+22     	; 0x4dcc <_select_instance+0x4a>
    4db6:	4c 91       	ld	r20, X
    4db8:	21 e0       	ldi	r18, 0x01	; 1
    4dba:	30 e0       	ldi	r19, 0x00	; 0
    4dbc:	02 80       	ldd	r0, Z+2	; 0x02
    4dbe:	02 c0       	rjmp	.+4      	; 0x4dc4 <_select_instance+0x42>
    4dc0:	22 0f       	add	r18, r18
    4dc2:	33 1f       	adc	r19, r19
    4dc4:	0a 94       	dec	r0
    4dc6:	e2 f7       	brpl	.-8      	; 0x4dc0 <_select_instance+0x3e>
    4dc8:	24 2b       	or	r18, r20
    4dca:	2c 93       	st	X, r18
    4dcc:	90 93 2a 18 	sts	0x182A, r25	; 0x80182a <_this+0x1>
    4dd0:	80 93 29 18 	sts	0x1829, r24	; 0x801829 <_this>
    4dd4:	00 97       	sbiw	r24, 0x00	; 0
    4dd6:	69 f0       	breq	.+26     	; 0x4df2 <_select_instance+0x70>
    4dd8:	10 92 2b 18 	sts	0x182B, r1	; 0x80182b <_spi_active>
    4ddc:	2c b5       	in	r18, 0x2c	; 44
    4dde:	2f 73       	andi	r18, 0x3F	; 63
    4de0:	2c bd       	out	0x2c, r18	; 44
    4de2:	fc 01       	movw	r30, r24
    4de4:	24 81       	ldd	r18, Z+4	; 0x04
    4de6:	2c bd       	out	0x2c, r18	; 44
    4de8:	85 81       	ldd	r24, Z+5	; 0x05
    4dea:	8d bd       	out	0x2d, r24	; 45
    4dec:	8c b5       	in	r24, 0x2c	; 44
    4dee:	80 64       	ori	r24, 0x40	; 64
    4df0:	8c bd       	out	0x2c, r24	; 44
    4df2:	08 95       	ret

00004df4 <spi_create>:
    4df4:	4f 92       	push	r4
    4df6:	5f 92       	push	r5
    4df8:	6f 92       	push	r6
    4dfa:	7f 92       	push	r7
    4dfc:	8f 92       	push	r8
    4dfe:	9f 92       	push	r9
    4e00:	af 92       	push	r10
    4e02:	bf 92       	push	r11
    4e04:	cf 92       	push	r12
    4e06:	df 92       	push	r13
    4e08:	ef 92       	push	r14
    4e0a:	ff 92       	push	r15
    4e0c:	0f 93       	push	r16
    4e0e:	1f 93       	push	r17
    4e10:	cf 93       	push	r28
    4e12:	df 93       	push	r29
    4e14:	cd b7       	in	r28, 0x3d	; 61
    4e16:	de b7       	in	r29, 0x3e	; 62
    4e18:	98 2e       	mov	r9, r24
    4e1a:	b6 2e       	mov	r11, r22
    4e1c:	d4 2e       	mov	r13, r20
    4e1e:	f2 2e       	mov	r15, r18
    4e20:	80 91 28 18 	lds	r24, 0x1828	; 0x801828 <_initialised>
    4e24:	81 11       	cpse	r24, r1
    4e26:	06 c0       	rjmp	.+12     	; 0x4e34 <spi_create+0x40>
    4e28:	84 b1       	in	r24, 0x04	; 4
    4e2a:	87 60       	ori	r24, 0x07	; 7
    4e2c:	84 b9       	out	0x04, r24	; 4
    4e2e:	81 e0       	ldi	r24, 0x01	; 1
    4e30:	80 93 28 18 	sts	0x1828, r24	; 0x801828 <_initialised>
    4e34:	8c e0       	ldi	r24, 0x0C	; 12
    4e36:	90 e0       	ldi	r25, 0x00	; 0
    4e38:	3c d7       	rcall	.+3704   	; 0x5cb2 <malloc>
    4e3a:	3c 01       	movw	r6, r24
    4e3c:	dc 01       	movw	r26, r24
    4e3e:	11 96       	adiw	r26, 0x01	; 1
    4e40:	1c 93       	st	X, r17
    4e42:	0e 93       	st	-X, r16
    4e44:	12 96       	adiw	r26, 0x02	; 2
    4e46:	ec 92       	st	X, r14
    4e48:	12 97       	sbiw	r26, 0x02	; 2
    4e4a:	13 96       	adiw	r26, 0x03	; 3
    4e4c:	cc 92       	st	X, r12
    4e4e:	13 97       	sbiw	r26, 0x03	; 3
    4e50:	8d 2d       	mov	r24, r13
    4e52:	88 0f       	add	r24, r24
    4e54:	88 0f       	add	r24, r24
    4e56:	f8 2a       	or	r15, r24
    4e58:	eb 2d       	mov	r30, r11
    4e5a:	f0 e0       	ldi	r31, 0x00	; 0
    4e5c:	e8 5d       	subi	r30, 0xD8	; 216
    4e5e:	f7 4f       	sbci	r31, 0xF7	; 247
    4e60:	80 81       	ld	r24, Z
    4e62:	98 2a       	or	r9, r24
    4e64:	8f 2d       	mov	r24, r15
    4e66:	89 29       	or	r24, r9
    4e68:	14 96       	adiw	r26, 0x04	; 4
    4e6a:	8c 93       	st	X, r24
    4e6c:	b3 e0       	ldi	r27, 0x03	; 3
    4e6e:	bb 15       	cp	r27, r11
    4e70:	18 f4       	brcc	.+6      	; 0x4e78 <spi_create+0x84>
    4e72:	81 e0       	ldi	r24, 0x01	; 1
    4e74:	f3 01       	movw	r30, r6
    4e76:	85 83       	std	Z+5, r24	; 0x05
    4e78:	a1 10       	cpse	r10, r1
    4e7a:	06 c0       	rjmp	.+12     	; 0x4e88 <spi_create+0x94>
    4e7c:	d3 01       	movw	r26, r6
    4e7e:	19 96       	adiw	r26, 0x09	; 9
    4e80:	1c 92       	st	X, r1
    4e82:	1e 92       	st	-X, r1
    4e84:	18 97       	sbiw	r26, 0x08	; 8
    4e86:	12 c0       	rjmp	.+36     	; 0x4eac <spi_create+0xb8>
    4e88:	6a 2d       	mov	r22, r10
    4e8a:	70 e0       	ldi	r23, 0x00	; 0
    4e8c:	84 e0       	ldi	r24, 0x04	; 4
    4e8e:	90 e0       	ldi	r25, 0x00	; 0
    4e90:	f6 d6       	rcall	.+3564   	; 0x5c7e <calloc>
    4e92:	2c 01       	movw	r4, r24
    4e94:	61 e0       	ldi	r22, 0x01	; 1
    4e96:	70 e0       	ldi	r23, 0x00	; 0
    4e98:	86 e0       	ldi	r24, 0x06	; 6
    4e9a:	90 e0       	ldi	r25, 0x00	; 0
    4e9c:	f0 d6       	rcall	.+3552   	; 0x5c7e <calloc>
    4e9e:	6c 01       	movw	r12, r24
    4ea0:	4a 2d       	mov	r20, r10
    4ea2:	b2 01       	movw	r22, r4
    4ea4:	b7 d4       	rcall	.+2414   	; 0x5814 <fifo_init>
    4ea6:	f3 01       	movw	r30, r6
    4ea8:	d1 86       	std	Z+9, r13	; 0x09
    4eaa:	c0 86       	std	Z+8, r12	; 0x08
    4eac:	81 10       	cpse	r8, r1
    4eae:	06 c0       	rjmp	.+12     	; 0x4ebc <spi_create+0xc8>
    4eb0:	d3 01       	movw	r26, r6
    4eb2:	17 96       	adiw	r26, 0x07	; 7
    4eb4:	1c 92       	st	X, r1
    4eb6:	1e 92       	st	-X, r1
    4eb8:	16 97       	sbiw	r26, 0x06	; 6
    4eba:	12 c0       	rjmp	.+36     	; 0x4ee0 <spi_create+0xec>
    4ebc:	68 2d       	mov	r22, r8
    4ebe:	70 e0       	ldi	r23, 0x00	; 0
    4ec0:	84 e0       	ldi	r24, 0x04	; 4
    4ec2:	90 e0       	ldi	r25, 0x00	; 0
    4ec4:	dc d6       	rcall	.+3512   	; 0x5c7e <calloc>
    4ec6:	5c 01       	movw	r10, r24
    4ec8:	61 e0       	ldi	r22, 0x01	; 1
    4eca:	70 e0       	ldi	r23, 0x00	; 0
    4ecc:	86 e0       	ldi	r24, 0x06	; 6
    4ece:	90 e0       	ldi	r25, 0x00	; 0
    4ed0:	d6 d6       	rcall	.+3500   	; 0x5c7e <calloc>
    4ed2:	6c 01       	movw	r12, r24
    4ed4:	48 2d       	mov	r20, r8
    4ed6:	b5 01       	movw	r22, r10
    4ed8:	9d d4       	rcall	.+2362   	; 0x5814 <fifo_init>
    4eda:	f3 01       	movw	r30, r6
    4edc:	d7 82       	std	Z+7, r13	; 0x07
    4ede:	c6 82       	std	Z+6, r12	; 0x06
    4ee0:	8c 89       	ldd	r24, Y+20	; 0x14
    4ee2:	9d 89       	ldd	r25, Y+21	; 0x15
    4ee4:	d3 01       	movw	r26, r6
    4ee6:	1b 96       	adiw	r26, 0x0b	; 11
    4ee8:	9c 93       	st	X, r25
    4eea:	8e 93       	st	-X, r24
    4eec:	1a 97       	sbiw	r26, 0x0a	; 10
    4eee:	01 15       	cp	r16, r1
    4ef0:	11 05       	cpc	r17, r1
    4ef2:	59 f0       	breq	.+22     	; 0x4f0a <spi_create+0x116>
    4ef4:	f8 01       	movw	r30, r16
    4ef6:	22 91       	ld	r18, -Z
    4ef8:	81 e0       	ldi	r24, 0x01	; 1
    4efa:	90 e0       	ldi	r25, 0x00	; 0
    4efc:	02 c0       	rjmp	.+4      	; 0x4f02 <spi_create+0x10e>
    4efe:	88 0f       	add	r24, r24
    4f00:	99 1f       	adc	r25, r25
    4f02:	ea 94       	dec	r14
    4f04:	e2 f7       	brpl	.-8      	; 0x4efe <spi_create+0x10a>
    4f06:	82 2b       	or	r24, r18
    4f08:	80 83       	st	Z, r24
    4f0a:	2f b7       	in	r18, 0x3f	; 63
    4f0c:	f8 94       	cli
    4f0e:	40 91 29 18 	lds	r20, 0x1829	; 0x801829 <_this>
    4f12:	50 91 2a 18 	lds	r21, 0x182A	; 0x80182a <_this+0x1>
    4f16:	70 92 2a 18 	sts	0x182A, r7	; 0x80182a <_this+0x1>
    4f1a:	60 92 29 18 	sts	0x1829, r6	; 0x801829 <_this>
    4f1e:	d3 01       	movw	r26, r6
    4f20:	ed 91       	ld	r30, X+
    4f22:	fc 91       	ld	r31, X
    4f24:	11 97       	sbiw	r26, 0x01	; 1
    4f26:	30 97       	sbiw	r30, 0x00	; 0
    4f28:	01 f1       	breq	.+64     	; 0x4f6a <spi_create+0x176>
    4f2a:	13 96       	adiw	r26, 0x03	; 3
    4f2c:	8c 91       	ld	r24, X
    4f2e:	13 97       	sbiw	r26, 0x03	; 3
    4f30:	81 30       	cpi	r24, 0x01	; 1
    4f32:	71 f4       	brne	.+28     	; 0x4f50 <spi_create+0x15c>
    4f34:	30 81       	ld	r19, Z
    4f36:	81 e0       	ldi	r24, 0x01	; 1
    4f38:	90 e0       	ldi	r25, 0x00	; 0
    4f3a:	12 96       	adiw	r26, 0x02	; 2
    4f3c:	0c 90       	ld	r0, X
    4f3e:	02 c0       	rjmp	.+4      	; 0x4f44 <spi_create+0x150>
    4f40:	88 0f       	add	r24, r24
    4f42:	99 1f       	adc	r25, r25
    4f44:	0a 94       	dec	r0
    4f46:	e2 f7       	brpl	.-8      	; 0x4f40 <spi_create+0x14c>
    4f48:	80 95       	com	r24
    4f4a:	83 23       	and	r24, r19
    4f4c:	80 83       	st	Z, r24
    4f4e:	0d c0       	rjmp	.+26     	; 0x4f6a <spi_create+0x176>
    4f50:	30 81       	ld	r19, Z
    4f52:	81 e0       	ldi	r24, 0x01	; 1
    4f54:	90 e0       	ldi	r25, 0x00	; 0
    4f56:	d3 01       	movw	r26, r6
    4f58:	12 96       	adiw	r26, 0x02	; 2
    4f5a:	0c 90       	ld	r0, X
    4f5c:	02 c0       	rjmp	.+4      	; 0x4f62 <spi_create+0x16e>
    4f5e:	88 0f       	add	r24, r24
    4f60:	99 1f       	adc	r25, r25
    4f62:	0a 94       	dec	r0
    4f64:	e2 f7       	brpl	.-8      	; 0x4f5e <spi_create+0x16a>
    4f66:	83 2b       	or	r24, r19
    4f68:	80 83       	st	Z, r24
    4f6a:	50 93 2a 18 	sts	0x182A, r21	; 0x80182a <_this+0x1>
    4f6e:	40 93 29 18 	sts	0x1829, r20	; 0x801829 <_this>
    4f72:	2f bf       	out	0x3f, r18	; 63
    4f74:	c3 01       	movw	r24, r6
    4f76:	df 91       	pop	r29
    4f78:	cf 91       	pop	r28
    4f7a:	1f 91       	pop	r17
    4f7c:	0f 91       	pop	r16
    4f7e:	ff 90       	pop	r15
    4f80:	ef 90       	pop	r14
    4f82:	df 90       	pop	r13
    4f84:	cf 90       	pop	r12
    4f86:	bf 90       	pop	r11
    4f88:	af 90       	pop	r10
    4f8a:	9f 90       	pop	r9
    4f8c:	8f 90       	pop	r8
    4f8e:	7f 90       	pop	r7
    4f90:	6f 90       	pop	r6
    4f92:	5f 90       	pop	r5
    4f94:	4f 90       	pop	r4
    4f96:	08 95       	ret

00004f98 <spi_sendByte>:
    4f98:	1f 93       	push	r17
    4f9a:	cf 93       	push	r28
    4f9c:	df 93       	push	r29
    4f9e:	00 97       	sbiw	r24, 0x00	; 0
    4fa0:	09 f4       	brne	.+2      	; 0x4fa4 <spi_sendByte+0xc>
    4fa2:	6a c0       	rjmp	.+212    	; 0x5078 <spi_sendByte+0xe0>
    4fa4:	16 2f       	mov	r17, r22
    4fa6:	ec 01       	movw	r28, r24
    4fa8:	80 91 29 18 	lds	r24, 0x1829	; 0x801829 <_this>
    4fac:	90 91 2a 18 	lds	r25, 0x182A	; 0x80182a <_this+0x1>
    4fb0:	c8 17       	cp	r28, r24
    4fb2:	d9 07       	cpc	r29, r25
    4fb4:	11 f0       	breq	.+4      	; 0x4fba <spi_sendByte+0x22>
    4fb6:	ce 01       	movw	r24, r28
    4fb8:	e4 de       	rcall	.-568    	; 0x4d82 <_select_instance>
    4fba:	8f b7       	in	r24, 0x3f	; 63
    4fbc:	2f b7       	in	r18, 0x3f	; 63
    4fbe:	f8 94       	cli
    4fc0:	80 91 2b 18 	lds	r24, 0x182B	; 0x80182b <_spi_active>
    4fc4:	81 11       	cpse	r24, r1
    4fc6:	31 c0       	rjmp	.+98     	; 0x502a <spi_sendByte+0x92>
    4fc8:	81 e0       	ldi	r24, 0x01	; 1
    4fca:	80 93 2b 18 	sts	0x182B, r24	; 0x80182b <_spi_active>
    4fce:	a0 91 29 18 	lds	r26, 0x1829	; 0x801829 <_this>
    4fd2:	b0 91 2a 18 	lds	r27, 0x182A	; 0x80182a <_this+0x1>
    4fd6:	ed 91       	ld	r30, X+
    4fd8:	fc 91       	ld	r31, X
    4fda:	11 97       	sbiw	r26, 0x01	; 1
    4fdc:	30 97       	sbiw	r30, 0x00	; 0
    4fde:	f9 f0       	breq	.+62     	; 0x501e <spi_sendByte+0x86>
    4fe0:	13 96       	adiw	r26, 0x03	; 3
    4fe2:	8c 91       	ld	r24, X
    4fe4:	13 97       	sbiw	r26, 0x03	; 3
    4fe6:	81 30       	cpi	r24, 0x01	; 1
    4fe8:	69 f4       	brne	.+26     	; 0x5004 <spi_sendByte+0x6c>
    4fea:	30 81       	ld	r19, Z
    4fec:	81 e0       	ldi	r24, 0x01	; 1
    4fee:	90 e0       	ldi	r25, 0x00	; 0
    4ff0:	12 96       	adiw	r26, 0x02	; 2
    4ff2:	0c 90       	ld	r0, X
    4ff4:	02 c0       	rjmp	.+4      	; 0x4ffa <spi_sendByte+0x62>
    4ff6:	88 0f       	add	r24, r24
    4ff8:	99 1f       	adc	r25, r25
    4ffa:	0a 94       	dec	r0
    4ffc:	e2 f7       	brpl	.-8      	; 0x4ff6 <spi_sendByte+0x5e>
    4ffe:	83 2b       	or	r24, r19
    5000:	80 83       	st	Z, r24
    5002:	0d c0       	rjmp	.+26     	; 0x501e <spi_sendByte+0x86>
    5004:	30 81       	ld	r19, Z
    5006:	81 e0       	ldi	r24, 0x01	; 1
    5008:	90 e0       	ldi	r25, 0x00	; 0
    500a:	12 96       	adiw	r26, 0x02	; 2
    500c:	0c 90       	ld	r0, X
    500e:	02 c0       	rjmp	.+4      	; 0x5014 <spi_sendByte+0x7c>
    5010:	88 0f       	add	r24, r24
    5012:	99 1f       	adc	r25, r25
    5014:	0a 94       	dec	r0
    5016:	e2 f7       	brpl	.-8      	; 0x5010 <spi_sendByte+0x78>
    5018:	80 95       	com	r24
    501a:	83 23       	and	r24, r19
    501c:	80 83       	st	Z, r24
    501e:	8c b5       	in	r24, 0x2c	; 44
    5020:	80 68       	ori	r24, 0x80	; 128
    5022:	8c bd       	out	0x2c, r24	; 44
    5024:	1e bd       	out	0x2e, r17	; 46
    5026:	80 e0       	ldi	r24, 0x00	; 0
    5028:	25 c0       	rjmp	.+74     	; 0x5074 <spi_sendByte+0xdc>
    502a:	ee 81       	ldd	r30, Y+6	; 0x06
    502c:	ff 81       	ldd	r31, Y+7	; 0x07
    502e:	30 97       	sbiw	r30, 0x00	; 0
    5030:	e1 f0       	breq	.+56     	; 0x506a <spi_sendByte+0xd2>
    5032:	34 81       	ldd	r19, Z+4	; 0x04
    5034:	83 81       	ldd	r24, Z+3	; 0x03
    5036:	42 81       	ldd	r20, Z+2	; 0x02
    5038:	95 81       	ldd	r25, Z+5	; 0x05
    503a:	84 1b       	sub	r24, r20
    503c:	89 23       	and	r24, r25
    503e:	38 17       	cp	r19, r24
    5040:	b1 f0       	breq	.+44     	; 0x506e <spi_sendByte+0xd6>
    5042:	83 81       	ldd	r24, Z+3	; 0x03
    5044:	42 81       	ldd	r20, Z+2	; 0x02
    5046:	84 1b       	sub	r24, r20
    5048:	89 23       	and	r24, r25
    504a:	38 17       	cp	r19, r24
    504c:	91 f0       	breq	.+36     	; 0x5072 <spi_sendByte+0xda>
    504e:	83 81       	ldd	r24, Z+3	; 0x03
    5050:	96 95       	lsr	r25
    5052:	98 23       	and	r25, r24
    5054:	a0 81       	ld	r26, Z
    5056:	b1 81       	ldd	r27, Z+1	; 0x01
    5058:	a9 0f       	add	r26, r25
    505a:	b1 1d       	adc	r27, r1
    505c:	1c 93       	st	X, r17
    505e:	8f 5f       	subi	r24, 0xFF	; 255
    5060:	95 81       	ldd	r25, Z+5	; 0x05
    5062:	89 23       	and	r24, r25
    5064:	83 83       	std	Z+3, r24	; 0x03
    5066:	80 e0       	ldi	r24, 0x00	; 0
    5068:	05 c0       	rjmp	.+10     	; 0x5074 <spi_sendByte+0xdc>
    506a:	82 e0       	ldi	r24, 0x02	; 2
    506c:	03 c0       	rjmp	.+6      	; 0x5074 <spi_sendByte+0xdc>
    506e:	81 e0       	ldi	r24, 0x01	; 1
    5070:	01 c0       	rjmp	.+2      	; 0x5074 <spi_sendByte+0xdc>
    5072:	80 e0       	ldi	r24, 0x00	; 0
    5074:	2f bf       	out	0x3f, r18	; 63
    5076:	01 c0       	rjmp	.+2      	; 0x507a <spi_sendByte+0xe2>
    5078:	83 e0       	ldi	r24, 0x03	; 3
    507a:	df 91       	pop	r29
    507c:	cf 91       	pop	r28
    507e:	1f 91       	pop	r17
    5080:	08 95       	ret

00005082 <__vector_24>:
    5082:	1f 92       	push	r1
    5084:	0f 92       	push	r0
    5086:	0f b6       	in	r0, 0x3f	; 63
    5088:	0f 92       	push	r0
    508a:	11 24       	eor	r1, r1
    508c:	0b b6       	in	r0, 0x3b	; 59
    508e:	0f 92       	push	r0
    5090:	2f 93       	push	r18
    5092:	3f 93       	push	r19
    5094:	4f 93       	push	r20
    5096:	5f 93       	push	r21
    5098:	6f 93       	push	r22
    509a:	7f 93       	push	r23
    509c:	8f 93       	push	r24
    509e:	9f 93       	push	r25
    50a0:	af 93       	push	r26
    50a2:	bf 93       	push	r27
    50a4:	cf 93       	push	r28
    50a6:	df 93       	push	r29
    50a8:	ef 93       	push	r30
    50aa:	ff 93       	push	r31
    50ac:	6e b5       	in	r22, 0x2e	; 46
    50ae:	a0 91 29 18 	lds	r26, 0x1829	; 0x801829 <_this>
    50b2:	b0 91 2a 18 	lds	r27, 0x182A	; 0x80182a <_this+0x1>
    50b6:	18 96       	adiw	r26, 0x08	; 8
    50b8:	ed 91       	ld	r30, X+
    50ba:	fc 91       	ld	r31, X
    50bc:	19 97       	sbiw	r26, 0x09	; 9
    50be:	30 97       	sbiw	r30, 0x00	; 0
    50c0:	a1 f0       	breq	.+40     	; 0x50ea <__vector_24+0x68>
    50c2:	83 81       	ldd	r24, Z+3	; 0x03
    50c4:	22 81       	ldd	r18, Z+2	; 0x02
    50c6:	95 81       	ldd	r25, Z+5	; 0x05
    50c8:	82 1b       	sub	r24, r18
    50ca:	89 23       	and	r24, r25
    50cc:	24 81       	ldd	r18, Z+4	; 0x04
    50ce:	82 17       	cp	r24, r18
    50d0:	61 f0       	breq	.+24     	; 0x50ea <__vector_24+0x68>
    50d2:	83 81       	ldd	r24, Z+3	; 0x03
    50d4:	96 95       	lsr	r25
    50d6:	98 23       	and	r25, r24
    50d8:	c0 81       	ld	r28, Z
    50da:	d1 81       	ldd	r29, Z+1	; 0x01
    50dc:	c9 0f       	add	r28, r25
    50de:	d1 1d       	adc	r29, r1
    50e0:	68 83       	st	Y, r22
    50e2:	8f 5f       	subi	r24, 0xFF	; 255
    50e4:	95 81       	ldd	r25, Z+5	; 0x05
    50e6:	89 23       	and	r24, r25
    50e8:	83 83       	std	Z+3, r24	; 0x03
    50ea:	16 96       	adiw	r26, 0x06	; 6
    50ec:	ed 91       	ld	r30, X+
    50ee:	fc 91       	ld	r31, X
    50f0:	17 97       	sbiw	r26, 0x07	; 7
    50f2:	30 97       	sbiw	r30, 0x00	; 0
    50f4:	99 f0       	breq	.+38     	; 0x511c <__vector_24+0x9a>
    50f6:	93 81       	ldd	r25, Z+3	; 0x03
    50f8:	82 81       	ldd	r24, Z+2	; 0x02
    50fa:	98 17       	cp	r25, r24
    50fc:	79 f0       	breq	.+30     	; 0x511c <__vector_24+0x9a>
    50fe:	92 81       	ldd	r25, Z+2	; 0x02
    5100:	85 81       	ldd	r24, Z+5	; 0x05
    5102:	28 2f       	mov	r18, r24
    5104:	26 95       	lsr	r18
    5106:	29 23       	and	r18, r25
    5108:	a0 81       	ld	r26, Z
    510a:	b1 81       	ldd	r27, Z+1	; 0x01
    510c:	a2 0f       	add	r26, r18
    510e:	b1 1d       	adc	r27, r1
    5110:	2c 91       	ld	r18, X
    5112:	9f 5f       	subi	r25, 0xFF	; 255
    5114:	89 23       	and	r24, r25
    5116:	82 83       	std	Z+2, r24	; 0x02
    5118:	2e bd       	out	0x2e, r18	; 46
    511a:	2d c0       	rjmp	.+90     	; 0x5176 <__vector_24+0xf4>
    511c:	8c b5       	in	r24, 0x2c	; 44
    511e:	8f 77       	andi	r24, 0x7F	; 127
    5120:	8c bd       	out	0x2c, r24	; 44
    5122:	10 92 2b 18 	sts	0x182B, r1	; 0x80182b <_spi_active>
    5126:	a0 91 29 18 	lds	r26, 0x1829	; 0x801829 <_this>
    512a:	b0 91 2a 18 	lds	r27, 0x182A	; 0x80182a <_this+0x1>
    512e:	ed 91       	ld	r30, X+
    5130:	fc 91       	ld	r31, X
    5132:	11 97       	sbiw	r26, 0x01	; 1
    5134:	30 97       	sbiw	r30, 0x00	; 0
    5136:	f9 f0       	breq	.+62     	; 0x5176 <__vector_24+0xf4>
    5138:	13 96       	adiw	r26, 0x03	; 3
    513a:	8c 91       	ld	r24, X
    513c:	13 97       	sbiw	r26, 0x03	; 3
    513e:	81 30       	cpi	r24, 0x01	; 1
    5140:	71 f4       	brne	.+28     	; 0x515e <__vector_24+0xdc>
    5142:	20 81       	ld	r18, Z
    5144:	81 e0       	ldi	r24, 0x01	; 1
    5146:	90 e0       	ldi	r25, 0x00	; 0
    5148:	12 96       	adiw	r26, 0x02	; 2
    514a:	0c 90       	ld	r0, X
    514c:	02 c0       	rjmp	.+4      	; 0x5152 <__vector_24+0xd0>
    514e:	88 0f       	add	r24, r24
    5150:	99 1f       	adc	r25, r25
    5152:	0a 94       	dec	r0
    5154:	e2 f7       	brpl	.-8      	; 0x514e <__vector_24+0xcc>
    5156:	80 95       	com	r24
    5158:	82 23       	and	r24, r18
    515a:	80 83       	st	Z, r24
    515c:	0c c0       	rjmp	.+24     	; 0x5176 <__vector_24+0xf4>
    515e:	20 81       	ld	r18, Z
    5160:	81 e0       	ldi	r24, 0x01	; 1
    5162:	90 e0       	ldi	r25, 0x00	; 0
    5164:	12 96       	adiw	r26, 0x02	; 2
    5166:	0c 90       	ld	r0, X
    5168:	02 c0       	rjmp	.+4      	; 0x516e <__vector_24+0xec>
    516a:	88 0f       	add	r24, r24
    516c:	99 1f       	adc	r25, r25
    516e:	0a 94       	dec	r0
    5170:	e2 f7       	brpl	.-8      	; 0x516a <__vector_24+0xe8>
    5172:	82 2b       	or	r24, r18
    5174:	80 83       	st	Z, r24
    5176:	80 91 29 18 	lds	r24, 0x1829	; 0x801829 <_this>
    517a:	90 91 2a 18 	lds	r25, 0x182A	; 0x80182a <_this+0x1>
    517e:	dc 01       	movw	r26, r24
    5180:	1a 96       	adiw	r26, 0x0a	; 10
    5182:	ed 91       	ld	r30, X+
    5184:	fc 91       	ld	r31, X
    5186:	1b 97       	sbiw	r26, 0x0b	; 11
    5188:	30 97       	sbiw	r30, 0x00	; 0
    518a:	09 f0       	breq	.+2      	; 0x518e <__vector_24+0x10c>
    518c:	19 95       	eicall
    518e:	ff 91       	pop	r31
    5190:	ef 91       	pop	r30
    5192:	df 91       	pop	r29
    5194:	cf 91       	pop	r28
    5196:	bf 91       	pop	r27
    5198:	af 91       	pop	r26
    519a:	9f 91       	pop	r25
    519c:	8f 91       	pop	r24
    519e:	7f 91       	pop	r23
    51a0:	6f 91       	pop	r22
    51a2:	5f 91       	pop	r21
    51a4:	4f 91       	pop	r20
    51a6:	3f 91       	pop	r19
    51a8:	2f 91       	pop	r18
    51aa:	0f 90       	pop	r0
    51ac:	0b be       	out	0x3b, r0	; 59
    51ae:	0f 90       	pop	r0
    51b0:	0f be       	out	0x3f, r0	; 63
    51b2:	0f 90       	pop	r0
    51b4:	1f 90       	pop	r1
    51b6:	18 95       	reti

000051b8 <_turn_off>:
    51b8:	90 e0       	ldi	r25, 0x00	; 0
    51ba:	fc 01       	movw	r30, r24
    51bc:	ee 0f       	add	r30, r30
    51be:	ff 1f       	adc	r31, r31
    51c0:	e8 0f       	add	r30, r24
    51c2:	f9 1f       	adc	r31, r25
    51c4:	ee 0f       	add	r30, r30
    51c6:	ff 1f       	adc	r31, r31
    51c8:	e4 5d       	subi	r30, 0xD4	; 212
    51ca:	f7 4e       	sbci	r31, 0xE7	; 231
    51cc:	23 81       	ldd	r18, Z+3	; 0x03
    51ce:	21 11       	cpse	r18, r1
    51d0:	1f c0       	rjmp	.+62     	; 0x5210 <_turn_off+0x58>
    51d2:	9c 01       	movw	r18, r24
    51d4:	22 0f       	add	r18, r18
    51d6:	33 1f       	adc	r19, r19
    51d8:	f9 01       	movw	r30, r18
    51da:	e8 0f       	add	r30, r24
    51dc:	f9 1f       	adc	r31, r25
    51de:	ee 0f       	add	r30, r30
    51e0:	ff 1f       	adc	r31, r31
    51e2:	e4 5d       	subi	r30, 0xD4	; 212
    51e4:	f7 4e       	sbci	r31, 0xE7	; 231
    51e6:	a0 81       	ld	r26, Z
    51e8:	b1 81       	ldd	r27, Z+1	; 0x01
    51ea:	4c 91       	ld	r20, X
    51ec:	f9 01       	movw	r30, r18
    51ee:	e8 0f       	add	r30, r24
    51f0:	f9 1f       	adc	r31, r25
    51f2:	ee 0f       	add	r30, r30
    51f4:	ff 1f       	adc	r31, r31
    51f6:	e4 5d       	subi	r30, 0xD4	; 212
    51f8:	f7 4e       	sbci	r31, 0xE7	; 231
    51fa:	81 e0       	ldi	r24, 0x01	; 1
    51fc:	90 e0       	ldi	r25, 0x00	; 0
    51fe:	02 80       	ldd	r0, Z+2	; 0x02
    5200:	02 c0       	rjmp	.+4      	; 0x5206 <_turn_off+0x4e>
    5202:	88 0f       	add	r24, r24
    5204:	99 1f       	adc	r25, r25
    5206:	0a 94       	dec	r0
    5208:	e2 f7       	brpl	.-8      	; 0x5202 <_turn_off+0x4a>
    520a:	84 2b       	or	r24, r20
    520c:	8c 93       	st	X, r24
    520e:	08 95       	ret
    5210:	fc 01       	movw	r30, r24
    5212:	ee 0f       	add	r30, r30
    5214:	ff 1f       	adc	r31, r31
    5216:	df 01       	movw	r26, r30
    5218:	a8 0f       	add	r26, r24
    521a:	b9 1f       	adc	r27, r25
    521c:	aa 0f       	add	r26, r26
    521e:	bb 1f       	adc	r27, r27
    5220:	a4 5d       	subi	r26, 0xD4	; 212
    5222:	b7 4e       	sbci	r27, 0xE7	; 231
    5224:	0d 90       	ld	r0, X+
    5226:	bc 91       	ld	r27, X
    5228:	a0 2d       	mov	r26, r0
    522a:	2c 91       	ld	r18, X
    522c:	e8 0f       	add	r30, r24
    522e:	f9 1f       	adc	r31, r25
    5230:	ee 0f       	add	r30, r30
    5232:	ff 1f       	adc	r31, r31
    5234:	e4 5d       	subi	r30, 0xD4	; 212
    5236:	f7 4e       	sbci	r31, 0xE7	; 231
    5238:	81 e0       	ldi	r24, 0x01	; 1
    523a:	90 e0       	ldi	r25, 0x00	; 0
    523c:	02 80       	ldd	r0, Z+2	; 0x02
    523e:	02 c0       	rjmp	.+4      	; 0x5244 <_turn_off+0x8c>
    5240:	88 0f       	add	r24, r24
    5242:	99 1f       	adc	r25, r25
    5244:	0a 94       	dec	r0
    5246:	e2 f7       	brpl	.-8      	; 0x5240 <_turn_off+0x88>
    5248:	80 95       	com	r24
    524a:	82 23       	and	r24, r18
    524c:	8c 93       	st	X, r24
    524e:	08 95       	ret

00005250 <_turn_on>:
    5250:	90 e0       	ldi	r25, 0x00	; 0
    5252:	fc 01       	movw	r30, r24
    5254:	ee 0f       	add	r30, r30
    5256:	ff 1f       	adc	r31, r31
    5258:	e8 0f       	add	r30, r24
    525a:	f9 1f       	adc	r31, r25
    525c:	ee 0f       	add	r30, r30
    525e:	ff 1f       	adc	r31, r31
    5260:	e4 5d       	subi	r30, 0xD4	; 212
    5262:	f7 4e       	sbci	r31, 0xE7	; 231
    5264:	23 81       	ldd	r18, Z+3	; 0x03
    5266:	21 11       	cpse	r18, r1
    5268:	20 c0       	rjmp	.+64     	; 0x52aa <_turn_on+0x5a>
    526a:	9c 01       	movw	r18, r24
    526c:	22 0f       	add	r18, r18
    526e:	33 1f       	adc	r19, r19
    5270:	f9 01       	movw	r30, r18
    5272:	e8 0f       	add	r30, r24
    5274:	f9 1f       	adc	r31, r25
    5276:	ee 0f       	add	r30, r30
    5278:	ff 1f       	adc	r31, r31
    527a:	e4 5d       	subi	r30, 0xD4	; 212
    527c:	f7 4e       	sbci	r31, 0xE7	; 231
    527e:	a0 81       	ld	r26, Z
    5280:	b1 81       	ldd	r27, Z+1	; 0x01
    5282:	4c 91       	ld	r20, X
    5284:	f9 01       	movw	r30, r18
    5286:	e8 0f       	add	r30, r24
    5288:	f9 1f       	adc	r31, r25
    528a:	ee 0f       	add	r30, r30
    528c:	ff 1f       	adc	r31, r31
    528e:	e4 5d       	subi	r30, 0xD4	; 212
    5290:	f7 4e       	sbci	r31, 0xE7	; 231
    5292:	81 e0       	ldi	r24, 0x01	; 1
    5294:	90 e0       	ldi	r25, 0x00	; 0
    5296:	02 80       	ldd	r0, Z+2	; 0x02
    5298:	02 c0       	rjmp	.+4      	; 0x529e <_turn_on+0x4e>
    529a:	88 0f       	add	r24, r24
    529c:	99 1f       	adc	r25, r25
    529e:	0a 94       	dec	r0
    52a0:	e2 f7       	brpl	.-8      	; 0x529a <_turn_on+0x4a>
    52a2:	80 95       	com	r24
    52a4:	84 23       	and	r24, r20
    52a6:	8c 93       	st	X, r24
    52a8:	08 95       	ret
    52aa:	fc 01       	movw	r30, r24
    52ac:	ee 0f       	add	r30, r30
    52ae:	ff 1f       	adc	r31, r31
    52b0:	df 01       	movw	r26, r30
    52b2:	a8 0f       	add	r26, r24
    52b4:	b9 1f       	adc	r27, r25
    52b6:	aa 0f       	add	r26, r26
    52b8:	bb 1f       	adc	r27, r27
    52ba:	a4 5d       	subi	r26, 0xD4	; 212
    52bc:	b7 4e       	sbci	r27, 0xE7	; 231
    52be:	0d 90       	ld	r0, X+
    52c0:	bc 91       	ld	r27, X
    52c2:	a0 2d       	mov	r26, r0
    52c4:	2c 91       	ld	r18, X
    52c6:	e8 0f       	add	r30, r24
    52c8:	f9 1f       	adc	r31, r25
    52ca:	ee 0f       	add	r30, r30
    52cc:	ff 1f       	adc	r31, r31
    52ce:	e4 5d       	subi	r30, 0xD4	; 212
    52d0:	f7 4e       	sbci	r31, 0xE7	; 231
    52d2:	81 e0       	ldi	r24, 0x01	; 1
    52d4:	90 e0       	ldi	r25, 0x00	; 0
    52d6:	02 80       	ldd	r0, Z+2	; 0x02
    52d8:	02 c0       	rjmp	.+4      	; 0x52de <_turn_on+0x8e>
    52da:	88 0f       	add	r24, r24
    52dc:	99 1f       	adc	r25, r25
    52de:	0a 94       	dec	r0
    52e0:	e2 f7       	brpl	.-8      	; 0x52da <_turn_on+0x8a>
    52e2:	82 2b       	or	r24, r18
    52e4:	8c 93       	st	X, r24
    52e6:	08 95       	ret

000052e8 <_hal_led_task>:
    52e8:	cc 24       	eor	r12, r12
    52ea:	c3 94       	inc	r12
    52ec:	d1 2c       	mov	r13, r1
    52ee:	68 94       	set
    52f0:	bb 24       	eor	r11, r11
    52f2:	b2 f8       	bld	r11, 2
    52f4:	cc e2       	ldi	r28, 0x2C	; 44
    52f6:	d8 e1       	ldi	r29, 0x18	; 24
    52f8:	10 e0       	ldi	r17, 0x00	; 0
    52fa:	8c 81       	ldd	r24, Y+4	; 0x04
    52fc:	81 30       	cpi	r24, 0x01	; 1
    52fe:	81 f0       	breq	.+32     	; 0x5320 <_hal_led_task+0x38>
    5300:	18 f1       	brcs	.+70     	; 0x5348 <_hal_led_task+0x60>
    5302:	82 30       	cpi	r24, 0x02	; 2
    5304:	61 f5       	brne	.+88     	; 0x535e <_hal_led_task+0x76>
    5306:	e8 81       	ld	r30, Y
    5308:	f9 81       	ldd	r31, Y+1	; 0x01
    530a:	20 81       	ld	r18, Z
    530c:	c6 01       	movw	r24, r12
    530e:	0a 80       	ldd	r0, Y+2	; 0x02
    5310:	02 c0       	rjmp	.+4      	; 0x5316 <_hal_led_task+0x2e>
    5312:	88 0f       	add	r24, r24
    5314:	99 1f       	adc	r25, r25
    5316:	0a 94       	dec	r0
    5318:	e2 f7       	brpl	.-8      	; 0x5312 <_hal_led_task+0x2a>
    531a:	82 27       	eor	r24, r18
    531c:	80 83       	st	Z, r24
    531e:	1f c0       	rjmp	.+62     	; 0x535e <_hal_led_task+0x76>
    5320:	8d 81       	ldd	r24, Y+5	; 0x05
    5322:	8f 5f       	subi	r24, 0xFF	; 255
    5324:	86 30       	cpi	r24, 0x06	; 6
    5326:	10 f4       	brcc	.+4      	; 0x532c <_hal_led_task+0x44>
    5328:	8d 83       	std	Y+5, r24	; 0x05
    532a:	19 c0       	rjmp	.+50     	; 0x535e <_hal_led_task+0x76>
    532c:	1d 82       	std	Y+5, r1	; 0x05
    532e:	e8 81       	ld	r30, Y
    5330:	f9 81       	ldd	r31, Y+1	; 0x01
    5332:	20 81       	ld	r18, Z
    5334:	c6 01       	movw	r24, r12
    5336:	0a 80       	ldd	r0, Y+2	; 0x02
    5338:	02 c0       	rjmp	.+4      	; 0x533e <_hal_led_task+0x56>
    533a:	88 0f       	add	r24, r24
    533c:	99 1f       	adc	r25, r25
    533e:	0a 94       	dec	r0
    5340:	e2 f7       	brpl	.-8      	; 0x533a <_hal_led_task+0x52>
    5342:	82 27       	eor	r24, r18
    5344:	80 83       	st	Z, r24
    5346:	0b c0       	rjmp	.+22     	; 0x535e <_hal_led_task+0x76>
    5348:	0d 81       	ldd	r16, Y+5	; 0x05
    534a:	00 23       	and	r16, r16
    534c:	29 f0       	breq	.+10     	; 0x5358 <_hal_led_task+0x70>
    534e:	81 2f       	mov	r24, r17
    5350:	7f df       	rcall	.-258    	; 0x5250 <_turn_on>
    5352:	01 50       	subi	r16, 0x01	; 1
    5354:	0d 83       	std	Y+5, r16	; 0x05
    5356:	03 c0       	rjmp	.+6      	; 0x535e <_hal_led_task+0x76>
    5358:	bc 82       	std	Y+4, r11	; 0x04
    535a:	81 2f       	mov	r24, r17
    535c:	2d df       	rcall	.-422    	; 0x51b8 <_turn_off>
    535e:	1f 5f       	subi	r17, 0xFF	; 255
    5360:	26 96       	adiw	r28, 0x06	; 6
    5362:	14 30       	cpi	r17, 0x04	; 4
    5364:	51 f6       	brne	.-108    	; 0x52fa <_hal_led_task+0x12>
    5366:	6c e0       	ldi	r22, 0x0C	; 12
    5368:	70 e0       	ldi	r23, 0x00	; 0
    536a:	80 e0       	ldi	r24, 0x00	; 0
    536c:	90 e0       	ldi	r25, 0x00	; 0
    536e:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <vTaskDelay>
    5372:	c0 cf       	rjmp	.-128    	; 0x52f4 <_hal_led_task+0xc>

00005374 <status_leds_initialise>:
    5374:	ef 92       	push	r14
    5376:	ff 92       	push	r15
    5378:	0f 93       	push	r16
    537a:	1f 93       	push	r17
    537c:	cf 93       	push	r28
    537e:	df 93       	push	r29
    5380:	08 2f       	mov	r16, r24
    5382:	80 e4       	ldi	r24, 0x40	; 64
    5384:	87 b9       	out	0x07, r24	; 7
    5386:	cc e2       	ldi	r28, 0x2C	; 44
    5388:	d8 e1       	ldi	r29, 0x18	; 24
    538a:	0f 2e       	mov	r0, r31
    538c:	f8 e2       	ldi	r31, 0x28	; 40
    538e:	ef 2e       	mov	r14, r31
    5390:	f1 2c       	mov	r15, r1
    5392:	f0 2d       	mov	r31, r0
    5394:	f9 82       	std	Y+1, r15	; 0x01
    5396:	e8 82       	st	Y, r14
    5398:	86 e0       	ldi	r24, 0x06	; 6
    539a:	8a 83       	std	Y+2, r24	; 0x02
    539c:	1b 82       	std	Y+3, r1	; 0x03
    539e:	14 e0       	ldi	r17, 0x04	; 4
    53a0:	1c 83       	std	Y+4, r17	; 0x04
    53a2:	80 e0       	ldi	r24, 0x00	; 0
    53a4:	09 df       	rcall	.-494    	; 0x51b8 <_turn_off>
    53a6:	80 e8       	ldi	r24, 0x80	; 128
    53a8:	87 b9       	out	0x07, r24	; 7
    53aa:	ff 82       	std	Y+7, r15	; 0x07
    53ac:	ee 82       	std	Y+6, r14	; 0x06
    53ae:	87 e0       	ldi	r24, 0x07	; 7
    53b0:	88 87       	std	Y+8, r24	; 0x08
    53b2:	19 86       	std	Y+9, r1	; 0x09
    53b4:	1a 87       	std	Y+10, r17	; 0x0a
    53b6:	81 e0       	ldi	r24, 0x01	; 1
    53b8:	ff de       	rcall	.-514    	; 0x51b8 <_turn_off>
    53ba:	80 e2       	ldi	r24, 0x20	; 32
    53bc:	83 bb       	out	0x13, r24	; 19
    53be:	84 e3       	ldi	r24, 0x34	; 52
    53c0:	90 e0       	ldi	r25, 0x00	; 0
    53c2:	9d 87       	std	Y+13, r25	; 0x0d
    53c4:	8c 87       	std	Y+12, r24	; 0x0c
    53c6:	85 e0       	ldi	r24, 0x05	; 5
    53c8:	8e 87       	std	Y+14, r24	; 0x0e
    53ca:	1f 86       	std	Y+15, r1	; 0x0f
    53cc:	18 8b       	std	Y+16, r17	; 0x10
    53ce:	82 e0       	ldi	r24, 0x02	; 2
    53d0:	f3 de       	rcall	.-538    	; 0x51b8 <_turn_off>
    53d2:	80 e1       	ldi	r24, 0x10	; 16
    53d4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
    53d8:	82 e0       	ldi	r24, 0x02	; 2
    53da:	91 e0       	ldi	r25, 0x01	; 1
    53dc:	9b 8b       	std	Y+19, r25	; 0x13
    53de:	8a 8b       	std	Y+18, r24	; 0x12
    53e0:	1c 8b       	std	Y+20, r17	; 0x14
    53e2:	1d 8a       	std	Y+21, r1	; 0x15
    53e4:	1e 8b       	std	Y+22, r17	; 0x16
    53e6:	83 e0       	ldi	r24, 0x03	; 3
    53e8:	e7 de       	rcall	.-562    	; 0x51b8 <_turn_off>
    53ea:	e1 2c       	mov	r14, r1
    53ec:	f1 2c       	mov	r15, r1
    53ee:	20 e0       	ldi	r18, 0x00	; 0
    53f0:	30 e0       	ldi	r19, 0x00	; 0
    53f2:	40 ec       	ldi	r20, 0xC0	; 192
    53f4:	50 e0       	ldi	r21, 0x00	; 0
    53f6:	6f e2       	ldi	r22, 0x2F	; 47
    53f8:	78 e0       	ldi	r23, 0x08	; 8
    53fa:	84 e7       	ldi	r24, 0x74	; 116
    53fc:	99 e2       	ldi	r25, 0x29	; 41
    53fe:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <xTaskCreate>
    5402:	df 91       	pop	r29
    5404:	cf 91       	pop	r28
    5406:	1f 91       	pop	r17
    5408:	0f 91       	pop	r16
    540a:	ff 90       	pop	r15
    540c:	ef 90       	pop	r14
    540e:	08 95       	ret

00005410 <status_leds_slowBlink>:
    5410:	cf 93       	push	r28
    5412:	df 93       	push	r29
    5414:	90 e0       	ldi	r25, 0x00	; 0
    5416:	fc 01       	movw	r30, r24
    5418:	ee 0f       	add	r30, r30
    541a:	ff 1f       	adc	r31, r31
    541c:	df 01       	movw	r26, r30
    541e:	a8 0f       	add	r26, r24
    5420:	b9 1f       	adc	r27, r25
    5422:	aa 0f       	add	r26, r26
    5424:	bb 1f       	adc	r27, r27
    5426:	a4 5d       	subi	r26, 0xD4	; 212
    5428:	b7 4e       	sbci	r27, 0xE7	; 231
    542a:	cd 91       	ld	r28, X+
    542c:	dc 91       	ld	r29, X
    542e:	11 97       	sbiw	r26, 0x01	; 1
    5430:	48 81       	ld	r20, Y
    5432:	21 e0       	ldi	r18, 0x01	; 1
    5434:	30 e0       	ldi	r19, 0x00	; 0
    5436:	12 96       	adiw	r26, 0x02	; 2
    5438:	0c 90       	ld	r0, X
    543a:	12 97       	sbiw	r26, 0x02	; 2
    543c:	02 c0       	rjmp	.+4      	; 0x5442 <status_leds_slowBlink+0x32>
    543e:	22 0f       	add	r18, r18
    5440:	33 1f       	adc	r19, r19
    5442:	0a 94       	dec	r0
    5444:	e2 f7       	brpl	.-8      	; 0x543e <status_leds_slowBlink+0x2e>
    5446:	24 27       	eor	r18, r20
    5448:	28 83       	st	Y, r18
    544a:	fd 01       	movw	r30, r26
    544c:	81 e0       	ldi	r24, 0x01	; 1
    544e:	84 83       	std	Z+4, r24	; 0x04
    5450:	df 91       	pop	r29
    5452:	cf 91       	pop	r28
    5454:	08 95       	ret

00005456 <status_leds_fastBlink>:
    5456:	cf 93       	push	r28
    5458:	df 93       	push	r29
    545a:	90 e0       	ldi	r25, 0x00	; 0
    545c:	fc 01       	movw	r30, r24
    545e:	ee 0f       	add	r30, r30
    5460:	ff 1f       	adc	r31, r31
    5462:	df 01       	movw	r26, r30
    5464:	a8 0f       	add	r26, r24
    5466:	b9 1f       	adc	r27, r25
    5468:	aa 0f       	add	r26, r26
    546a:	bb 1f       	adc	r27, r27
    546c:	a4 5d       	subi	r26, 0xD4	; 212
    546e:	b7 4e       	sbci	r27, 0xE7	; 231
    5470:	cd 91       	ld	r28, X+
    5472:	dc 91       	ld	r29, X
    5474:	11 97       	sbiw	r26, 0x01	; 1
    5476:	48 81       	ld	r20, Y
    5478:	21 e0       	ldi	r18, 0x01	; 1
    547a:	30 e0       	ldi	r19, 0x00	; 0
    547c:	12 96       	adiw	r26, 0x02	; 2
    547e:	0c 90       	ld	r0, X
    5480:	12 97       	sbiw	r26, 0x02	; 2
    5482:	02 c0       	rjmp	.+4      	; 0x5488 <status_leds_fastBlink+0x32>
    5484:	22 0f       	add	r18, r18
    5486:	33 1f       	adc	r19, r19
    5488:	0a 94       	dec	r0
    548a:	e2 f7       	brpl	.-8      	; 0x5484 <status_leds_fastBlink+0x2e>
    548c:	24 27       	eor	r18, r20
    548e:	28 83       	st	Y, r18
    5490:	fd 01       	movw	r30, r26
    5492:	82 e0       	ldi	r24, 0x02	; 2
    5494:	84 83       	std	Z+4, r24	; 0x04
    5496:	df 91       	pop	r29
    5498:	cf 91       	pop	r28
    549a:	08 95       	ret

0000549c <status_leds_ledOn>:
    549c:	28 2f       	mov	r18, r24
    549e:	30 e0       	ldi	r19, 0x00	; 0
    54a0:	f9 01       	movw	r30, r18
    54a2:	ee 0f       	add	r30, r30
    54a4:	ff 1f       	adc	r31, r31
    54a6:	e2 0f       	add	r30, r18
    54a8:	f3 1f       	adc	r31, r19
    54aa:	ee 0f       	add	r30, r30
    54ac:	ff 1f       	adc	r31, r31
    54ae:	e4 5d       	subi	r30, 0xD4	; 212
    54b0:	f7 4e       	sbci	r31, 0xE7	; 231
    54b2:	93 e0       	ldi	r25, 0x03	; 3
    54b4:	94 83       	std	Z+4, r25	; 0x04
    54b6:	cc ce       	rjmp	.-616    	; 0x5250 <_turn_on>
    54b8:	08 95       	ret

000054ba <status_leds_ledOff>:
    54ba:	28 2f       	mov	r18, r24
    54bc:	30 e0       	ldi	r19, 0x00	; 0
    54be:	f9 01       	movw	r30, r18
    54c0:	ee 0f       	add	r30, r30
    54c2:	ff 1f       	adc	r31, r31
    54c4:	e2 0f       	add	r30, r18
    54c6:	f3 1f       	adc	r31, r19
    54c8:	ee 0f       	add	r30, r30
    54ca:	ff 1f       	adc	r31, r31
    54cc:	e4 5d       	subi	r30, 0xD4	; 212
    54ce:	f7 4e       	sbci	r31, 0xE7	; 231
    54d0:	94 e0       	ldi	r25, 0x04	; 4
    54d2:	94 83       	std	Z+4, r25	; 0x04
    54d4:	71 ce       	rjmp	.-798    	; 0x51b8 <_turn_off>
    54d6:	08 95       	ret

000054d8 <_initTwiInterface>:
    54d8:	80 91 52 18 	lds	r24, 0x1852	; 0x801852 <_twiIsInitiated>
    54dc:	81 11       	cpse	r24, r1
    54de:	0c c0       	rjmp	.+24     	; 0x54f8 <_initTwiInterface+0x20>
    54e0:	8c e0       	ldi	r24, 0x0C	; 12
    54e2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    54e6:	8f ef       	ldi	r24, 0xFF	; 255
    54e8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    54ec:	84 e0       	ldi	r24, 0x04	; 4
    54ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    54f2:	81 e0       	ldi	r24, 0x01	; 1
    54f4:	80 93 52 18 	sts	0x1852, r24	; 0x801852 <_twiIsInitiated>
    54f8:	08 95       	ret

000054fa <twiCreate>:
    54fa:	af 92       	push	r10
    54fc:	bf 92       	push	r11
    54fe:	cf 92       	push	r12
    5500:	df 92       	push	r13
    5502:	ef 92       	push	r14
    5504:	ff 92       	push	r15
    5506:	0f 93       	push	r16
    5508:	1f 93       	push	r17
    550a:	cf 93       	push	r28
    550c:	df 93       	push	r29
    550e:	a8 2e       	mov	r10, r24
    5510:	b6 2e       	mov	r11, r22
    5512:	69 01       	movw	r12, r18
    5514:	7a 01       	movw	r14, r20
    5516:	84 e0       	ldi	r24, 0x04	; 4
    5518:	90 e0       	ldi	r25, 0x00	; 0
    551a:	cb d3       	rcall	.+1942   	; 0x5cb2 <malloc>
    551c:	ec 01       	movw	r28, r24
    551e:	89 2b       	or	r24, r25
    5520:	61 f1       	breq	.+88     	; 0x557a <twiCreate+0x80>
    5522:	a8 82       	st	Y, r10
    5524:	81 e0       	ldi	r24, 0x01	; 1
    5526:	b8 12       	cpse	r11, r24
    5528:	12 c0       	rjmp	.+36     	; 0x554e <twiCreate+0x54>
    552a:	c7 01       	movw	r24, r14
    552c:	b6 01       	movw	r22, r12
    552e:	20 ea       	ldi	r18, 0xA0	; 160
    5530:	36 e8       	ldi	r19, 0x86	; 134
    5532:	41 e0       	ldi	r20, 0x01	; 1
    5534:	50 e0       	ldi	r21, 0x00	; 0
    5536:	79 d3       	rcall	.+1778   	; 0x5c2a <__udivmodsi4>
    5538:	da 01       	movw	r26, r20
    553a:	c9 01       	movw	r24, r18
    553c:	40 97       	sbiw	r24, 0x10	; 16
    553e:	a1 09       	sbc	r26, r1
    5540:	b1 09       	sbc	r27, r1
    5542:	b6 95       	lsr	r27
    5544:	a7 95       	ror	r26
    5546:	97 95       	ror	r25
    5548:	87 95       	ror	r24
    554a:	89 83       	std	Y+1, r24	; 0x01
    554c:	11 c0       	rjmp	.+34     	; 0x5570 <twiCreate+0x76>
    554e:	c7 01       	movw	r24, r14
    5550:	b6 01       	movw	r22, r12
    5552:	20 e8       	ldi	r18, 0x80	; 128
    5554:	3a e1       	ldi	r19, 0x1A	; 26
    5556:	46 e0       	ldi	r20, 0x06	; 6
    5558:	50 e0       	ldi	r21, 0x00	; 0
    555a:	67 d3       	rcall	.+1742   	; 0x5c2a <__udivmodsi4>
    555c:	da 01       	movw	r26, r20
    555e:	c9 01       	movw	r24, r18
    5560:	40 97       	sbiw	r24, 0x10	; 16
    5562:	a1 09       	sbc	r26, r1
    5564:	b1 09       	sbc	r27, r1
    5566:	b6 95       	lsr	r27
    5568:	a7 95       	ror	r26
    556a:	97 95       	ror	r25
    556c:	87 95       	ror	r24
    556e:	89 83       	std	Y+1, r24	; 0x01
    5570:	1b 83       	std	Y+3, r17	; 0x03
    5572:	0a 83       	std	Y+2, r16	; 0x02
    5574:	8c 2f       	mov	r24, r28
    5576:	9d 2f       	mov	r25, r29
    5578:	02 c0       	rjmp	.+4      	; 0x557e <twiCreate+0x84>
    557a:	80 e0       	ldi	r24, 0x00	; 0
    557c:	90 e0       	ldi	r25, 0x00	; 0
    557e:	df 91       	pop	r29
    5580:	cf 91       	pop	r28
    5582:	1f 91       	pop	r17
    5584:	0f 91       	pop	r16
    5586:	ff 90       	pop	r15
    5588:	ef 90       	pop	r14
    558a:	df 90       	pop	r13
    558c:	cf 90       	pop	r12
    558e:	bf 90       	pop	r11
    5590:	af 90       	pop	r10
    5592:	08 95       	ret

00005594 <twiIsBusy>:
    5594:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5598:	81 70       	andi	r24, 0x01	; 1
    559a:	08 95       	ret

0000559c <twiTransmit>:
    559c:	ff 92       	push	r15
    559e:	0f 93       	push	r16
    55a0:	1f 93       	push	r17
    55a2:	cf 93       	push	r28
    55a4:	df 93       	push	r29
    55a6:	00 97       	sbiw	r24, 0x00	; 0
    55a8:	d1 f1       	breq	.+116    	; 0x561e <twiTransmit+0x82>
    55aa:	4a 30       	cpi	r20, 0x0A	; 10
    55ac:	d0 f5       	brcc	.+116    	; 0x5622 <twiTransmit+0x86>
    55ae:	f4 2e       	mov	r15, r20
    55b0:	8b 01       	movw	r16, r22
    55b2:	ec 01       	movw	r28, r24
    55b4:	ef df       	rcall	.-34     	; 0x5594 <twiIsBusy>
    55b6:	81 11       	cpse	r24, r1
    55b8:	36 c0       	rjmp	.+108    	; 0x5626 <twiTransmit+0x8a>
    55ba:	80 91 45 18 	lds	r24, 0x1845	; 0x801845 <_twiCurrentHandler>
    55be:	90 91 46 18 	lds	r25, 0x1846	; 0x801846 <_twiCurrentHandler+0x1>
    55c2:	c8 17       	cp	r28, r24
    55c4:	d9 07       	cpc	r29, r25
    55c6:	41 f0       	breq	.+16     	; 0x55d8 <twiTransmit+0x3c>
    55c8:	87 df       	rcall	.-242    	; 0x54d8 <_initTwiInterface>
    55ca:	89 81       	ldd	r24, Y+1	; 0x01
    55cc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    55d0:	d0 93 46 18 	sts	0x1846, r29	; 0x801846 <_twiCurrentHandler+0x1>
    55d4:	c0 93 45 18 	sts	0x1845, r28	; 0x801845 <_twiCurrentHandler>
    55d8:	81 e0       	ldi	r24, 0x01	; 1
    55da:	8f 0d       	add	r24, r15
    55dc:	80 93 47 18 	sts	0x1847, r24	; 0x801847 <_twiMessageLen>
    55e0:	88 81       	ld	r24, Y
    55e2:	88 0f       	add	r24, r24
    55e4:	80 93 48 18 	sts	0x1848, r24	; 0x801848 <_twiMessageBuffer>
    55e8:	ff 20       	and	r15, r15
    55ea:	89 f0       	breq	.+34     	; 0x560e <twiTransmit+0x72>
    55ec:	f8 01       	movw	r30, r16
    55ee:	a9 e4       	ldi	r26, 0x49	; 73
    55f0:	b8 e1       	ldi	r27, 0x18	; 24
    55f2:	4f ef       	ldi	r20, 0xFF	; 255
    55f4:	4f 0d       	add	r20, r15
    55f6:	64 2f       	mov	r22, r20
    55f8:	70 e0       	ldi	r23, 0x00	; 0
    55fa:	cb 01       	movw	r24, r22
    55fc:	01 96       	adiw	r24, 0x01	; 1
    55fe:	b8 01       	movw	r22, r16
    5600:	68 0f       	add	r22, r24
    5602:	79 1f       	adc	r23, r25
    5604:	81 91       	ld	r24, Z+
    5606:	8d 93       	st	X+, r24
    5608:	e6 17       	cp	r30, r22
    560a:	f7 07       	cpc	r31, r23
    560c:	d9 f7       	brne	.-10     	; 0x5604 <twiTransmit+0x68>
    560e:	88 ef       	ldi	r24, 0xF8	; 248
    5610:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5614:	85 ea       	ldi	r24, 0xA5	; 165
    5616:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    561a:	84 e0       	ldi	r24, 0x04	; 4
    561c:	05 c0       	rjmp	.+10     	; 0x5628 <twiTransmit+0x8c>
    561e:	86 e0       	ldi	r24, 0x06	; 6
    5620:	03 c0       	rjmp	.+6      	; 0x5628 <twiTransmit+0x8c>
    5622:	87 e0       	ldi	r24, 0x07	; 7
    5624:	01 c0       	rjmp	.+2      	; 0x5628 <twiTransmit+0x8c>
    5626:	82 e0       	ldi	r24, 0x02	; 2
    5628:	df 91       	pop	r29
    562a:	cf 91       	pop	r28
    562c:	1f 91       	pop	r17
    562e:	0f 91       	pop	r16
    5630:	ff 90       	pop	r15
    5632:	08 95       	ret

00005634 <twiReceive>:
    5634:	1f 93       	push	r17
    5636:	cf 93       	push	r28
    5638:	df 93       	push	r29
    563a:	00 97       	sbiw	r24, 0x00	; 0
    563c:	29 f1       	breq	.+74     	; 0x5688 <twiReceive+0x54>
    563e:	6b 30       	cpi	r22, 0x0B	; 11
    5640:	28 f5       	brcc	.+74     	; 0x568c <twiReceive+0x58>
    5642:	16 2f       	mov	r17, r22
    5644:	ec 01       	movw	r28, r24
    5646:	a6 df       	rcall	.-180    	; 0x5594 <twiIsBusy>
    5648:	81 11       	cpse	r24, r1
    564a:	22 c0       	rjmp	.+68     	; 0x5690 <twiReceive+0x5c>
    564c:	80 91 45 18 	lds	r24, 0x1845	; 0x801845 <_twiCurrentHandler>
    5650:	90 91 46 18 	lds	r25, 0x1846	; 0x801846 <_twiCurrentHandler+0x1>
    5654:	c8 17       	cp	r28, r24
    5656:	d9 07       	cpc	r29, r25
    5658:	41 f0       	breq	.+16     	; 0x566a <twiReceive+0x36>
    565a:	3e df       	rcall	.-388    	; 0x54d8 <_initTwiInterface>
    565c:	89 81       	ldd	r24, Y+1	; 0x01
    565e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    5662:	d0 93 46 18 	sts	0x1846, r29	; 0x801846 <_twiCurrentHandler+0x1>
    5666:	c0 93 45 18 	sts	0x1845, r28	; 0x801845 <_twiCurrentHandler>
    566a:	10 93 47 18 	sts	0x1847, r17	; 0x801847 <_twiMessageLen>
    566e:	88 81       	ld	r24, Y
    5670:	88 0f       	add	r24, r24
    5672:	81 60       	ori	r24, 0x01	; 1
    5674:	80 93 48 18 	sts	0x1848, r24	; 0x801848 <_twiMessageBuffer>
    5678:	88 ef       	ldi	r24, 0xF8	; 248
    567a:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    567e:	85 ea       	ldi	r24, 0xA5	; 165
    5680:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5684:	85 e0       	ldi	r24, 0x05	; 5
    5686:	05 c0       	rjmp	.+10     	; 0x5692 <twiReceive+0x5e>
    5688:	86 e0       	ldi	r24, 0x06	; 6
    568a:	03 c0       	rjmp	.+6      	; 0x5692 <twiReceive+0x5e>
    568c:	87 e0       	ldi	r24, 0x07	; 7
    568e:	01 c0       	rjmp	.+2      	; 0x5692 <twiReceive+0x5e>
    5690:	82 e0       	ldi	r24, 0x02	; 2
    5692:	df 91       	pop	r29
    5694:	cf 91       	pop	r28
    5696:	1f 91       	pop	r17
    5698:	08 95       	ret

0000569a <__vector_39>:
    569a:	1f 92       	push	r1
    569c:	0f 92       	push	r0
    569e:	0f b6       	in	r0, 0x3f	; 63
    56a0:	0f 92       	push	r0
    56a2:	11 24       	eor	r1, r1
    56a4:	0b b6       	in	r0, 0x3b	; 59
    56a6:	0f 92       	push	r0
    56a8:	2f 93       	push	r18
    56aa:	3f 93       	push	r19
    56ac:	4f 93       	push	r20
    56ae:	5f 93       	push	r21
    56b0:	6f 93       	push	r22
    56b2:	7f 93       	push	r23
    56b4:	8f 93       	push	r24
    56b6:	9f 93       	push	r25
    56b8:	af 93       	push	r26
    56ba:	bf 93       	push	r27
    56bc:	ef 93       	push	r30
    56be:	ff 93       	push	r31
    56c0:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    56c4:	8e 2f       	mov	r24, r30
    56c6:	90 e0       	ldi	r25, 0x00	; 0
    56c8:	fc 01       	movw	r30, r24
    56ca:	38 97       	sbiw	r30, 0x08	; 8
    56cc:	e1 35       	cpi	r30, 0x51	; 81
    56ce:	f1 05       	cpc	r31, r1
    56d0:	08 f0       	brcs	.+2      	; 0x56d4 <__vector_39+0x3a>
    56d2:	75 c0       	rjmp	.+234    	; 0x57be <__vector_39+0x124>
    56d4:	88 27       	eor	r24, r24
    56d6:	e4 58       	subi	r30, 0x84	; 132
    56d8:	ff 4f       	sbci	r31, 0xFF	; 255
    56da:	8f 4f       	sbci	r24, 0xFF	; 255
    56dc:	c8 c2       	rjmp	.+1424   	; 0x5c6e <__tablejump2__>
    56de:	10 92 44 18 	sts	0x1844, r1	; 0x801844 <_index.1885>
    56e2:	e0 91 44 18 	lds	r30, 0x1844	; 0x801844 <_index.1885>
    56e6:	80 91 47 18 	lds	r24, 0x1847	; 0x801847 <_twiMessageLen>
    56ea:	e8 17       	cp	r30, r24
    56ec:	70 f4       	brcc	.+28     	; 0x570a <__vector_39+0x70>
    56ee:	81 e0       	ldi	r24, 0x01	; 1
    56f0:	8e 0f       	add	r24, r30
    56f2:	80 93 44 18 	sts	0x1844, r24	; 0x801844 <_index.1885>
    56f6:	f0 e0       	ldi	r31, 0x00	; 0
    56f8:	e8 5b       	subi	r30, 0xB8	; 184
    56fa:	f7 4e       	sbci	r31, 0xE7	; 231
    56fc:	80 81       	ld	r24, Z
    56fe:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5702:	85 e8       	ldi	r24, 0x85	; 133
    5704:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5708:	72 c0       	rjmp	.+228    	; 0x57ee <__vector_39+0x154>
    570a:	84 e9       	ldi	r24, 0x94	; 148
    570c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5710:	80 91 45 18 	lds	r24, 0x1845	; 0x801845 <_twiCurrentHandler>
    5714:	90 91 46 18 	lds	r25, 0x1846	; 0x801846 <_twiCurrentHandler+0x1>
    5718:	dc 01       	movw	r26, r24
    571a:	12 96       	adiw	r26, 0x02	; 2
    571c:	ed 91       	ld	r30, X+
    571e:	fc 91       	ld	r31, X
    5720:	13 97       	sbiw	r26, 0x03	; 3
    5722:	30 97       	sbiw	r30, 0x00	; 0
    5724:	09 f4       	brne	.+2      	; 0x5728 <__vector_39+0x8e>
    5726:	63 c0       	rjmp	.+198    	; 0x57ee <__vector_39+0x154>
    5728:	20 e0       	ldi	r18, 0x00	; 0
    572a:	40 e0       	ldi	r20, 0x00	; 0
    572c:	50 e0       	ldi	r21, 0x00	; 0
    572e:	64 e0       	ldi	r22, 0x04	; 4
    5730:	19 95       	eicall
    5732:	5d c0       	rjmp	.+186    	; 0x57ee <__vector_39+0x154>
    5734:	e0 91 44 18 	lds	r30, 0x1844	; 0x801844 <_index.1885>
    5738:	81 e0       	ldi	r24, 0x01	; 1
    573a:	8e 0f       	add	r24, r30
    573c:	80 93 44 18 	sts	0x1844, r24	; 0x801844 <_index.1885>
    5740:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5744:	f0 e0       	ldi	r31, 0x00	; 0
    5746:	e8 5b       	subi	r30, 0xB8	; 184
    5748:	f7 4e       	sbci	r31, 0xE7	; 231
    574a:	80 83       	st	Z, r24
    574c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    5750:	80 34       	cpi	r24, 0x40	; 64
    5752:	11 f4       	brne	.+4      	; 0x5758 <__vector_39+0xbe>
    5754:	10 92 44 18 	sts	0x1844, r1	; 0x801844 <_index.1885>
    5758:	20 91 44 18 	lds	r18, 0x1844	; 0x801844 <_index.1885>
    575c:	30 e0       	ldi	r19, 0x00	; 0
    575e:	80 91 47 18 	lds	r24, 0x1847	; 0x801847 <_twiMessageLen>
    5762:	90 e0       	ldi	r25, 0x00	; 0
    5764:	01 97       	sbiw	r24, 0x01	; 1
    5766:	28 17       	cp	r18, r24
    5768:	39 07       	cpc	r19, r25
    576a:	24 f4       	brge	.+8      	; 0x5774 <__vector_39+0xda>
    576c:	85 ec       	ldi	r24, 0xC5	; 197
    576e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5772:	3d c0       	rjmp	.+122    	; 0x57ee <__vector_39+0x154>
    5774:	85 e8       	ldi	r24, 0x85	; 133
    5776:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    577a:	39 c0       	rjmp	.+114    	; 0x57ee <__vector_39+0x154>
    577c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    5780:	e0 91 44 18 	lds	r30, 0x1844	; 0x801844 <_index.1885>
    5784:	f0 e0       	ldi	r31, 0x00	; 0
    5786:	e8 5b       	subi	r30, 0xB8	; 184
    5788:	f7 4e       	sbci	r31, 0xE7	; 231
    578a:	80 83       	st	Z, r24
    578c:	84 e9       	ldi	r24, 0x94	; 148
    578e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    5792:	80 91 45 18 	lds	r24, 0x1845	; 0x801845 <_twiCurrentHandler>
    5796:	90 91 46 18 	lds	r25, 0x1846	; 0x801846 <_twiCurrentHandler+0x1>
    579a:	dc 01       	movw	r26, r24
    579c:	12 96       	adiw	r26, 0x02	; 2
    579e:	ed 91       	ld	r30, X+
    57a0:	fc 91       	ld	r31, X
    57a2:	13 97       	sbiw	r26, 0x03	; 3
    57a4:	30 97       	sbiw	r30, 0x00	; 0
    57a6:	19 f1       	breq	.+70     	; 0x57ee <__vector_39+0x154>
    57a8:	20 91 47 18 	lds	r18, 0x1847	; 0x801847 <_twiMessageLen>
    57ac:	48 e4       	ldi	r20, 0x48	; 72
    57ae:	58 e1       	ldi	r21, 0x18	; 24
    57b0:	65 e0       	ldi	r22, 0x05	; 5
    57b2:	19 95       	eicall
    57b4:	1c c0       	rjmp	.+56     	; 0x57ee <__vector_39+0x154>
    57b6:	85 ea       	ldi	r24, 0xA5	; 165
    57b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    57bc:	18 c0       	rjmp	.+48     	; 0x57ee <__vector_39+0x154>
    57be:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    57c2:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    57c6:	84 e0       	ldi	r24, 0x04	; 4
    57c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    57cc:	80 91 45 18 	lds	r24, 0x1845	; 0x801845 <_twiCurrentHandler>
    57d0:	90 91 46 18 	lds	r25, 0x1846	; 0x801846 <_twiCurrentHandler+0x1>
    57d4:	dc 01       	movw	r26, r24
    57d6:	12 96       	adiw	r26, 0x02	; 2
    57d8:	ed 91       	ld	r30, X+
    57da:	fc 91       	ld	r31, X
    57dc:	13 97       	sbiw	r26, 0x03	; 3
    57de:	30 97       	sbiw	r30, 0x00	; 0
    57e0:	31 f0       	breq	.+12     	; 0x57ee <__vector_39+0x154>
    57e2:	20 e0       	ldi	r18, 0x00	; 0
    57e4:	40 e0       	ldi	r20, 0x00	; 0
    57e6:	50 e0       	ldi	r21, 0x00	; 0
    57e8:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    57ec:	19 95       	eicall
    57ee:	ff 91       	pop	r31
    57f0:	ef 91       	pop	r30
    57f2:	bf 91       	pop	r27
    57f4:	af 91       	pop	r26
    57f6:	9f 91       	pop	r25
    57f8:	8f 91       	pop	r24
    57fa:	7f 91       	pop	r23
    57fc:	6f 91       	pop	r22
    57fe:	5f 91       	pop	r21
    5800:	4f 91       	pop	r20
    5802:	3f 91       	pop	r19
    5804:	2f 91       	pop	r18
    5806:	0f 90       	pop	r0
    5808:	0b be       	out	0x3b, r0	; 59
    580a:	0f 90       	pop	r0
    580c:	0f be       	out	0x3f, r0	; 63
    580e:	0f 90       	pop	r0
    5810:	1f 90       	pop	r1
    5812:	18 95       	reti

00005814 <fifo_init>:
    5814:	fc 01       	movw	r30, r24
    5816:	41 11       	cpse	r20, r1
    5818:	01 c0       	rjmp	.+2      	; 0x581c <fifo_init+0x8>
    581a:	6c d3       	rcall	.+1752   	; 0x5ef4 <abort>
    581c:	84 2f       	mov	r24, r20
    581e:	90 e0       	ldi	r25, 0x00	; 0
    5820:	9c 01       	movw	r18, r24
    5822:	21 50       	subi	r18, 0x01	; 1
    5824:	31 09       	sbc	r19, r1
    5826:	82 23       	and	r24, r18
    5828:	93 23       	and	r25, r19
    582a:	89 2b       	or	r24, r25
    582c:	09 f0       	breq	.+2      	; 0x5830 <fifo_init+0x1c>
    582e:	62 d3       	rcall	.+1732   	; 0x5ef4 <abort>
    5830:	41 38       	cpi	r20, 0x81	; 129
    5832:	08 f0       	brcs	.+2      	; 0x5836 <fifo_init+0x22>
    5834:	5f d3       	rcall	.+1726   	; 0x5ef4 <abort>
    5836:	12 82       	std	Z+2, r1	; 0x02
    5838:	13 82       	std	Z+3, r1	; 0x03
    583a:	44 83       	std	Z+4, r20	; 0x04
    583c:	44 0f       	add	r20, r20
    583e:	41 50       	subi	r20, 0x01	; 1
    5840:	45 83       	std	Z+5, r20	; 0x05
    5842:	71 83       	std	Z+1, r23	; 0x01
    5844:	60 83       	st	Z, r22
    5846:	80 e0       	ldi	r24, 0x00	; 0
    5848:	90 e0       	ldi	r25, 0x00	; 0
    584a:	08 95       	ret

0000584c <__subsf3>:
    584c:	50 58       	subi	r21, 0x80	; 128

0000584e <__addsf3>:
    584e:	bb 27       	eor	r27, r27
    5850:	aa 27       	eor	r26, r26
    5852:	0e d0       	rcall	.+28     	; 0x5870 <__addsf3x>
    5854:	4d c1       	rjmp	.+666    	; 0x5af0 <__fp_round>
    5856:	3e d1       	rcall	.+636    	; 0x5ad4 <__fp_pscA>
    5858:	30 f0       	brcs	.+12     	; 0x5866 <__addsf3+0x18>
    585a:	43 d1       	rcall	.+646    	; 0x5ae2 <__fp_pscB>
    585c:	20 f0       	brcs	.+8      	; 0x5866 <__addsf3+0x18>
    585e:	31 f4       	brne	.+12     	; 0x586c <__addsf3+0x1e>
    5860:	9f 3f       	cpi	r25, 0xFF	; 255
    5862:	11 f4       	brne	.+4      	; 0x5868 <__addsf3+0x1a>
    5864:	1e f4       	brtc	.+6      	; 0x586c <__addsf3+0x1e>
    5866:	33 c1       	rjmp	.+614    	; 0x5ace <__fp_nan>
    5868:	0e f4       	brtc	.+2      	; 0x586c <__addsf3+0x1e>
    586a:	e0 95       	com	r30
    586c:	e7 fb       	bst	r30, 7
    586e:	29 c1       	rjmp	.+594    	; 0x5ac2 <__fp_inf>

00005870 <__addsf3x>:
    5870:	e9 2f       	mov	r30, r25
    5872:	4f d1       	rcall	.+670    	; 0x5b12 <__fp_split3>
    5874:	80 f3       	brcs	.-32     	; 0x5856 <__addsf3+0x8>
    5876:	ba 17       	cp	r27, r26
    5878:	62 07       	cpc	r22, r18
    587a:	73 07       	cpc	r23, r19
    587c:	84 07       	cpc	r24, r20
    587e:	95 07       	cpc	r25, r21
    5880:	18 f0       	brcs	.+6      	; 0x5888 <__addsf3x+0x18>
    5882:	71 f4       	brne	.+28     	; 0x58a0 <__addsf3x+0x30>
    5884:	9e f5       	brtc	.+102    	; 0x58ec <__addsf3x+0x7c>
    5886:	67 c1       	rjmp	.+718    	; 0x5b56 <__fp_zero>
    5888:	0e f4       	brtc	.+2      	; 0x588c <__addsf3x+0x1c>
    588a:	e0 95       	com	r30
    588c:	0b 2e       	mov	r0, r27
    588e:	ba 2f       	mov	r27, r26
    5890:	a0 2d       	mov	r26, r0
    5892:	0b 01       	movw	r0, r22
    5894:	b9 01       	movw	r22, r18
    5896:	90 01       	movw	r18, r0
    5898:	0c 01       	movw	r0, r24
    589a:	ca 01       	movw	r24, r20
    589c:	a0 01       	movw	r20, r0
    589e:	11 24       	eor	r1, r1
    58a0:	ff 27       	eor	r31, r31
    58a2:	59 1b       	sub	r21, r25
    58a4:	99 f0       	breq	.+38     	; 0x58cc <__addsf3x+0x5c>
    58a6:	59 3f       	cpi	r21, 0xF9	; 249
    58a8:	50 f4       	brcc	.+20     	; 0x58be <__addsf3x+0x4e>
    58aa:	50 3e       	cpi	r21, 0xE0	; 224
    58ac:	68 f1       	brcs	.+90     	; 0x5908 <__addsf3x+0x98>
    58ae:	1a 16       	cp	r1, r26
    58b0:	f0 40       	sbci	r31, 0x00	; 0
    58b2:	a2 2f       	mov	r26, r18
    58b4:	23 2f       	mov	r18, r19
    58b6:	34 2f       	mov	r19, r20
    58b8:	44 27       	eor	r20, r20
    58ba:	58 5f       	subi	r21, 0xF8	; 248
    58bc:	f3 cf       	rjmp	.-26     	; 0x58a4 <__addsf3x+0x34>
    58be:	46 95       	lsr	r20
    58c0:	37 95       	ror	r19
    58c2:	27 95       	ror	r18
    58c4:	a7 95       	ror	r26
    58c6:	f0 40       	sbci	r31, 0x00	; 0
    58c8:	53 95       	inc	r21
    58ca:	c9 f7       	brne	.-14     	; 0x58be <__addsf3x+0x4e>
    58cc:	7e f4       	brtc	.+30     	; 0x58ec <__addsf3x+0x7c>
    58ce:	1f 16       	cp	r1, r31
    58d0:	ba 0b       	sbc	r27, r26
    58d2:	62 0b       	sbc	r22, r18
    58d4:	73 0b       	sbc	r23, r19
    58d6:	84 0b       	sbc	r24, r20
    58d8:	ba f0       	brmi	.+46     	; 0x5908 <__addsf3x+0x98>
    58da:	91 50       	subi	r25, 0x01	; 1
    58dc:	a1 f0       	breq	.+40     	; 0x5906 <__addsf3x+0x96>
    58de:	ff 0f       	add	r31, r31
    58e0:	bb 1f       	adc	r27, r27
    58e2:	66 1f       	adc	r22, r22
    58e4:	77 1f       	adc	r23, r23
    58e6:	88 1f       	adc	r24, r24
    58e8:	c2 f7       	brpl	.-16     	; 0x58da <__addsf3x+0x6a>
    58ea:	0e c0       	rjmp	.+28     	; 0x5908 <__addsf3x+0x98>
    58ec:	ba 0f       	add	r27, r26
    58ee:	62 1f       	adc	r22, r18
    58f0:	73 1f       	adc	r23, r19
    58f2:	84 1f       	adc	r24, r20
    58f4:	48 f4       	brcc	.+18     	; 0x5908 <__addsf3x+0x98>
    58f6:	87 95       	ror	r24
    58f8:	77 95       	ror	r23
    58fa:	67 95       	ror	r22
    58fc:	b7 95       	ror	r27
    58fe:	f7 95       	ror	r31
    5900:	9e 3f       	cpi	r25, 0xFE	; 254
    5902:	08 f0       	brcs	.+2      	; 0x5906 <__addsf3x+0x96>
    5904:	b3 cf       	rjmp	.-154    	; 0x586c <__addsf3+0x1e>
    5906:	93 95       	inc	r25
    5908:	88 0f       	add	r24, r24
    590a:	08 f0       	brcs	.+2      	; 0x590e <__addsf3x+0x9e>
    590c:	99 27       	eor	r25, r25
    590e:	ee 0f       	add	r30, r30
    5910:	97 95       	ror	r25
    5912:	87 95       	ror	r24
    5914:	08 95       	ret

00005916 <__divsf3>:
    5916:	0c d0       	rcall	.+24     	; 0x5930 <__divsf3x>
    5918:	eb c0       	rjmp	.+470    	; 0x5af0 <__fp_round>
    591a:	e3 d0       	rcall	.+454    	; 0x5ae2 <__fp_pscB>
    591c:	40 f0       	brcs	.+16     	; 0x592e <__divsf3+0x18>
    591e:	da d0       	rcall	.+436    	; 0x5ad4 <__fp_pscA>
    5920:	30 f0       	brcs	.+12     	; 0x592e <__divsf3+0x18>
    5922:	21 f4       	brne	.+8      	; 0x592c <__divsf3+0x16>
    5924:	5f 3f       	cpi	r21, 0xFF	; 255
    5926:	19 f0       	breq	.+6      	; 0x592e <__divsf3+0x18>
    5928:	cc c0       	rjmp	.+408    	; 0x5ac2 <__fp_inf>
    592a:	51 11       	cpse	r21, r1
    592c:	15 c1       	rjmp	.+554    	; 0x5b58 <__fp_szero>
    592e:	cf c0       	rjmp	.+414    	; 0x5ace <__fp_nan>

00005930 <__divsf3x>:
    5930:	f0 d0       	rcall	.+480    	; 0x5b12 <__fp_split3>
    5932:	98 f3       	brcs	.-26     	; 0x591a <__divsf3+0x4>

00005934 <__divsf3_pse>:
    5934:	99 23       	and	r25, r25
    5936:	c9 f3       	breq	.-14     	; 0x592a <__divsf3+0x14>
    5938:	55 23       	and	r21, r21
    593a:	b1 f3       	breq	.-20     	; 0x5928 <__divsf3+0x12>
    593c:	95 1b       	sub	r25, r21
    593e:	55 0b       	sbc	r21, r21
    5940:	bb 27       	eor	r27, r27
    5942:	aa 27       	eor	r26, r26
    5944:	62 17       	cp	r22, r18
    5946:	73 07       	cpc	r23, r19
    5948:	84 07       	cpc	r24, r20
    594a:	38 f0       	brcs	.+14     	; 0x595a <__divsf3_pse+0x26>
    594c:	9f 5f       	subi	r25, 0xFF	; 255
    594e:	5f 4f       	sbci	r21, 0xFF	; 255
    5950:	22 0f       	add	r18, r18
    5952:	33 1f       	adc	r19, r19
    5954:	44 1f       	adc	r20, r20
    5956:	aa 1f       	adc	r26, r26
    5958:	a9 f3       	breq	.-22     	; 0x5944 <__divsf3_pse+0x10>
    595a:	33 d0       	rcall	.+102    	; 0x59c2 <__divsf3_pse+0x8e>
    595c:	0e 2e       	mov	r0, r30
    595e:	3a f0       	brmi	.+14     	; 0x596e <__divsf3_pse+0x3a>
    5960:	e0 e8       	ldi	r30, 0x80	; 128
    5962:	30 d0       	rcall	.+96     	; 0x59c4 <__divsf3_pse+0x90>
    5964:	91 50       	subi	r25, 0x01	; 1
    5966:	50 40       	sbci	r21, 0x00	; 0
    5968:	e6 95       	lsr	r30
    596a:	00 1c       	adc	r0, r0
    596c:	ca f7       	brpl	.-14     	; 0x5960 <__divsf3_pse+0x2c>
    596e:	29 d0       	rcall	.+82     	; 0x59c2 <__divsf3_pse+0x8e>
    5970:	fe 2f       	mov	r31, r30
    5972:	27 d0       	rcall	.+78     	; 0x59c2 <__divsf3_pse+0x8e>
    5974:	66 0f       	add	r22, r22
    5976:	77 1f       	adc	r23, r23
    5978:	88 1f       	adc	r24, r24
    597a:	bb 1f       	adc	r27, r27
    597c:	26 17       	cp	r18, r22
    597e:	37 07       	cpc	r19, r23
    5980:	48 07       	cpc	r20, r24
    5982:	ab 07       	cpc	r26, r27
    5984:	b0 e8       	ldi	r27, 0x80	; 128
    5986:	09 f0       	breq	.+2      	; 0x598a <__divsf3_pse+0x56>
    5988:	bb 0b       	sbc	r27, r27
    598a:	80 2d       	mov	r24, r0
    598c:	bf 01       	movw	r22, r30
    598e:	ff 27       	eor	r31, r31
    5990:	93 58       	subi	r25, 0x83	; 131
    5992:	5f 4f       	sbci	r21, 0xFF	; 255
    5994:	2a f0       	brmi	.+10     	; 0x59a0 <__divsf3_pse+0x6c>
    5996:	9e 3f       	cpi	r25, 0xFE	; 254
    5998:	51 05       	cpc	r21, r1
    599a:	68 f0       	brcs	.+26     	; 0x59b6 <__divsf3_pse+0x82>
    599c:	92 c0       	rjmp	.+292    	; 0x5ac2 <__fp_inf>
    599e:	dc c0       	rjmp	.+440    	; 0x5b58 <__fp_szero>
    59a0:	5f 3f       	cpi	r21, 0xFF	; 255
    59a2:	ec f3       	brlt	.-6      	; 0x599e <__divsf3_pse+0x6a>
    59a4:	98 3e       	cpi	r25, 0xE8	; 232
    59a6:	dc f3       	brlt	.-10     	; 0x599e <__divsf3_pse+0x6a>
    59a8:	86 95       	lsr	r24
    59aa:	77 95       	ror	r23
    59ac:	67 95       	ror	r22
    59ae:	b7 95       	ror	r27
    59b0:	f7 95       	ror	r31
    59b2:	9f 5f       	subi	r25, 0xFF	; 255
    59b4:	c9 f7       	brne	.-14     	; 0x59a8 <__divsf3_pse+0x74>
    59b6:	88 0f       	add	r24, r24
    59b8:	91 1d       	adc	r25, r1
    59ba:	96 95       	lsr	r25
    59bc:	87 95       	ror	r24
    59be:	97 f9       	bld	r25, 7
    59c0:	08 95       	ret
    59c2:	e1 e0       	ldi	r30, 0x01	; 1
    59c4:	66 0f       	add	r22, r22
    59c6:	77 1f       	adc	r23, r23
    59c8:	88 1f       	adc	r24, r24
    59ca:	bb 1f       	adc	r27, r27
    59cc:	62 17       	cp	r22, r18
    59ce:	73 07       	cpc	r23, r19
    59d0:	84 07       	cpc	r24, r20
    59d2:	ba 07       	cpc	r27, r26
    59d4:	20 f0       	brcs	.+8      	; 0x59de <__divsf3_pse+0xaa>
    59d6:	62 1b       	sub	r22, r18
    59d8:	73 0b       	sbc	r23, r19
    59da:	84 0b       	sbc	r24, r20
    59dc:	ba 0b       	sbc	r27, r26
    59de:	ee 1f       	adc	r30, r30
    59e0:	88 f7       	brcc	.-30     	; 0x59c4 <__divsf3_pse+0x90>
    59e2:	e0 95       	com	r30
    59e4:	08 95       	ret

000059e6 <__fixsfsi>:
    59e6:	04 d0       	rcall	.+8      	; 0x59f0 <__fixunssfsi>
    59e8:	68 94       	set
    59ea:	b1 11       	cpse	r27, r1
    59ec:	b5 c0       	rjmp	.+362    	; 0x5b58 <__fp_szero>
    59ee:	08 95       	ret

000059f0 <__fixunssfsi>:
    59f0:	98 d0       	rcall	.+304    	; 0x5b22 <__fp_splitA>
    59f2:	88 f0       	brcs	.+34     	; 0x5a16 <__fixunssfsi+0x26>
    59f4:	9f 57       	subi	r25, 0x7F	; 127
    59f6:	90 f0       	brcs	.+36     	; 0x5a1c <__fixunssfsi+0x2c>
    59f8:	b9 2f       	mov	r27, r25
    59fa:	99 27       	eor	r25, r25
    59fc:	b7 51       	subi	r27, 0x17	; 23
    59fe:	a0 f0       	brcs	.+40     	; 0x5a28 <__fixunssfsi+0x38>
    5a00:	d1 f0       	breq	.+52     	; 0x5a36 <__fixunssfsi+0x46>
    5a02:	66 0f       	add	r22, r22
    5a04:	77 1f       	adc	r23, r23
    5a06:	88 1f       	adc	r24, r24
    5a08:	99 1f       	adc	r25, r25
    5a0a:	1a f0       	brmi	.+6      	; 0x5a12 <__fixunssfsi+0x22>
    5a0c:	ba 95       	dec	r27
    5a0e:	c9 f7       	brne	.-14     	; 0x5a02 <__fixunssfsi+0x12>
    5a10:	12 c0       	rjmp	.+36     	; 0x5a36 <__fixunssfsi+0x46>
    5a12:	b1 30       	cpi	r27, 0x01	; 1
    5a14:	81 f0       	breq	.+32     	; 0x5a36 <__fixunssfsi+0x46>
    5a16:	9f d0       	rcall	.+318    	; 0x5b56 <__fp_zero>
    5a18:	b1 e0       	ldi	r27, 0x01	; 1
    5a1a:	08 95       	ret
    5a1c:	9c c0       	rjmp	.+312    	; 0x5b56 <__fp_zero>
    5a1e:	67 2f       	mov	r22, r23
    5a20:	78 2f       	mov	r23, r24
    5a22:	88 27       	eor	r24, r24
    5a24:	b8 5f       	subi	r27, 0xF8	; 248
    5a26:	39 f0       	breq	.+14     	; 0x5a36 <__fixunssfsi+0x46>
    5a28:	b9 3f       	cpi	r27, 0xF9	; 249
    5a2a:	cc f3       	brlt	.-14     	; 0x5a1e <__fixunssfsi+0x2e>
    5a2c:	86 95       	lsr	r24
    5a2e:	77 95       	ror	r23
    5a30:	67 95       	ror	r22
    5a32:	b3 95       	inc	r27
    5a34:	d9 f7       	brne	.-10     	; 0x5a2c <__fixunssfsi+0x3c>
    5a36:	3e f4       	brtc	.+14     	; 0x5a46 <__fixunssfsi+0x56>
    5a38:	90 95       	com	r25
    5a3a:	80 95       	com	r24
    5a3c:	70 95       	com	r23
    5a3e:	61 95       	neg	r22
    5a40:	7f 4f       	sbci	r23, 0xFF	; 255
    5a42:	8f 4f       	sbci	r24, 0xFF	; 255
    5a44:	9f 4f       	sbci	r25, 0xFF	; 255
    5a46:	08 95       	ret

00005a48 <__floatunsisf>:
    5a48:	e8 94       	clt
    5a4a:	09 c0       	rjmp	.+18     	; 0x5a5e <__floatsisf+0x12>

00005a4c <__floatsisf>:
    5a4c:	97 fb       	bst	r25, 7
    5a4e:	3e f4       	brtc	.+14     	; 0x5a5e <__floatsisf+0x12>
    5a50:	90 95       	com	r25
    5a52:	80 95       	com	r24
    5a54:	70 95       	com	r23
    5a56:	61 95       	neg	r22
    5a58:	7f 4f       	sbci	r23, 0xFF	; 255
    5a5a:	8f 4f       	sbci	r24, 0xFF	; 255
    5a5c:	9f 4f       	sbci	r25, 0xFF	; 255
    5a5e:	99 23       	and	r25, r25
    5a60:	a9 f0       	breq	.+42     	; 0x5a8c <__floatsisf+0x40>
    5a62:	f9 2f       	mov	r31, r25
    5a64:	96 e9       	ldi	r25, 0x96	; 150
    5a66:	bb 27       	eor	r27, r27
    5a68:	93 95       	inc	r25
    5a6a:	f6 95       	lsr	r31
    5a6c:	87 95       	ror	r24
    5a6e:	77 95       	ror	r23
    5a70:	67 95       	ror	r22
    5a72:	b7 95       	ror	r27
    5a74:	f1 11       	cpse	r31, r1
    5a76:	f8 cf       	rjmp	.-16     	; 0x5a68 <__floatsisf+0x1c>
    5a78:	fa f4       	brpl	.+62     	; 0x5ab8 <__floatsisf+0x6c>
    5a7a:	bb 0f       	add	r27, r27
    5a7c:	11 f4       	brne	.+4      	; 0x5a82 <__floatsisf+0x36>
    5a7e:	60 ff       	sbrs	r22, 0
    5a80:	1b c0       	rjmp	.+54     	; 0x5ab8 <__floatsisf+0x6c>
    5a82:	6f 5f       	subi	r22, 0xFF	; 255
    5a84:	7f 4f       	sbci	r23, 0xFF	; 255
    5a86:	8f 4f       	sbci	r24, 0xFF	; 255
    5a88:	9f 4f       	sbci	r25, 0xFF	; 255
    5a8a:	16 c0       	rjmp	.+44     	; 0x5ab8 <__floatsisf+0x6c>
    5a8c:	88 23       	and	r24, r24
    5a8e:	11 f0       	breq	.+4      	; 0x5a94 <__floatsisf+0x48>
    5a90:	96 e9       	ldi	r25, 0x96	; 150
    5a92:	11 c0       	rjmp	.+34     	; 0x5ab6 <__floatsisf+0x6a>
    5a94:	77 23       	and	r23, r23
    5a96:	21 f0       	breq	.+8      	; 0x5aa0 <__floatsisf+0x54>
    5a98:	9e e8       	ldi	r25, 0x8E	; 142
    5a9a:	87 2f       	mov	r24, r23
    5a9c:	76 2f       	mov	r23, r22
    5a9e:	05 c0       	rjmp	.+10     	; 0x5aaa <__floatsisf+0x5e>
    5aa0:	66 23       	and	r22, r22
    5aa2:	71 f0       	breq	.+28     	; 0x5ac0 <__floatsisf+0x74>
    5aa4:	96 e8       	ldi	r25, 0x86	; 134
    5aa6:	86 2f       	mov	r24, r22
    5aa8:	70 e0       	ldi	r23, 0x00	; 0
    5aaa:	60 e0       	ldi	r22, 0x00	; 0
    5aac:	2a f0       	brmi	.+10     	; 0x5ab8 <__floatsisf+0x6c>
    5aae:	9a 95       	dec	r25
    5ab0:	66 0f       	add	r22, r22
    5ab2:	77 1f       	adc	r23, r23
    5ab4:	88 1f       	adc	r24, r24
    5ab6:	da f7       	brpl	.-10     	; 0x5aae <__floatsisf+0x62>
    5ab8:	88 0f       	add	r24, r24
    5aba:	96 95       	lsr	r25
    5abc:	87 95       	ror	r24
    5abe:	97 f9       	bld	r25, 7
    5ac0:	08 95       	ret

00005ac2 <__fp_inf>:
    5ac2:	97 f9       	bld	r25, 7
    5ac4:	9f 67       	ori	r25, 0x7F	; 127
    5ac6:	80 e8       	ldi	r24, 0x80	; 128
    5ac8:	70 e0       	ldi	r23, 0x00	; 0
    5aca:	60 e0       	ldi	r22, 0x00	; 0
    5acc:	08 95       	ret

00005ace <__fp_nan>:
    5ace:	9f ef       	ldi	r25, 0xFF	; 255
    5ad0:	80 ec       	ldi	r24, 0xC0	; 192
    5ad2:	08 95       	ret

00005ad4 <__fp_pscA>:
    5ad4:	00 24       	eor	r0, r0
    5ad6:	0a 94       	dec	r0
    5ad8:	16 16       	cp	r1, r22
    5ada:	17 06       	cpc	r1, r23
    5adc:	18 06       	cpc	r1, r24
    5ade:	09 06       	cpc	r0, r25
    5ae0:	08 95       	ret

00005ae2 <__fp_pscB>:
    5ae2:	00 24       	eor	r0, r0
    5ae4:	0a 94       	dec	r0
    5ae6:	12 16       	cp	r1, r18
    5ae8:	13 06       	cpc	r1, r19
    5aea:	14 06       	cpc	r1, r20
    5aec:	05 06       	cpc	r0, r21
    5aee:	08 95       	ret

00005af0 <__fp_round>:
    5af0:	09 2e       	mov	r0, r25
    5af2:	03 94       	inc	r0
    5af4:	00 0c       	add	r0, r0
    5af6:	11 f4       	brne	.+4      	; 0x5afc <__fp_round+0xc>
    5af8:	88 23       	and	r24, r24
    5afa:	52 f0       	brmi	.+20     	; 0x5b10 <__fp_round+0x20>
    5afc:	bb 0f       	add	r27, r27
    5afe:	40 f4       	brcc	.+16     	; 0x5b10 <__fp_round+0x20>
    5b00:	bf 2b       	or	r27, r31
    5b02:	11 f4       	brne	.+4      	; 0x5b08 <__fp_round+0x18>
    5b04:	60 ff       	sbrs	r22, 0
    5b06:	04 c0       	rjmp	.+8      	; 0x5b10 <__fp_round+0x20>
    5b08:	6f 5f       	subi	r22, 0xFF	; 255
    5b0a:	7f 4f       	sbci	r23, 0xFF	; 255
    5b0c:	8f 4f       	sbci	r24, 0xFF	; 255
    5b0e:	9f 4f       	sbci	r25, 0xFF	; 255
    5b10:	08 95       	ret

00005b12 <__fp_split3>:
    5b12:	57 fd       	sbrc	r21, 7
    5b14:	90 58       	subi	r25, 0x80	; 128
    5b16:	44 0f       	add	r20, r20
    5b18:	55 1f       	adc	r21, r21
    5b1a:	59 f0       	breq	.+22     	; 0x5b32 <__fp_splitA+0x10>
    5b1c:	5f 3f       	cpi	r21, 0xFF	; 255
    5b1e:	71 f0       	breq	.+28     	; 0x5b3c <__fp_splitA+0x1a>
    5b20:	47 95       	ror	r20

00005b22 <__fp_splitA>:
    5b22:	88 0f       	add	r24, r24
    5b24:	97 fb       	bst	r25, 7
    5b26:	99 1f       	adc	r25, r25
    5b28:	61 f0       	breq	.+24     	; 0x5b42 <__fp_splitA+0x20>
    5b2a:	9f 3f       	cpi	r25, 0xFF	; 255
    5b2c:	79 f0       	breq	.+30     	; 0x5b4c <__fp_splitA+0x2a>
    5b2e:	87 95       	ror	r24
    5b30:	08 95       	ret
    5b32:	12 16       	cp	r1, r18
    5b34:	13 06       	cpc	r1, r19
    5b36:	14 06       	cpc	r1, r20
    5b38:	55 1f       	adc	r21, r21
    5b3a:	f2 cf       	rjmp	.-28     	; 0x5b20 <__fp_split3+0xe>
    5b3c:	46 95       	lsr	r20
    5b3e:	f1 df       	rcall	.-30     	; 0x5b22 <__fp_splitA>
    5b40:	08 c0       	rjmp	.+16     	; 0x5b52 <__fp_splitA+0x30>
    5b42:	16 16       	cp	r1, r22
    5b44:	17 06       	cpc	r1, r23
    5b46:	18 06       	cpc	r1, r24
    5b48:	99 1f       	adc	r25, r25
    5b4a:	f1 cf       	rjmp	.-30     	; 0x5b2e <__fp_splitA+0xc>
    5b4c:	86 95       	lsr	r24
    5b4e:	71 05       	cpc	r23, r1
    5b50:	61 05       	cpc	r22, r1
    5b52:	08 94       	sec
    5b54:	08 95       	ret

00005b56 <__fp_zero>:
    5b56:	e8 94       	clt

00005b58 <__fp_szero>:
    5b58:	bb 27       	eor	r27, r27
    5b5a:	66 27       	eor	r22, r22
    5b5c:	77 27       	eor	r23, r23
    5b5e:	cb 01       	movw	r24, r22
    5b60:	97 f9       	bld	r25, 7
    5b62:	08 95       	ret

00005b64 <__mulsf3>:
    5b64:	0b d0       	rcall	.+22     	; 0x5b7c <__mulsf3x>
    5b66:	c4 cf       	rjmp	.-120    	; 0x5af0 <__fp_round>
    5b68:	b5 df       	rcall	.-150    	; 0x5ad4 <__fp_pscA>
    5b6a:	28 f0       	brcs	.+10     	; 0x5b76 <__mulsf3+0x12>
    5b6c:	ba df       	rcall	.-140    	; 0x5ae2 <__fp_pscB>
    5b6e:	18 f0       	brcs	.+6      	; 0x5b76 <__mulsf3+0x12>
    5b70:	95 23       	and	r25, r21
    5b72:	09 f0       	breq	.+2      	; 0x5b76 <__mulsf3+0x12>
    5b74:	a6 cf       	rjmp	.-180    	; 0x5ac2 <__fp_inf>
    5b76:	ab cf       	rjmp	.-170    	; 0x5ace <__fp_nan>
    5b78:	11 24       	eor	r1, r1
    5b7a:	ee cf       	rjmp	.-36     	; 0x5b58 <__fp_szero>

00005b7c <__mulsf3x>:
    5b7c:	ca df       	rcall	.-108    	; 0x5b12 <__fp_split3>
    5b7e:	a0 f3       	brcs	.-24     	; 0x5b68 <__mulsf3+0x4>

00005b80 <__mulsf3_pse>:
    5b80:	95 9f       	mul	r25, r21
    5b82:	d1 f3       	breq	.-12     	; 0x5b78 <__mulsf3+0x14>
    5b84:	95 0f       	add	r25, r21
    5b86:	50 e0       	ldi	r21, 0x00	; 0
    5b88:	55 1f       	adc	r21, r21
    5b8a:	62 9f       	mul	r22, r18
    5b8c:	f0 01       	movw	r30, r0
    5b8e:	72 9f       	mul	r23, r18
    5b90:	bb 27       	eor	r27, r27
    5b92:	f0 0d       	add	r31, r0
    5b94:	b1 1d       	adc	r27, r1
    5b96:	63 9f       	mul	r22, r19
    5b98:	aa 27       	eor	r26, r26
    5b9a:	f0 0d       	add	r31, r0
    5b9c:	b1 1d       	adc	r27, r1
    5b9e:	aa 1f       	adc	r26, r26
    5ba0:	64 9f       	mul	r22, r20
    5ba2:	66 27       	eor	r22, r22
    5ba4:	b0 0d       	add	r27, r0
    5ba6:	a1 1d       	adc	r26, r1
    5ba8:	66 1f       	adc	r22, r22
    5baa:	82 9f       	mul	r24, r18
    5bac:	22 27       	eor	r18, r18
    5bae:	b0 0d       	add	r27, r0
    5bb0:	a1 1d       	adc	r26, r1
    5bb2:	62 1f       	adc	r22, r18
    5bb4:	73 9f       	mul	r23, r19
    5bb6:	b0 0d       	add	r27, r0
    5bb8:	a1 1d       	adc	r26, r1
    5bba:	62 1f       	adc	r22, r18
    5bbc:	83 9f       	mul	r24, r19
    5bbe:	a0 0d       	add	r26, r0
    5bc0:	61 1d       	adc	r22, r1
    5bc2:	22 1f       	adc	r18, r18
    5bc4:	74 9f       	mul	r23, r20
    5bc6:	33 27       	eor	r19, r19
    5bc8:	a0 0d       	add	r26, r0
    5bca:	61 1d       	adc	r22, r1
    5bcc:	23 1f       	adc	r18, r19
    5bce:	84 9f       	mul	r24, r20
    5bd0:	60 0d       	add	r22, r0
    5bd2:	21 1d       	adc	r18, r1
    5bd4:	82 2f       	mov	r24, r18
    5bd6:	76 2f       	mov	r23, r22
    5bd8:	6a 2f       	mov	r22, r26
    5bda:	11 24       	eor	r1, r1
    5bdc:	9f 57       	subi	r25, 0x7F	; 127
    5bde:	50 40       	sbci	r21, 0x00	; 0
    5be0:	8a f0       	brmi	.+34     	; 0x5c04 <__mulsf3_pse+0x84>
    5be2:	e1 f0       	breq	.+56     	; 0x5c1c <__mulsf3_pse+0x9c>
    5be4:	88 23       	and	r24, r24
    5be6:	4a f0       	brmi	.+18     	; 0x5bfa <__mulsf3_pse+0x7a>
    5be8:	ee 0f       	add	r30, r30
    5bea:	ff 1f       	adc	r31, r31
    5bec:	bb 1f       	adc	r27, r27
    5bee:	66 1f       	adc	r22, r22
    5bf0:	77 1f       	adc	r23, r23
    5bf2:	88 1f       	adc	r24, r24
    5bf4:	91 50       	subi	r25, 0x01	; 1
    5bf6:	50 40       	sbci	r21, 0x00	; 0
    5bf8:	a9 f7       	brne	.-22     	; 0x5be4 <__mulsf3_pse+0x64>
    5bfa:	9e 3f       	cpi	r25, 0xFE	; 254
    5bfc:	51 05       	cpc	r21, r1
    5bfe:	70 f0       	brcs	.+28     	; 0x5c1c <__mulsf3_pse+0x9c>
    5c00:	60 cf       	rjmp	.-320    	; 0x5ac2 <__fp_inf>
    5c02:	aa cf       	rjmp	.-172    	; 0x5b58 <__fp_szero>
    5c04:	5f 3f       	cpi	r21, 0xFF	; 255
    5c06:	ec f3       	brlt	.-6      	; 0x5c02 <__mulsf3_pse+0x82>
    5c08:	98 3e       	cpi	r25, 0xE8	; 232
    5c0a:	dc f3       	brlt	.-10     	; 0x5c02 <__mulsf3_pse+0x82>
    5c0c:	86 95       	lsr	r24
    5c0e:	77 95       	ror	r23
    5c10:	67 95       	ror	r22
    5c12:	b7 95       	ror	r27
    5c14:	f7 95       	ror	r31
    5c16:	e7 95       	ror	r30
    5c18:	9f 5f       	subi	r25, 0xFF	; 255
    5c1a:	c1 f7       	brne	.-16     	; 0x5c0c <__mulsf3_pse+0x8c>
    5c1c:	fe 2b       	or	r31, r30
    5c1e:	88 0f       	add	r24, r24
    5c20:	91 1d       	adc	r25, r1
    5c22:	96 95       	lsr	r25
    5c24:	87 95       	ror	r24
    5c26:	97 f9       	bld	r25, 7
    5c28:	08 95       	ret

00005c2a <__udivmodsi4>:
    5c2a:	a1 e2       	ldi	r26, 0x21	; 33
    5c2c:	1a 2e       	mov	r1, r26
    5c2e:	aa 1b       	sub	r26, r26
    5c30:	bb 1b       	sub	r27, r27
    5c32:	fd 01       	movw	r30, r26
    5c34:	0d c0       	rjmp	.+26     	; 0x5c50 <__udivmodsi4_ep>

00005c36 <__udivmodsi4_loop>:
    5c36:	aa 1f       	adc	r26, r26
    5c38:	bb 1f       	adc	r27, r27
    5c3a:	ee 1f       	adc	r30, r30
    5c3c:	ff 1f       	adc	r31, r31
    5c3e:	a2 17       	cp	r26, r18
    5c40:	b3 07       	cpc	r27, r19
    5c42:	e4 07       	cpc	r30, r20
    5c44:	f5 07       	cpc	r31, r21
    5c46:	20 f0       	brcs	.+8      	; 0x5c50 <__udivmodsi4_ep>
    5c48:	a2 1b       	sub	r26, r18
    5c4a:	b3 0b       	sbc	r27, r19
    5c4c:	e4 0b       	sbc	r30, r20
    5c4e:	f5 0b       	sbc	r31, r21

00005c50 <__udivmodsi4_ep>:
    5c50:	66 1f       	adc	r22, r22
    5c52:	77 1f       	adc	r23, r23
    5c54:	88 1f       	adc	r24, r24
    5c56:	99 1f       	adc	r25, r25
    5c58:	1a 94       	dec	r1
    5c5a:	69 f7       	brne	.-38     	; 0x5c36 <__udivmodsi4_loop>
    5c5c:	60 95       	com	r22
    5c5e:	70 95       	com	r23
    5c60:	80 95       	com	r24
    5c62:	90 95       	com	r25
    5c64:	9b 01       	movw	r18, r22
    5c66:	ac 01       	movw	r20, r24
    5c68:	bd 01       	movw	r22, r26
    5c6a:	cf 01       	movw	r24, r30
    5c6c:	08 95       	ret

00005c6e <__tablejump2__>:
    5c6e:	ee 0f       	add	r30, r30
    5c70:	ff 1f       	adc	r31, r31
    5c72:	88 1f       	adc	r24, r24
    5c74:	8b bf       	out	0x3b, r24	; 59
    5c76:	07 90       	elpm	r0, Z+
    5c78:	f6 91       	elpm	r31, Z
    5c7a:	e0 2d       	mov	r30, r0
    5c7c:	19 94       	eijmp

00005c7e <calloc>:
    5c7e:	0f 93       	push	r16
    5c80:	1f 93       	push	r17
    5c82:	cf 93       	push	r28
    5c84:	df 93       	push	r29
    5c86:	86 9f       	mul	r24, r22
    5c88:	80 01       	movw	r16, r0
    5c8a:	87 9f       	mul	r24, r23
    5c8c:	10 0d       	add	r17, r0
    5c8e:	96 9f       	mul	r25, r22
    5c90:	10 0d       	add	r17, r0
    5c92:	11 24       	eor	r1, r1
    5c94:	c8 01       	movw	r24, r16
    5c96:	0d d0       	rcall	.+26     	; 0x5cb2 <malloc>
    5c98:	ec 01       	movw	r28, r24
    5c9a:	00 97       	sbiw	r24, 0x00	; 0
    5c9c:	21 f0       	breq	.+8      	; 0x5ca6 <calloc+0x28>
    5c9e:	a8 01       	movw	r20, r16
    5ca0:	60 e0       	ldi	r22, 0x00	; 0
    5ca2:	70 e0       	ldi	r23, 0x00	; 0
    5ca4:	34 d1       	rcall	.+616    	; 0x5f0e <memset>
    5ca6:	ce 01       	movw	r24, r28
    5ca8:	df 91       	pop	r29
    5caa:	cf 91       	pop	r28
    5cac:	1f 91       	pop	r17
    5cae:	0f 91       	pop	r16
    5cb0:	08 95       	ret

00005cb2 <malloc>:
    5cb2:	0f 93       	push	r16
    5cb4:	1f 93       	push	r17
    5cb6:	cf 93       	push	r28
    5cb8:	df 93       	push	r29
    5cba:	82 30       	cpi	r24, 0x02	; 2
    5cbc:	91 05       	cpc	r25, r1
    5cbe:	10 f4       	brcc	.+4      	; 0x5cc4 <malloc+0x12>
    5cc0:	82 e0       	ldi	r24, 0x02	; 2
    5cc2:	90 e0       	ldi	r25, 0x00	; 0
    5cc4:	e0 91 59 18 	lds	r30, 0x1859	; 0x801859 <__flp>
    5cc8:	f0 91 5a 18 	lds	r31, 0x185A	; 0x80185a <__flp+0x1>
    5ccc:	20 e0       	ldi	r18, 0x00	; 0
    5cce:	30 e0       	ldi	r19, 0x00	; 0
    5cd0:	a0 e0       	ldi	r26, 0x00	; 0
    5cd2:	b0 e0       	ldi	r27, 0x00	; 0
    5cd4:	30 97       	sbiw	r30, 0x00	; 0
    5cd6:	19 f1       	breq	.+70     	; 0x5d1e <malloc+0x6c>
    5cd8:	40 81       	ld	r20, Z
    5cda:	51 81       	ldd	r21, Z+1	; 0x01
    5cdc:	02 81       	ldd	r16, Z+2	; 0x02
    5cde:	13 81       	ldd	r17, Z+3	; 0x03
    5ce0:	48 17       	cp	r20, r24
    5ce2:	59 07       	cpc	r21, r25
    5ce4:	c8 f0       	brcs	.+50     	; 0x5d18 <malloc+0x66>
    5ce6:	84 17       	cp	r24, r20
    5ce8:	95 07       	cpc	r25, r21
    5cea:	69 f4       	brne	.+26     	; 0x5d06 <malloc+0x54>
    5cec:	10 97       	sbiw	r26, 0x00	; 0
    5cee:	31 f0       	breq	.+12     	; 0x5cfc <malloc+0x4a>
    5cf0:	12 96       	adiw	r26, 0x02	; 2
    5cf2:	0c 93       	st	X, r16
    5cf4:	12 97       	sbiw	r26, 0x02	; 2
    5cf6:	13 96       	adiw	r26, 0x03	; 3
    5cf8:	1c 93       	st	X, r17
    5cfa:	27 c0       	rjmp	.+78     	; 0x5d4a <malloc+0x98>
    5cfc:	00 93 59 18 	sts	0x1859, r16	; 0x801859 <__flp>
    5d00:	10 93 5a 18 	sts	0x185A, r17	; 0x80185a <__flp+0x1>
    5d04:	22 c0       	rjmp	.+68     	; 0x5d4a <malloc+0x98>
    5d06:	21 15       	cp	r18, r1
    5d08:	31 05       	cpc	r19, r1
    5d0a:	19 f0       	breq	.+6      	; 0x5d12 <malloc+0x60>
    5d0c:	42 17       	cp	r20, r18
    5d0e:	53 07       	cpc	r21, r19
    5d10:	18 f4       	brcc	.+6      	; 0x5d18 <malloc+0x66>
    5d12:	9a 01       	movw	r18, r20
    5d14:	bd 01       	movw	r22, r26
    5d16:	ef 01       	movw	r28, r30
    5d18:	df 01       	movw	r26, r30
    5d1a:	f8 01       	movw	r30, r16
    5d1c:	db cf       	rjmp	.-74     	; 0x5cd4 <malloc+0x22>
    5d1e:	21 15       	cp	r18, r1
    5d20:	31 05       	cpc	r19, r1
    5d22:	f9 f0       	breq	.+62     	; 0x5d62 <malloc+0xb0>
    5d24:	28 1b       	sub	r18, r24
    5d26:	39 0b       	sbc	r19, r25
    5d28:	24 30       	cpi	r18, 0x04	; 4
    5d2a:	31 05       	cpc	r19, r1
    5d2c:	80 f4       	brcc	.+32     	; 0x5d4e <malloc+0x9c>
    5d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    5d30:	9b 81       	ldd	r25, Y+3	; 0x03
    5d32:	61 15       	cp	r22, r1
    5d34:	71 05       	cpc	r23, r1
    5d36:	21 f0       	breq	.+8      	; 0x5d40 <malloc+0x8e>
    5d38:	fb 01       	movw	r30, r22
    5d3a:	93 83       	std	Z+3, r25	; 0x03
    5d3c:	82 83       	std	Z+2, r24	; 0x02
    5d3e:	04 c0       	rjmp	.+8      	; 0x5d48 <malloc+0x96>
    5d40:	90 93 5a 18 	sts	0x185A, r25	; 0x80185a <__flp+0x1>
    5d44:	80 93 59 18 	sts	0x1859, r24	; 0x801859 <__flp>
    5d48:	fe 01       	movw	r30, r28
    5d4a:	32 96       	adiw	r30, 0x02	; 2
    5d4c:	44 c0       	rjmp	.+136    	; 0x5dd6 <malloc+0x124>
    5d4e:	fe 01       	movw	r30, r28
    5d50:	e2 0f       	add	r30, r18
    5d52:	f3 1f       	adc	r31, r19
    5d54:	81 93       	st	Z+, r24
    5d56:	91 93       	st	Z+, r25
    5d58:	22 50       	subi	r18, 0x02	; 2
    5d5a:	31 09       	sbc	r19, r1
    5d5c:	39 83       	std	Y+1, r19	; 0x01
    5d5e:	28 83       	st	Y, r18
    5d60:	3a c0       	rjmp	.+116    	; 0x5dd6 <malloc+0x124>
    5d62:	20 91 57 18 	lds	r18, 0x1857	; 0x801857 <__brkval>
    5d66:	30 91 58 18 	lds	r19, 0x1858	; 0x801858 <__brkval+0x1>
    5d6a:	23 2b       	or	r18, r19
    5d6c:	41 f4       	brne	.+16     	; 0x5d7e <malloc+0xcc>
    5d6e:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5d72:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5d76:	30 93 58 18 	sts	0x1858, r19	; 0x801858 <__brkval+0x1>
    5d7a:	20 93 57 18 	sts	0x1857, r18	; 0x801857 <__brkval>
    5d7e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    5d82:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    5d86:	21 15       	cp	r18, r1
    5d88:	31 05       	cpc	r19, r1
    5d8a:	41 f4       	brne	.+16     	; 0x5d9c <malloc+0xea>
    5d8c:	2d b7       	in	r18, 0x3d	; 61
    5d8e:	3e b7       	in	r19, 0x3e	; 62
    5d90:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    5d94:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    5d98:	24 1b       	sub	r18, r20
    5d9a:	35 0b       	sbc	r19, r21
    5d9c:	e0 91 57 18 	lds	r30, 0x1857	; 0x801857 <__brkval>
    5da0:	f0 91 58 18 	lds	r31, 0x1858	; 0x801858 <__brkval+0x1>
    5da4:	e2 17       	cp	r30, r18
    5da6:	f3 07       	cpc	r31, r19
    5da8:	a0 f4       	brcc	.+40     	; 0x5dd2 <malloc+0x120>
    5daa:	2e 1b       	sub	r18, r30
    5dac:	3f 0b       	sbc	r19, r31
    5dae:	28 17       	cp	r18, r24
    5db0:	39 07       	cpc	r19, r25
    5db2:	78 f0       	brcs	.+30     	; 0x5dd2 <malloc+0x120>
    5db4:	ac 01       	movw	r20, r24
    5db6:	4e 5f       	subi	r20, 0xFE	; 254
    5db8:	5f 4f       	sbci	r21, 0xFF	; 255
    5dba:	24 17       	cp	r18, r20
    5dbc:	35 07       	cpc	r19, r21
    5dbe:	48 f0       	brcs	.+18     	; 0x5dd2 <malloc+0x120>
    5dc0:	4e 0f       	add	r20, r30
    5dc2:	5f 1f       	adc	r21, r31
    5dc4:	50 93 58 18 	sts	0x1858, r21	; 0x801858 <__brkval+0x1>
    5dc8:	40 93 57 18 	sts	0x1857, r20	; 0x801857 <__brkval>
    5dcc:	81 93       	st	Z+, r24
    5dce:	91 93       	st	Z+, r25
    5dd0:	02 c0       	rjmp	.+4      	; 0x5dd6 <malloc+0x124>
    5dd2:	e0 e0       	ldi	r30, 0x00	; 0
    5dd4:	f0 e0       	ldi	r31, 0x00	; 0
    5dd6:	cf 01       	movw	r24, r30
    5dd8:	df 91       	pop	r29
    5dda:	cf 91       	pop	r28
    5ddc:	1f 91       	pop	r17
    5dde:	0f 91       	pop	r16
    5de0:	08 95       	ret

00005de2 <free>:
    5de2:	cf 93       	push	r28
    5de4:	df 93       	push	r29
    5de6:	00 97       	sbiw	r24, 0x00	; 0
    5de8:	09 f4       	brne	.+2      	; 0x5dec <free+0xa>
    5dea:	81 c0       	rjmp	.+258    	; 0x5eee <free+0x10c>
    5dec:	fc 01       	movw	r30, r24
    5dee:	32 97       	sbiw	r30, 0x02	; 2
    5df0:	13 82       	std	Z+3, r1	; 0x03
    5df2:	12 82       	std	Z+2, r1	; 0x02
    5df4:	a0 91 59 18 	lds	r26, 0x1859	; 0x801859 <__flp>
    5df8:	b0 91 5a 18 	lds	r27, 0x185A	; 0x80185a <__flp+0x1>
    5dfc:	10 97       	sbiw	r26, 0x00	; 0
    5dfe:	81 f4       	brne	.+32     	; 0x5e20 <free+0x3e>
    5e00:	20 81       	ld	r18, Z
    5e02:	31 81       	ldd	r19, Z+1	; 0x01
    5e04:	82 0f       	add	r24, r18
    5e06:	93 1f       	adc	r25, r19
    5e08:	20 91 57 18 	lds	r18, 0x1857	; 0x801857 <__brkval>
    5e0c:	30 91 58 18 	lds	r19, 0x1858	; 0x801858 <__brkval+0x1>
    5e10:	28 17       	cp	r18, r24
    5e12:	39 07       	cpc	r19, r25
    5e14:	51 f5       	brne	.+84     	; 0x5e6a <free+0x88>
    5e16:	f0 93 58 18 	sts	0x1858, r31	; 0x801858 <__brkval+0x1>
    5e1a:	e0 93 57 18 	sts	0x1857, r30	; 0x801857 <__brkval>
    5e1e:	67 c0       	rjmp	.+206    	; 0x5eee <free+0x10c>
    5e20:	ed 01       	movw	r28, r26
    5e22:	20 e0       	ldi	r18, 0x00	; 0
    5e24:	30 e0       	ldi	r19, 0x00	; 0
    5e26:	ce 17       	cp	r28, r30
    5e28:	df 07       	cpc	r29, r31
    5e2a:	40 f4       	brcc	.+16     	; 0x5e3c <free+0x5a>
    5e2c:	4a 81       	ldd	r20, Y+2	; 0x02
    5e2e:	5b 81       	ldd	r21, Y+3	; 0x03
    5e30:	9e 01       	movw	r18, r28
    5e32:	41 15       	cp	r20, r1
    5e34:	51 05       	cpc	r21, r1
    5e36:	f1 f0       	breq	.+60     	; 0x5e74 <free+0x92>
    5e38:	ea 01       	movw	r28, r20
    5e3a:	f5 cf       	rjmp	.-22     	; 0x5e26 <free+0x44>
    5e3c:	d3 83       	std	Z+3, r29	; 0x03
    5e3e:	c2 83       	std	Z+2, r28	; 0x02
    5e40:	40 81       	ld	r20, Z
    5e42:	51 81       	ldd	r21, Z+1	; 0x01
    5e44:	84 0f       	add	r24, r20
    5e46:	95 1f       	adc	r25, r21
    5e48:	c8 17       	cp	r28, r24
    5e4a:	d9 07       	cpc	r29, r25
    5e4c:	59 f4       	brne	.+22     	; 0x5e64 <free+0x82>
    5e4e:	88 81       	ld	r24, Y
    5e50:	99 81       	ldd	r25, Y+1	; 0x01
    5e52:	84 0f       	add	r24, r20
    5e54:	95 1f       	adc	r25, r21
    5e56:	02 96       	adiw	r24, 0x02	; 2
    5e58:	91 83       	std	Z+1, r25	; 0x01
    5e5a:	80 83       	st	Z, r24
    5e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    5e5e:	9b 81       	ldd	r25, Y+3	; 0x03
    5e60:	93 83       	std	Z+3, r25	; 0x03
    5e62:	82 83       	std	Z+2, r24	; 0x02
    5e64:	21 15       	cp	r18, r1
    5e66:	31 05       	cpc	r19, r1
    5e68:	29 f4       	brne	.+10     	; 0x5e74 <free+0x92>
    5e6a:	f0 93 5a 18 	sts	0x185A, r31	; 0x80185a <__flp+0x1>
    5e6e:	e0 93 59 18 	sts	0x1859, r30	; 0x801859 <__flp>
    5e72:	3d c0       	rjmp	.+122    	; 0x5eee <free+0x10c>
    5e74:	e9 01       	movw	r28, r18
    5e76:	fb 83       	std	Y+3, r31	; 0x03
    5e78:	ea 83       	std	Y+2, r30	; 0x02
    5e7a:	49 91       	ld	r20, Y+
    5e7c:	59 91       	ld	r21, Y+
    5e7e:	c4 0f       	add	r28, r20
    5e80:	d5 1f       	adc	r29, r21
    5e82:	ec 17       	cp	r30, r28
    5e84:	fd 07       	cpc	r31, r29
    5e86:	61 f4       	brne	.+24     	; 0x5ea0 <free+0xbe>
    5e88:	80 81       	ld	r24, Z
    5e8a:	91 81       	ldd	r25, Z+1	; 0x01
    5e8c:	84 0f       	add	r24, r20
    5e8e:	95 1f       	adc	r25, r21
    5e90:	02 96       	adiw	r24, 0x02	; 2
    5e92:	e9 01       	movw	r28, r18
    5e94:	99 83       	std	Y+1, r25	; 0x01
    5e96:	88 83       	st	Y, r24
    5e98:	82 81       	ldd	r24, Z+2	; 0x02
    5e9a:	93 81       	ldd	r25, Z+3	; 0x03
    5e9c:	9b 83       	std	Y+3, r25	; 0x03
    5e9e:	8a 83       	std	Y+2, r24	; 0x02
    5ea0:	e0 e0       	ldi	r30, 0x00	; 0
    5ea2:	f0 e0       	ldi	r31, 0x00	; 0
    5ea4:	12 96       	adiw	r26, 0x02	; 2
    5ea6:	8d 91       	ld	r24, X+
    5ea8:	9c 91       	ld	r25, X
    5eaa:	13 97       	sbiw	r26, 0x03	; 3
    5eac:	00 97       	sbiw	r24, 0x00	; 0
    5eae:	19 f0       	breq	.+6      	; 0x5eb6 <free+0xd4>
    5eb0:	fd 01       	movw	r30, r26
    5eb2:	dc 01       	movw	r26, r24
    5eb4:	f7 cf       	rjmp	.-18     	; 0x5ea4 <free+0xc2>
    5eb6:	8d 91       	ld	r24, X+
    5eb8:	9c 91       	ld	r25, X
    5eba:	11 97       	sbiw	r26, 0x01	; 1
    5ebc:	9d 01       	movw	r18, r26
    5ebe:	2e 5f       	subi	r18, 0xFE	; 254
    5ec0:	3f 4f       	sbci	r19, 0xFF	; 255
    5ec2:	82 0f       	add	r24, r18
    5ec4:	93 1f       	adc	r25, r19
    5ec6:	20 91 57 18 	lds	r18, 0x1857	; 0x801857 <__brkval>
    5eca:	30 91 58 18 	lds	r19, 0x1858	; 0x801858 <__brkval+0x1>
    5ece:	28 17       	cp	r18, r24
    5ed0:	39 07       	cpc	r19, r25
    5ed2:	69 f4       	brne	.+26     	; 0x5eee <free+0x10c>
    5ed4:	30 97       	sbiw	r30, 0x00	; 0
    5ed6:	29 f4       	brne	.+10     	; 0x5ee2 <free+0x100>
    5ed8:	10 92 5a 18 	sts	0x185A, r1	; 0x80185a <__flp+0x1>
    5edc:	10 92 59 18 	sts	0x1859, r1	; 0x801859 <__flp>
    5ee0:	02 c0       	rjmp	.+4      	; 0x5ee6 <free+0x104>
    5ee2:	13 82       	std	Z+3, r1	; 0x03
    5ee4:	12 82       	std	Z+2, r1	; 0x02
    5ee6:	b0 93 58 18 	sts	0x1858, r27	; 0x801858 <__brkval+0x1>
    5eea:	a0 93 57 18 	sts	0x1857, r26	; 0x801857 <__brkval>
    5eee:	df 91       	pop	r29
    5ef0:	cf 91       	pop	r28
    5ef2:	08 95       	ret

00005ef4 <abort>:
    5ef4:	81 e0       	ldi	r24, 0x01	; 1
    5ef6:	90 e0       	ldi	r25, 0x00	; 0
    5ef8:	f8 94       	cli
    5efa:	7d c3       	rjmp	.+1786   	; 0x65f6 <_exit>

00005efc <memcpy>:
    5efc:	fb 01       	movw	r30, r22
    5efe:	dc 01       	movw	r26, r24
    5f00:	02 c0       	rjmp	.+4      	; 0x5f06 <memcpy+0xa>
    5f02:	01 90       	ld	r0, Z+
    5f04:	0d 92       	st	X+, r0
    5f06:	41 50       	subi	r20, 0x01	; 1
    5f08:	50 40       	sbci	r21, 0x00	; 0
    5f0a:	d8 f7       	brcc	.-10     	; 0x5f02 <memcpy+0x6>
    5f0c:	08 95       	ret

00005f0e <memset>:
    5f0e:	dc 01       	movw	r26, r24
    5f10:	01 c0       	rjmp	.+2      	; 0x5f14 <memset+0x6>
    5f12:	6d 93       	st	X+, r22
    5f14:	41 50       	subi	r20, 0x01	; 1
    5f16:	50 40       	sbci	r21, 0x00	; 0
    5f18:	e0 f7       	brcc	.-8      	; 0x5f12 <memset+0x4>
    5f1a:	08 95       	ret

00005f1c <strcasestr>:
    5f1c:	fb 01       	movw	r30, r22
    5f1e:	51 91       	ld	r21, Z+
    5f20:	55 23       	and	r21, r21
    5f22:	b1 f0       	breq	.+44     	; 0x5f50 <strcasestr+0x34>
    5f24:	bf 01       	movw	r22, r30
    5f26:	dc 01       	movw	r26, r24
    5f28:	05 2e       	mov	r0, r21
    5f2a:	4d 91       	ld	r20, X+
    5f2c:	44 23       	and	r20, r20
    5f2e:	69 f0       	breq	.+26     	; 0x5f4a <strcasestr+0x2e>
    5f30:	10 d0       	rcall	.+32     	; 0x5f52 <strcasestr+0x36>
    5f32:	d9 f7       	brne	.-10     	; 0x5f2a <strcasestr+0xe>
    5f34:	cd 01       	movw	r24, r26
    5f36:	01 90       	ld	r0, Z+
    5f38:	00 20       	and	r0, r0
    5f3a:	49 f0       	breq	.+18     	; 0x5f4e <strcasestr+0x32>
    5f3c:	4d 91       	ld	r20, X+
    5f3e:	41 11       	cpse	r20, r1
    5f40:	08 d0       	rcall	.+16     	; 0x5f52 <strcasestr+0x36>
    5f42:	c9 f3       	breq	.-14     	; 0x5f36 <strcasestr+0x1a>
    5f44:	fb 01       	movw	r30, r22
    5f46:	41 11       	cpse	r20, r1
    5f48:	ee cf       	rjmp	.-36     	; 0x5f26 <strcasestr+0xa>
    5f4a:	81 e0       	ldi	r24, 0x01	; 1
    5f4c:	90 e0       	ldi	r25, 0x00	; 0
    5f4e:	01 97       	sbiw	r24, 0x01	; 1
    5f50:	08 95       	ret
    5f52:	40 25       	eor	r20, r0
    5f54:	39 f0       	breq	.+14     	; 0x5f64 <strcasestr+0x48>
    5f56:	40 32       	cpi	r20, 0x20	; 32
    5f58:	29 f4       	brne	.+10     	; 0x5f64 <strcasestr+0x48>
    5f5a:	40 29       	or	r20, r0
    5f5c:	4b 57       	subi	r20, 0x7B	; 123
    5f5e:	46 5e       	subi	r20, 0xE6	; 230
    5f60:	08 f0       	brcs	.+2      	; 0x5f64 <strcasestr+0x48>
    5f62:	18 94       	sez
    5f64:	08 95       	ret

00005f66 <strcat>:
    5f66:	fb 01       	movw	r30, r22
    5f68:	dc 01       	movw	r26, r24
    5f6a:	0d 90       	ld	r0, X+
    5f6c:	00 20       	and	r0, r0
    5f6e:	e9 f7       	brne	.-6      	; 0x5f6a <strcat+0x4>
    5f70:	11 97       	sbiw	r26, 0x01	; 1
    5f72:	01 90       	ld	r0, Z+
    5f74:	0d 92       	st	X+, r0
    5f76:	00 20       	and	r0, r0
    5f78:	e1 f7       	brne	.-8      	; 0x5f72 <strcat+0xc>
    5f7a:	08 95       	ret

00005f7c <strcpy>:
    5f7c:	fb 01       	movw	r30, r22
    5f7e:	dc 01       	movw	r26, r24
    5f80:	01 90       	ld	r0, Z+
    5f82:	0d 92       	st	X+, r0
    5f84:	00 20       	and	r0, r0
    5f86:	e1 f7       	brne	.-8      	; 0x5f80 <strcpy+0x4>
    5f88:	08 95       	ret

00005f8a <strncasecmp>:
    5f8a:	fb 01       	movw	r30, r22
    5f8c:	dc 01       	movw	r26, r24
    5f8e:	41 50       	subi	r20, 0x01	; 1
    5f90:	50 40       	sbci	r21, 0x00	; 0
    5f92:	88 f0       	brcs	.+34     	; 0x5fb6 <strncasecmp+0x2c>
    5f94:	8d 91       	ld	r24, X+
    5f96:	81 34       	cpi	r24, 0x41	; 65
    5f98:	1c f0       	brlt	.+6      	; 0x5fa0 <strncasecmp+0x16>
    5f9a:	8b 35       	cpi	r24, 0x5B	; 91
    5f9c:	0c f4       	brge	.+2      	; 0x5fa0 <strncasecmp+0x16>
    5f9e:	80 5e       	subi	r24, 0xE0	; 224
    5fa0:	61 91       	ld	r22, Z+
    5fa2:	61 34       	cpi	r22, 0x41	; 65
    5fa4:	1c f0       	brlt	.+6      	; 0x5fac <strncasecmp+0x22>
    5fa6:	6b 35       	cpi	r22, 0x5B	; 91
    5fa8:	0c f4       	brge	.+2      	; 0x5fac <strncasecmp+0x22>
    5faa:	60 5e       	subi	r22, 0xE0	; 224
    5fac:	86 1b       	sub	r24, r22
    5fae:	61 11       	cpse	r22, r1
    5fb0:	71 f3       	breq	.-36     	; 0x5f8e <strncasecmp+0x4>
    5fb2:	99 0b       	sbc	r25, r25
    5fb4:	08 95       	ret
    5fb6:	88 1b       	sub	r24, r24
    5fb8:	fc cf       	rjmp	.-8      	; 0x5fb2 <strncasecmp+0x28>

00005fba <printf>:
    5fba:	cf 93       	push	r28
    5fbc:	df 93       	push	r29
    5fbe:	cd b7       	in	r28, 0x3d	; 61
    5fc0:	de b7       	in	r29, 0x3e	; 62
    5fc2:	ae 01       	movw	r20, r28
    5fc4:	4a 5f       	subi	r20, 0xFA	; 250
    5fc6:	5f 4f       	sbci	r21, 0xFF	; 255
    5fc8:	fa 01       	movw	r30, r20
    5fca:	61 91       	ld	r22, Z+
    5fcc:	71 91       	ld	r23, Z+
    5fce:	af 01       	movw	r20, r30
    5fd0:	80 91 5d 18 	lds	r24, 0x185D	; 0x80185d <__iob+0x2>
    5fd4:	90 91 5e 18 	lds	r25, 0x185E	; 0x80185e <__iob+0x3>
    5fd8:	61 d0       	rcall	.+194    	; 0x609c <vfprintf>
    5fda:	df 91       	pop	r29
    5fdc:	cf 91       	pop	r28
    5fde:	08 95       	ret

00005fe0 <puts>:
    5fe0:	0f 93       	push	r16
    5fe2:	1f 93       	push	r17
    5fe4:	cf 93       	push	r28
    5fe6:	df 93       	push	r29
    5fe8:	e0 91 5d 18 	lds	r30, 0x185D	; 0x80185d <__iob+0x2>
    5fec:	f0 91 5e 18 	lds	r31, 0x185E	; 0x80185e <__iob+0x3>
    5ff0:	23 81       	ldd	r18, Z+3	; 0x03
    5ff2:	21 ff       	sbrs	r18, 1
    5ff4:	1b c0       	rjmp	.+54     	; 0x602c <puts+0x4c>
    5ff6:	8c 01       	movw	r16, r24
    5ff8:	d0 e0       	ldi	r29, 0x00	; 0
    5ffa:	c0 e0       	ldi	r28, 0x00	; 0
    5ffc:	f8 01       	movw	r30, r16
    5ffe:	81 91       	ld	r24, Z+
    6000:	8f 01       	movw	r16, r30
    6002:	60 91 5d 18 	lds	r22, 0x185D	; 0x80185d <__iob+0x2>
    6006:	70 91 5e 18 	lds	r23, 0x185E	; 0x80185e <__iob+0x3>
    600a:	db 01       	movw	r26, r22
    600c:	18 96       	adiw	r26, 0x08	; 8
    600e:	ed 91       	ld	r30, X+
    6010:	fc 91       	ld	r31, X
    6012:	19 97       	sbiw	r26, 0x09	; 9
    6014:	88 23       	and	r24, r24
    6016:	31 f0       	breq	.+12     	; 0x6024 <puts+0x44>
    6018:	19 95       	eicall
    601a:	89 2b       	or	r24, r25
    601c:	79 f3       	breq	.-34     	; 0x5ffc <puts+0x1c>
    601e:	df ef       	ldi	r29, 0xFF	; 255
    6020:	cf ef       	ldi	r28, 0xFF	; 255
    6022:	ec cf       	rjmp	.-40     	; 0x5ffc <puts+0x1c>
    6024:	8a e0       	ldi	r24, 0x0A	; 10
    6026:	19 95       	eicall
    6028:	89 2b       	or	r24, r25
    602a:	19 f0       	breq	.+6      	; 0x6032 <puts+0x52>
    602c:	8f ef       	ldi	r24, 0xFF	; 255
    602e:	9f ef       	ldi	r25, 0xFF	; 255
    6030:	02 c0       	rjmp	.+4      	; 0x6036 <puts+0x56>
    6032:	8d 2f       	mov	r24, r29
    6034:	9c 2f       	mov	r25, r28
    6036:	df 91       	pop	r29
    6038:	cf 91       	pop	r28
    603a:	1f 91       	pop	r17
    603c:	0f 91       	pop	r16
    603e:	08 95       	ret

00006040 <sprintf>:
    6040:	0f 93       	push	r16
    6042:	1f 93       	push	r17
    6044:	cf 93       	push	r28
    6046:	df 93       	push	r29
    6048:	cd b7       	in	r28, 0x3d	; 61
    604a:	de b7       	in	r29, 0x3e	; 62
    604c:	2e 97       	sbiw	r28, 0x0e	; 14
    604e:	0f b6       	in	r0, 0x3f	; 63
    6050:	f8 94       	cli
    6052:	de bf       	out	0x3e, r29	; 62
    6054:	0f be       	out	0x3f, r0	; 63
    6056:	cd bf       	out	0x3d, r28	; 61
    6058:	0e 89       	ldd	r16, Y+22	; 0x16
    605a:	1f 89       	ldd	r17, Y+23	; 0x17
    605c:	86 e0       	ldi	r24, 0x06	; 6
    605e:	8c 83       	std	Y+4, r24	; 0x04
    6060:	1a 83       	std	Y+2, r17	; 0x02
    6062:	09 83       	std	Y+1, r16	; 0x01
    6064:	8f ef       	ldi	r24, 0xFF	; 255
    6066:	9f e7       	ldi	r25, 0x7F	; 127
    6068:	9e 83       	std	Y+6, r25	; 0x06
    606a:	8d 83       	std	Y+5, r24	; 0x05
    606c:	ae 01       	movw	r20, r28
    606e:	46 5e       	subi	r20, 0xE6	; 230
    6070:	5f 4f       	sbci	r21, 0xFF	; 255
    6072:	68 8d       	ldd	r22, Y+24	; 0x18
    6074:	79 8d       	ldd	r23, Y+25	; 0x19
    6076:	ce 01       	movw	r24, r28
    6078:	01 96       	adiw	r24, 0x01	; 1
    607a:	10 d0       	rcall	.+32     	; 0x609c <vfprintf>
    607c:	ef 81       	ldd	r30, Y+7	; 0x07
    607e:	f8 85       	ldd	r31, Y+8	; 0x08
    6080:	e0 0f       	add	r30, r16
    6082:	f1 1f       	adc	r31, r17
    6084:	10 82       	st	Z, r1
    6086:	2e 96       	adiw	r28, 0x0e	; 14
    6088:	0f b6       	in	r0, 0x3f	; 63
    608a:	f8 94       	cli
    608c:	de bf       	out	0x3e, r29	; 62
    608e:	0f be       	out	0x3f, r0	; 63
    6090:	cd bf       	out	0x3d, r28	; 61
    6092:	df 91       	pop	r29
    6094:	cf 91       	pop	r28
    6096:	1f 91       	pop	r17
    6098:	0f 91       	pop	r16
    609a:	08 95       	ret

0000609c <vfprintf>:
    609c:	2f 92       	push	r2
    609e:	3f 92       	push	r3
    60a0:	4f 92       	push	r4
    60a2:	5f 92       	push	r5
    60a4:	6f 92       	push	r6
    60a6:	7f 92       	push	r7
    60a8:	8f 92       	push	r8
    60aa:	9f 92       	push	r9
    60ac:	af 92       	push	r10
    60ae:	bf 92       	push	r11
    60b0:	cf 92       	push	r12
    60b2:	df 92       	push	r13
    60b4:	ef 92       	push	r14
    60b6:	ff 92       	push	r15
    60b8:	0f 93       	push	r16
    60ba:	1f 93       	push	r17
    60bc:	cf 93       	push	r28
    60be:	df 93       	push	r29
    60c0:	cd b7       	in	r28, 0x3d	; 61
    60c2:	de b7       	in	r29, 0x3e	; 62
    60c4:	2b 97       	sbiw	r28, 0x0b	; 11
    60c6:	0f b6       	in	r0, 0x3f	; 63
    60c8:	f8 94       	cli
    60ca:	de bf       	out	0x3e, r29	; 62
    60cc:	0f be       	out	0x3f, r0	; 63
    60ce:	cd bf       	out	0x3d, r28	; 61
    60d0:	6c 01       	movw	r12, r24
    60d2:	7b 01       	movw	r14, r22
    60d4:	8a 01       	movw	r16, r20
    60d6:	fc 01       	movw	r30, r24
    60d8:	17 82       	std	Z+7, r1	; 0x07
    60da:	16 82       	std	Z+6, r1	; 0x06
    60dc:	83 81       	ldd	r24, Z+3	; 0x03
    60de:	81 ff       	sbrs	r24, 1
    60e0:	bf c1       	rjmp	.+894    	; 0x6460 <vfprintf+0x3c4>
    60e2:	ce 01       	movw	r24, r28
    60e4:	01 96       	adiw	r24, 0x01	; 1
    60e6:	3c 01       	movw	r6, r24
    60e8:	f6 01       	movw	r30, r12
    60ea:	93 81       	ldd	r25, Z+3	; 0x03
    60ec:	f7 01       	movw	r30, r14
    60ee:	93 fd       	sbrc	r25, 3
    60f0:	85 91       	lpm	r24, Z+
    60f2:	93 ff       	sbrs	r25, 3
    60f4:	81 91       	ld	r24, Z+
    60f6:	7f 01       	movw	r14, r30
    60f8:	88 23       	and	r24, r24
    60fa:	09 f4       	brne	.+2      	; 0x60fe <vfprintf+0x62>
    60fc:	ad c1       	rjmp	.+858    	; 0x6458 <vfprintf+0x3bc>
    60fe:	85 32       	cpi	r24, 0x25	; 37
    6100:	39 f4       	brne	.+14     	; 0x6110 <vfprintf+0x74>
    6102:	93 fd       	sbrc	r25, 3
    6104:	85 91       	lpm	r24, Z+
    6106:	93 ff       	sbrs	r25, 3
    6108:	81 91       	ld	r24, Z+
    610a:	7f 01       	movw	r14, r30
    610c:	85 32       	cpi	r24, 0x25	; 37
    610e:	21 f4       	brne	.+8      	; 0x6118 <vfprintf+0x7c>
    6110:	b6 01       	movw	r22, r12
    6112:	90 e0       	ldi	r25, 0x00	; 0
    6114:	d6 d1       	rcall	.+940    	; 0x64c2 <fputc>
    6116:	e8 cf       	rjmp	.-48     	; 0x60e8 <vfprintf+0x4c>
    6118:	91 2c       	mov	r9, r1
    611a:	21 2c       	mov	r2, r1
    611c:	31 2c       	mov	r3, r1
    611e:	ff e1       	ldi	r31, 0x1F	; 31
    6120:	f3 15       	cp	r31, r3
    6122:	d8 f0       	brcs	.+54     	; 0x615a <vfprintf+0xbe>
    6124:	8b 32       	cpi	r24, 0x2B	; 43
    6126:	79 f0       	breq	.+30     	; 0x6146 <vfprintf+0xaa>
    6128:	38 f4       	brcc	.+14     	; 0x6138 <vfprintf+0x9c>
    612a:	80 32       	cpi	r24, 0x20	; 32
    612c:	79 f0       	breq	.+30     	; 0x614c <vfprintf+0xb0>
    612e:	83 32       	cpi	r24, 0x23	; 35
    6130:	a1 f4       	brne	.+40     	; 0x615a <vfprintf+0xbe>
    6132:	23 2d       	mov	r18, r3
    6134:	20 61       	ori	r18, 0x10	; 16
    6136:	1d c0       	rjmp	.+58     	; 0x6172 <vfprintf+0xd6>
    6138:	8d 32       	cpi	r24, 0x2D	; 45
    613a:	61 f0       	breq	.+24     	; 0x6154 <vfprintf+0xb8>
    613c:	80 33       	cpi	r24, 0x30	; 48
    613e:	69 f4       	brne	.+26     	; 0x615a <vfprintf+0xbe>
    6140:	23 2d       	mov	r18, r3
    6142:	21 60       	ori	r18, 0x01	; 1
    6144:	16 c0       	rjmp	.+44     	; 0x6172 <vfprintf+0xd6>
    6146:	83 2d       	mov	r24, r3
    6148:	82 60       	ori	r24, 0x02	; 2
    614a:	38 2e       	mov	r3, r24
    614c:	e3 2d       	mov	r30, r3
    614e:	e4 60       	ori	r30, 0x04	; 4
    6150:	3e 2e       	mov	r3, r30
    6152:	2a c0       	rjmp	.+84     	; 0x61a8 <vfprintf+0x10c>
    6154:	f3 2d       	mov	r31, r3
    6156:	f8 60       	ori	r31, 0x08	; 8
    6158:	1d c0       	rjmp	.+58     	; 0x6194 <vfprintf+0xf8>
    615a:	37 fc       	sbrc	r3, 7
    615c:	2d c0       	rjmp	.+90     	; 0x61b8 <vfprintf+0x11c>
    615e:	20 ed       	ldi	r18, 0xD0	; 208
    6160:	28 0f       	add	r18, r24
    6162:	2a 30       	cpi	r18, 0x0A	; 10
    6164:	40 f0       	brcs	.+16     	; 0x6176 <vfprintf+0xda>
    6166:	8e 32       	cpi	r24, 0x2E	; 46
    6168:	b9 f4       	brne	.+46     	; 0x6198 <vfprintf+0xfc>
    616a:	36 fc       	sbrc	r3, 6
    616c:	75 c1       	rjmp	.+746    	; 0x6458 <vfprintf+0x3bc>
    616e:	23 2d       	mov	r18, r3
    6170:	20 64       	ori	r18, 0x40	; 64
    6172:	32 2e       	mov	r3, r18
    6174:	19 c0       	rjmp	.+50     	; 0x61a8 <vfprintf+0x10c>
    6176:	36 fe       	sbrs	r3, 6
    6178:	06 c0       	rjmp	.+12     	; 0x6186 <vfprintf+0xea>
    617a:	8a e0       	ldi	r24, 0x0A	; 10
    617c:	98 9e       	mul	r9, r24
    617e:	20 0d       	add	r18, r0
    6180:	11 24       	eor	r1, r1
    6182:	92 2e       	mov	r9, r18
    6184:	11 c0       	rjmp	.+34     	; 0x61a8 <vfprintf+0x10c>
    6186:	ea e0       	ldi	r30, 0x0A	; 10
    6188:	2e 9e       	mul	r2, r30
    618a:	20 0d       	add	r18, r0
    618c:	11 24       	eor	r1, r1
    618e:	22 2e       	mov	r2, r18
    6190:	f3 2d       	mov	r31, r3
    6192:	f0 62       	ori	r31, 0x20	; 32
    6194:	3f 2e       	mov	r3, r31
    6196:	08 c0       	rjmp	.+16     	; 0x61a8 <vfprintf+0x10c>
    6198:	8c 36       	cpi	r24, 0x6C	; 108
    619a:	21 f4       	brne	.+8      	; 0x61a4 <vfprintf+0x108>
    619c:	83 2d       	mov	r24, r3
    619e:	80 68       	ori	r24, 0x80	; 128
    61a0:	38 2e       	mov	r3, r24
    61a2:	02 c0       	rjmp	.+4      	; 0x61a8 <vfprintf+0x10c>
    61a4:	88 36       	cpi	r24, 0x68	; 104
    61a6:	41 f4       	brne	.+16     	; 0x61b8 <vfprintf+0x11c>
    61a8:	f7 01       	movw	r30, r14
    61aa:	93 fd       	sbrc	r25, 3
    61ac:	85 91       	lpm	r24, Z+
    61ae:	93 ff       	sbrs	r25, 3
    61b0:	81 91       	ld	r24, Z+
    61b2:	7f 01       	movw	r14, r30
    61b4:	81 11       	cpse	r24, r1
    61b6:	b3 cf       	rjmp	.-154    	; 0x611e <vfprintf+0x82>
    61b8:	98 2f       	mov	r25, r24
    61ba:	9f 7d       	andi	r25, 0xDF	; 223
    61bc:	95 54       	subi	r25, 0x45	; 69
    61be:	93 30       	cpi	r25, 0x03	; 3
    61c0:	28 f4       	brcc	.+10     	; 0x61cc <vfprintf+0x130>
    61c2:	0c 5f       	subi	r16, 0xFC	; 252
    61c4:	1f 4f       	sbci	r17, 0xFF	; 255
    61c6:	9f e3       	ldi	r25, 0x3F	; 63
    61c8:	99 83       	std	Y+1, r25	; 0x01
    61ca:	0d c0       	rjmp	.+26     	; 0x61e6 <vfprintf+0x14a>
    61cc:	83 36       	cpi	r24, 0x63	; 99
    61ce:	31 f0       	breq	.+12     	; 0x61dc <vfprintf+0x140>
    61d0:	83 37       	cpi	r24, 0x73	; 115
    61d2:	71 f0       	breq	.+28     	; 0x61f0 <vfprintf+0x154>
    61d4:	83 35       	cpi	r24, 0x53	; 83
    61d6:	09 f0       	breq	.+2      	; 0x61da <vfprintf+0x13e>
    61d8:	55 c0       	rjmp	.+170    	; 0x6284 <vfprintf+0x1e8>
    61da:	20 c0       	rjmp	.+64     	; 0x621c <vfprintf+0x180>
    61dc:	f8 01       	movw	r30, r16
    61de:	80 81       	ld	r24, Z
    61e0:	89 83       	std	Y+1, r24	; 0x01
    61e2:	0e 5f       	subi	r16, 0xFE	; 254
    61e4:	1f 4f       	sbci	r17, 0xFF	; 255
    61e6:	88 24       	eor	r8, r8
    61e8:	83 94       	inc	r8
    61ea:	91 2c       	mov	r9, r1
    61ec:	53 01       	movw	r10, r6
    61ee:	12 c0       	rjmp	.+36     	; 0x6214 <vfprintf+0x178>
    61f0:	28 01       	movw	r4, r16
    61f2:	f2 e0       	ldi	r31, 0x02	; 2
    61f4:	4f 0e       	add	r4, r31
    61f6:	51 1c       	adc	r5, r1
    61f8:	f8 01       	movw	r30, r16
    61fa:	a0 80       	ld	r10, Z
    61fc:	b1 80       	ldd	r11, Z+1	; 0x01
    61fe:	36 fe       	sbrs	r3, 6
    6200:	03 c0       	rjmp	.+6      	; 0x6208 <vfprintf+0x16c>
    6202:	69 2d       	mov	r22, r9
    6204:	70 e0       	ldi	r23, 0x00	; 0
    6206:	02 c0       	rjmp	.+4      	; 0x620c <vfprintf+0x170>
    6208:	6f ef       	ldi	r22, 0xFF	; 255
    620a:	7f ef       	ldi	r23, 0xFF	; 255
    620c:	c5 01       	movw	r24, r10
    620e:	4e d1       	rcall	.+668    	; 0x64ac <strnlen>
    6210:	4c 01       	movw	r8, r24
    6212:	82 01       	movw	r16, r4
    6214:	f3 2d       	mov	r31, r3
    6216:	ff 77       	andi	r31, 0x7F	; 127
    6218:	3f 2e       	mov	r3, r31
    621a:	15 c0       	rjmp	.+42     	; 0x6246 <vfprintf+0x1aa>
    621c:	28 01       	movw	r4, r16
    621e:	22 e0       	ldi	r18, 0x02	; 2
    6220:	42 0e       	add	r4, r18
    6222:	51 1c       	adc	r5, r1
    6224:	f8 01       	movw	r30, r16
    6226:	a0 80       	ld	r10, Z
    6228:	b1 80       	ldd	r11, Z+1	; 0x01
    622a:	36 fe       	sbrs	r3, 6
    622c:	03 c0       	rjmp	.+6      	; 0x6234 <vfprintf+0x198>
    622e:	69 2d       	mov	r22, r9
    6230:	70 e0       	ldi	r23, 0x00	; 0
    6232:	02 c0       	rjmp	.+4      	; 0x6238 <vfprintf+0x19c>
    6234:	6f ef       	ldi	r22, 0xFF	; 255
    6236:	7f ef       	ldi	r23, 0xFF	; 255
    6238:	c5 01       	movw	r24, r10
    623a:	2d d1       	rcall	.+602    	; 0x6496 <strnlen_P>
    623c:	4c 01       	movw	r8, r24
    623e:	f3 2d       	mov	r31, r3
    6240:	f0 68       	ori	r31, 0x80	; 128
    6242:	3f 2e       	mov	r3, r31
    6244:	82 01       	movw	r16, r4
    6246:	33 fc       	sbrc	r3, 3
    6248:	19 c0       	rjmp	.+50     	; 0x627c <vfprintf+0x1e0>
    624a:	82 2d       	mov	r24, r2
    624c:	90 e0       	ldi	r25, 0x00	; 0
    624e:	88 16       	cp	r8, r24
    6250:	99 06       	cpc	r9, r25
    6252:	a0 f4       	brcc	.+40     	; 0x627c <vfprintf+0x1e0>
    6254:	b6 01       	movw	r22, r12
    6256:	80 e2       	ldi	r24, 0x20	; 32
    6258:	90 e0       	ldi	r25, 0x00	; 0
    625a:	33 d1       	rcall	.+614    	; 0x64c2 <fputc>
    625c:	2a 94       	dec	r2
    625e:	f5 cf       	rjmp	.-22     	; 0x624a <vfprintf+0x1ae>
    6260:	f5 01       	movw	r30, r10
    6262:	37 fc       	sbrc	r3, 7
    6264:	85 91       	lpm	r24, Z+
    6266:	37 fe       	sbrs	r3, 7
    6268:	81 91       	ld	r24, Z+
    626a:	5f 01       	movw	r10, r30
    626c:	b6 01       	movw	r22, r12
    626e:	90 e0       	ldi	r25, 0x00	; 0
    6270:	28 d1       	rcall	.+592    	; 0x64c2 <fputc>
    6272:	21 10       	cpse	r2, r1
    6274:	2a 94       	dec	r2
    6276:	21 e0       	ldi	r18, 0x01	; 1
    6278:	82 1a       	sub	r8, r18
    627a:	91 08       	sbc	r9, r1
    627c:	81 14       	cp	r8, r1
    627e:	91 04       	cpc	r9, r1
    6280:	79 f7       	brne	.-34     	; 0x6260 <vfprintf+0x1c4>
    6282:	e1 c0       	rjmp	.+450    	; 0x6446 <vfprintf+0x3aa>
    6284:	84 36       	cpi	r24, 0x64	; 100
    6286:	11 f0       	breq	.+4      	; 0x628c <vfprintf+0x1f0>
    6288:	89 36       	cpi	r24, 0x69	; 105
    628a:	39 f5       	brne	.+78     	; 0x62da <vfprintf+0x23e>
    628c:	f8 01       	movw	r30, r16
    628e:	37 fe       	sbrs	r3, 7
    6290:	07 c0       	rjmp	.+14     	; 0x62a0 <vfprintf+0x204>
    6292:	60 81       	ld	r22, Z
    6294:	71 81       	ldd	r23, Z+1	; 0x01
    6296:	82 81       	ldd	r24, Z+2	; 0x02
    6298:	93 81       	ldd	r25, Z+3	; 0x03
    629a:	0c 5f       	subi	r16, 0xFC	; 252
    629c:	1f 4f       	sbci	r17, 0xFF	; 255
    629e:	08 c0       	rjmp	.+16     	; 0x62b0 <vfprintf+0x214>
    62a0:	60 81       	ld	r22, Z
    62a2:	71 81       	ldd	r23, Z+1	; 0x01
    62a4:	07 2e       	mov	r0, r23
    62a6:	00 0c       	add	r0, r0
    62a8:	88 0b       	sbc	r24, r24
    62aa:	99 0b       	sbc	r25, r25
    62ac:	0e 5f       	subi	r16, 0xFE	; 254
    62ae:	1f 4f       	sbci	r17, 0xFF	; 255
    62b0:	f3 2d       	mov	r31, r3
    62b2:	ff 76       	andi	r31, 0x6F	; 111
    62b4:	3f 2e       	mov	r3, r31
    62b6:	97 ff       	sbrs	r25, 7
    62b8:	09 c0       	rjmp	.+18     	; 0x62cc <vfprintf+0x230>
    62ba:	90 95       	com	r25
    62bc:	80 95       	com	r24
    62be:	70 95       	com	r23
    62c0:	61 95       	neg	r22
    62c2:	7f 4f       	sbci	r23, 0xFF	; 255
    62c4:	8f 4f       	sbci	r24, 0xFF	; 255
    62c6:	9f 4f       	sbci	r25, 0xFF	; 255
    62c8:	f0 68       	ori	r31, 0x80	; 128
    62ca:	3f 2e       	mov	r3, r31
    62cc:	2a e0       	ldi	r18, 0x0A	; 10
    62ce:	30 e0       	ldi	r19, 0x00	; 0
    62d0:	a3 01       	movw	r20, r6
    62d2:	33 d1       	rcall	.+614    	; 0x653a <__ultoa_invert>
    62d4:	88 2e       	mov	r8, r24
    62d6:	86 18       	sub	r8, r6
    62d8:	44 c0       	rjmp	.+136    	; 0x6362 <vfprintf+0x2c6>
    62da:	85 37       	cpi	r24, 0x75	; 117
    62dc:	31 f4       	brne	.+12     	; 0x62ea <vfprintf+0x24e>
    62de:	23 2d       	mov	r18, r3
    62e0:	2f 7e       	andi	r18, 0xEF	; 239
    62e2:	b2 2e       	mov	r11, r18
    62e4:	2a e0       	ldi	r18, 0x0A	; 10
    62e6:	30 e0       	ldi	r19, 0x00	; 0
    62e8:	25 c0       	rjmp	.+74     	; 0x6334 <vfprintf+0x298>
    62ea:	93 2d       	mov	r25, r3
    62ec:	99 7f       	andi	r25, 0xF9	; 249
    62ee:	b9 2e       	mov	r11, r25
    62f0:	8f 36       	cpi	r24, 0x6F	; 111
    62f2:	c1 f0       	breq	.+48     	; 0x6324 <vfprintf+0x288>
    62f4:	18 f4       	brcc	.+6      	; 0x62fc <vfprintf+0x260>
    62f6:	88 35       	cpi	r24, 0x58	; 88
    62f8:	79 f0       	breq	.+30     	; 0x6318 <vfprintf+0x27c>
    62fa:	ae c0       	rjmp	.+348    	; 0x6458 <vfprintf+0x3bc>
    62fc:	80 37       	cpi	r24, 0x70	; 112
    62fe:	19 f0       	breq	.+6      	; 0x6306 <vfprintf+0x26a>
    6300:	88 37       	cpi	r24, 0x78	; 120
    6302:	21 f0       	breq	.+8      	; 0x630c <vfprintf+0x270>
    6304:	a9 c0       	rjmp	.+338    	; 0x6458 <vfprintf+0x3bc>
    6306:	e9 2f       	mov	r30, r25
    6308:	e0 61       	ori	r30, 0x10	; 16
    630a:	be 2e       	mov	r11, r30
    630c:	b4 fe       	sbrs	r11, 4
    630e:	0d c0       	rjmp	.+26     	; 0x632a <vfprintf+0x28e>
    6310:	fb 2d       	mov	r31, r11
    6312:	f4 60       	ori	r31, 0x04	; 4
    6314:	bf 2e       	mov	r11, r31
    6316:	09 c0       	rjmp	.+18     	; 0x632a <vfprintf+0x28e>
    6318:	34 fe       	sbrs	r3, 4
    631a:	0a c0       	rjmp	.+20     	; 0x6330 <vfprintf+0x294>
    631c:	29 2f       	mov	r18, r25
    631e:	26 60       	ori	r18, 0x06	; 6
    6320:	b2 2e       	mov	r11, r18
    6322:	06 c0       	rjmp	.+12     	; 0x6330 <vfprintf+0x294>
    6324:	28 e0       	ldi	r18, 0x08	; 8
    6326:	30 e0       	ldi	r19, 0x00	; 0
    6328:	05 c0       	rjmp	.+10     	; 0x6334 <vfprintf+0x298>
    632a:	20 e1       	ldi	r18, 0x10	; 16
    632c:	30 e0       	ldi	r19, 0x00	; 0
    632e:	02 c0       	rjmp	.+4      	; 0x6334 <vfprintf+0x298>
    6330:	20 e1       	ldi	r18, 0x10	; 16
    6332:	32 e0       	ldi	r19, 0x02	; 2
    6334:	f8 01       	movw	r30, r16
    6336:	b7 fe       	sbrs	r11, 7
    6338:	07 c0       	rjmp	.+14     	; 0x6348 <vfprintf+0x2ac>
    633a:	60 81       	ld	r22, Z
    633c:	71 81       	ldd	r23, Z+1	; 0x01
    633e:	82 81       	ldd	r24, Z+2	; 0x02
    6340:	93 81       	ldd	r25, Z+3	; 0x03
    6342:	0c 5f       	subi	r16, 0xFC	; 252
    6344:	1f 4f       	sbci	r17, 0xFF	; 255
    6346:	06 c0       	rjmp	.+12     	; 0x6354 <vfprintf+0x2b8>
    6348:	60 81       	ld	r22, Z
    634a:	71 81       	ldd	r23, Z+1	; 0x01
    634c:	80 e0       	ldi	r24, 0x00	; 0
    634e:	90 e0       	ldi	r25, 0x00	; 0
    6350:	0e 5f       	subi	r16, 0xFE	; 254
    6352:	1f 4f       	sbci	r17, 0xFF	; 255
    6354:	a3 01       	movw	r20, r6
    6356:	f1 d0       	rcall	.+482    	; 0x653a <__ultoa_invert>
    6358:	88 2e       	mov	r8, r24
    635a:	86 18       	sub	r8, r6
    635c:	fb 2d       	mov	r31, r11
    635e:	ff 77       	andi	r31, 0x7F	; 127
    6360:	3f 2e       	mov	r3, r31
    6362:	36 fe       	sbrs	r3, 6
    6364:	0d c0       	rjmp	.+26     	; 0x6380 <vfprintf+0x2e4>
    6366:	23 2d       	mov	r18, r3
    6368:	2e 7f       	andi	r18, 0xFE	; 254
    636a:	a2 2e       	mov	r10, r18
    636c:	89 14       	cp	r8, r9
    636e:	58 f4       	brcc	.+22     	; 0x6386 <vfprintf+0x2ea>
    6370:	34 fe       	sbrs	r3, 4
    6372:	0b c0       	rjmp	.+22     	; 0x638a <vfprintf+0x2ee>
    6374:	32 fc       	sbrc	r3, 2
    6376:	09 c0       	rjmp	.+18     	; 0x638a <vfprintf+0x2ee>
    6378:	83 2d       	mov	r24, r3
    637a:	8e 7e       	andi	r24, 0xEE	; 238
    637c:	a8 2e       	mov	r10, r24
    637e:	05 c0       	rjmp	.+10     	; 0x638a <vfprintf+0x2ee>
    6380:	b8 2c       	mov	r11, r8
    6382:	a3 2c       	mov	r10, r3
    6384:	03 c0       	rjmp	.+6      	; 0x638c <vfprintf+0x2f0>
    6386:	b8 2c       	mov	r11, r8
    6388:	01 c0       	rjmp	.+2      	; 0x638c <vfprintf+0x2f0>
    638a:	b9 2c       	mov	r11, r9
    638c:	a4 fe       	sbrs	r10, 4
    638e:	0f c0       	rjmp	.+30     	; 0x63ae <vfprintf+0x312>
    6390:	fe 01       	movw	r30, r28
    6392:	e8 0d       	add	r30, r8
    6394:	f1 1d       	adc	r31, r1
    6396:	80 81       	ld	r24, Z
    6398:	80 33       	cpi	r24, 0x30	; 48
    639a:	21 f4       	brne	.+8      	; 0x63a4 <vfprintf+0x308>
    639c:	9a 2d       	mov	r25, r10
    639e:	99 7e       	andi	r25, 0xE9	; 233
    63a0:	a9 2e       	mov	r10, r25
    63a2:	09 c0       	rjmp	.+18     	; 0x63b6 <vfprintf+0x31a>
    63a4:	a2 fe       	sbrs	r10, 2
    63a6:	06 c0       	rjmp	.+12     	; 0x63b4 <vfprintf+0x318>
    63a8:	b3 94       	inc	r11
    63aa:	b3 94       	inc	r11
    63ac:	04 c0       	rjmp	.+8      	; 0x63b6 <vfprintf+0x31a>
    63ae:	8a 2d       	mov	r24, r10
    63b0:	86 78       	andi	r24, 0x86	; 134
    63b2:	09 f0       	breq	.+2      	; 0x63b6 <vfprintf+0x31a>
    63b4:	b3 94       	inc	r11
    63b6:	a3 fc       	sbrc	r10, 3
    63b8:	10 c0       	rjmp	.+32     	; 0x63da <vfprintf+0x33e>
    63ba:	a0 fe       	sbrs	r10, 0
    63bc:	06 c0       	rjmp	.+12     	; 0x63ca <vfprintf+0x32e>
    63be:	b2 14       	cp	r11, r2
    63c0:	80 f4       	brcc	.+32     	; 0x63e2 <vfprintf+0x346>
    63c2:	28 0c       	add	r2, r8
    63c4:	92 2c       	mov	r9, r2
    63c6:	9b 18       	sub	r9, r11
    63c8:	0d c0       	rjmp	.+26     	; 0x63e4 <vfprintf+0x348>
    63ca:	b2 14       	cp	r11, r2
    63cc:	58 f4       	brcc	.+22     	; 0x63e4 <vfprintf+0x348>
    63ce:	b6 01       	movw	r22, r12
    63d0:	80 e2       	ldi	r24, 0x20	; 32
    63d2:	90 e0       	ldi	r25, 0x00	; 0
    63d4:	76 d0       	rcall	.+236    	; 0x64c2 <fputc>
    63d6:	b3 94       	inc	r11
    63d8:	f8 cf       	rjmp	.-16     	; 0x63ca <vfprintf+0x32e>
    63da:	b2 14       	cp	r11, r2
    63dc:	18 f4       	brcc	.+6      	; 0x63e4 <vfprintf+0x348>
    63de:	2b 18       	sub	r2, r11
    63e0:	02 c0       	rjmp	.+4      	; 0x63e6 <vfprintf+0x34a>
    63e2:	98 2c       	mov	r9, r8
    63e4:	21 2c       	mov	r2, r1
    63e6:	a4 fe       	sbrs	r10, 4
    63e8:	0f c0       	rjmp	.+30     	; 0x6408 <vfprintf+0x36c>
    63ea:	b6 01       	movw	r22, r12
    63ec:	80 e3       	ldi	r24, 0x30	; 48
    63ee:	90 e0       	ldi	r25, 0x00	; 0
    63f0:	68 d0       	rcall	.+208    	; 0x64c2 <fputc>
    63f2:	a2 fe       	sbrs	r10, 2
    63f4:	16 c0       	rjmp	.+44     	; 0x6422 <vfprintf+0x386>
    63f6:	a1 fc       	sbrc	r10, 1
    63f8:	03 c0       	rjmp	.+6      	; 0x6400 <vfprintf+0x364>
    63fa:	88 e7       	ldi	r24, 0x78	; 120
    63fc:	90 e0       	ldi	r25, 0x00	; 0
    63fe:	02 c0       	rjmp	.+4      	; 0x6404 <vfprintf+0x368>
    6400:	88 e5       	ldi	r24, 0x58	; 88
    6402:	90 e0       	ldi	r25, 0x00	; 0
    6404:	b6 01       	movw	r22, r12
    6406:	0c c0       	rjmp	.+24     	; 0x6420 <vfprintf+0x384>
    6408:	8a 2d       	mov	r24, r10
    640a:	86 78       	andi	r24, 0x86	; 134
    640c:	51 f0       	breq	.+20     	; 0x6422 <vfprintf+0x386>
    640e:	a1 fe       	sbrs	r10, 1
    6410:	02 c0       	rjmp	.+4      	; 0x6416 <vfprintf+0x37a>
    6412:	8b e2       	ldi	r24, 0x2B	; 43
    6414:	01 c0       	rjmp	.+2      	; 0x6418 <vfprintf+0x37c>
    6416:	80 e2       	ldi	r24, 0x20	; 32
    6418:	a7 fc       	sbrc	r10, 7
    641a:	8d e2       	ldi	r24, 0x2D	; 45
    641c:	b6 01       	movw	r22, r12
    641e:	90 e0       	ldi	r25, 0x00	; 0
    6420:	50 d0       	rcall	.+160    	; 0x64c2 <fputc>
    6422:	89 14       	cp	r8, r9
    6424:	30 f4       	brcc	.+12     	; 0x6432 <vfprintf+0x396>
    6426:	b6 01       	movw	r22, r12
    6428:	80 e3       	ldi	r24, 0x30	; 48
    642a:	90 e0       	ldi	r25, 0x00	; 0
    642c:	4a d0       	rcall	.+148    	; 0x64c2 <fputc>
    642e:	9a 94       	dec	r9
    6430:	f8 cf       	rjmp	.-16     	; 0x6422 <vfprintf+0x386>
    6432:	8a 94       	dec	r8
    6434:	f3 01       	movw	r30, r6
    6436:	e8 0d       	add	r30, r8
    6438:	f1 1d       	adc	r31, r1
    643a:	80 81       	ld	r24, Z
    643c:	b6 01       	movw	r22, r12
    643e:	90 e0       	ldi	r25, 0x00	; 0
    6440:	40 d0       	rcall	.+128    	; 0x64c2 <fputc>
    6442:	81 10       	cpse	r8, r1
    6444:	f6 cf       	rjmp	.-20     	; 0x6432 <vfprintf+0x396>
    6446:	22 20       	and	r2, r2
    6448:	09 f4       	brne	.+2      	; 0x644c <vfprintf+0x3b0>
    644a:	4e ce       	rjmp	.-868    	; 0x60e8 <vfprintf+0x4c>
    644c:	b6 01       	movw	r22, r12
    644e:	80 e2       	ldi	r24, 0x20	; 32
    6450:	90 e0       	ldi	r25, 0x00	; 0
    6452:	37 d0       	rcall	.+110    	; 0x64c2 <fputc>
    6454:	2a 94       	dec	r2
    6456:	f7 cf       	rjmp	.-18     	; 0x6446 <vfprintf+0x3aa>
    6458:	f6 01       	movw	r30, r12
    645a:	86 81       	ldd	r24, Z+6	; 0x06
    645c:	97 81       	ldd	r25, Z+7	; 0x07
    645e:	02 c0       	rjmp	.+4      	; 0x6464 <vfprintf+0x3c8>
    6460:	8f ef       	ldi	r24, 0xFF	; 255
    6462:	9f ef       	ldi	r25, 0xFF	; 255
    6464:	2b 96       	adiw	r28, 0x0b	; 11
    6466:	0f b6       	in	r0, 0x3f	; 63
    6468:	f8 94       	cli
    646a:	de bf       	out	0x3e, r29	; 62
    646c:	0f be       	out	0x3f, r0	; 63
    646e:	cd bf       	out	0x3d, r28	; 61
    6470:	df 91       	pop	r29
    6472:	cf 91       	pop	r28
    6474:	1f 91       	pop	r17
    6476:	0f 91       	pop	r16
    6478:	ff 90       	pop	r15
    647a:	ef 90       	pop	r14
    647c:	df 90       	pop	r13
    647e:	cf 90       	pop	r12
    6480:	bf 90       	pop	r11
    6482:	af 90       	pop	r10
    6484:	9f 90       	pop	r9
    6486:	8f 90       	pop	r8
    6488:	7f 90       	pop	r7
    648a:	6f 90       	pop	r6
    648c:	5f 90       	pop	r5
    648e:	4f 90       	pop	r4
    6490:	3f 90       	pop	r3
    6492:	2f 90       	pop	r2
    6494:	08 95       	ret

00006496 <strnlen_P>:
    6496:	fc 01       	movw	r30, r24
    6498:	05 90       	lpm	r0, Z+
    649a:	61 50       	subi	r22, 0x01	; 1
    649c:	70 40       	sbci	r23, 0x00	; 0
    649e:	01 10       	cpse	r0, r1
    64a0:	d8 f7       	brcc	.-10     	; 0x6498 <strnlen_P+0x2>
    64a2:	80 95       	com	r24
    64a4:	90 95       	com	r25
    64a6:	8e 0f       	add	r24, r30
    64a8:	9f 1f       	adc	r25, r31
    64aa:	08 95       	ret

000064ac <strnlen>:
    64ac:	fc 01       	movw	r30, r24
    64ae:	61 50       	subi	r22, 0x01	; 1
    64b0:	70 40       	sbci	r23, 0x00	; 0
    64b2:	01 90       	ld	r0, Z+
    64b4:	01 10       	cpse	r0, r1
    64b6:	d8 f7       	brcc	.-10     	; 0x64ae <strnlen+0x2>
    64b8:	80 95       	com	r24
    64ba:	90 95       	com	r25
    64bc:	8e 0f       	add	r24, r30
    64be:	9f 1f       	adc	r25, r31
    64c0:	08 95       	ret

000064c2 <fputc>:
    64c2:	0f 93       	push	r16
    64c4:	1f 93       	push	r17
    64c6:	cf 93       	push	r28
    64c8:	df 93       	push	r29
    64ca:	fb 01       	movw	r30, r22
    64cc:	23 81       	ldd	r18, Z+3	; 0x03
    64ce:	21 fd       	sbrc	r18, 1
    64d0:	03 c0       	rjmp	.+6      	; 0x64d8 <fputc+0x16>
    64d2:	8f ef       	ldi	r24, 0xFF	; 255
    64d4:	9f ef       	ldi	r25, 0xFF	; 255
    64d6:	2c c0       	rjmp	.+88     	; 0x6530 <fputc+0x6e>
    64d8:	22 ff       	sbrs	r18, 2
    64da:	16 c0       	rjmp	.+44     	; 0x6508 <fputc+0x46>
    64dc:	46 81       	ldd	r20, Z+6	; 0x06
    64de:	57 81       	ldd	r21, Z+7	; 0x07
    64e0:	24 81       	ldd	r18, Z+4	; 0x04
    64e2:	35 81       	ldd	r19, Z+5	; 0x05
    64e4:	42 17       	cp	r20, r18
    64e6:	53 07       	cpc	r21, r19
    64e8:	44 f4       	brge	.+16     	; 0x64fa <fputc+0x38>
    64ea:	a0 81       	ld	r26, Z
    64ec:	b1 81       	ldd	r27, Z+1	; 0x01
    64ee:	9d 01       	movw	r18, r26
    64f0:	2f 5f       	subi	r18, 0xFF	; 255
    64f2:	3f 4f       	sbci	r19, 0xFF	; 255
    64f4:	31 83       	std	Z+1, r19	; 0x01
    64f6:	20 83       	st	Z, r18
    64f8:	8c 93       	st	X, r24
    64fa:	26 81       	ldd	r18, Z+6	; 0x06
    64fc:	37 81       	ldd	r19, Z+7	; 0x07
    64fe:	2f 5f       	subi	r18, 0xFF	; 255
    6500:	3f 4f       	sbci	r19, 0xFF	; 255
    6502:	37 83       	std	Z+7, r19	; 0x07
    6504:	26 83       	std	Z+6, r18	; 0x06
    6506:	14 c0       	rjmp	.+40     	; 0x6530 <fputc+0x6e>
    6508:	8b 01       	movw	r16, r22
    650a:	ec 01       	movw	r28, r24
    650c:	fb 01       	movw	r30, r22
    650e:	00 84       	ldd	r0, Z+8	; 0x08
    6510:	f1 85       	ldd	r31, Z+9	; 0x09
    6512:	e0 2d       	mov	r30, r0
    6514:	19 95       	eicall
    6516:	89 2b       	or	r24, r25
    6518:	e1 f6       	brne	.-72     	; 0x64d2 <fputc+0x10>
    651a:	d8 01       	movw	r26, r16
    651c:	16 96       	adiw	r26, 0x06	; 6
    651e:	8d 91       	ld	r24, X+
    6520:	9c 91       	ld	r25, X
    6522:	17 97       	sbiw	r26, 0x07	; 7
    6524:	01 96       	adiw	r24, 0x01	; 1
    6526:	17 96       	adiw	r26, 0x07	; 7
    6528:	9c 93       	st	X, r25
    652a:	8e 93       	st	-X, r24
    652c:	16 97       	sbiw	r26, 0x06	; 6
    652e:	ce 01       	movw	r24, r28
    6530:	df 91       	pop	r29
    6532:	cf 91       	pop	r28
    6534:	1f 91       	pop	r17
    6536:	0f 91       	pop	r16
    6538:	08 95       	ret

0000653a <__ultoa_invert>:
    653a:	fa 01       	movw	r30, r20
    653c:	aa 27       	eor	r26, r26
    653e:	28 30       	cpi	r18, 0x08	; 8
    6540:	51 f1       	breq	.+84     	; 0x6596 <__ultoa_invert+0x5c>
    6542:	20 31       	cpi	r18, 0x10	; 16
    6544:	81 f1       	breq	.+96     	; 0x65a6 <__ultoa_invert+0x6c>
    6546:	e8 94       	clt
    6548:	6f 93       	push	r22
    654a:	6e 7f       	andi	r22, 0xFE	; 254
    654c:	6e 5f       	subi	r22, 0xFE	; 254
    654e:	7f 4f       	sbci	r23, 0xFF	; 255
    6550:	8f 4f       	sbci	r24, 0xFF	; 255
    6552:	9f 4f       	sbci	r25, 0xFF	; 255
    6554:	af 4f       	sbci	r26, 0xFF	; 255
    6556:	b1 e0       	ldi	r27, 0x01	; 1
    6558:	3e d0       	rcall	.+124    	; 0x65d6 <__ultoa_invert+0x9c>
    655a:	b4 e0       	ldi	r27, 0x04	; 4
    655c:	3c d0       	rcall	.+120    	; 0x65d6 <__ultoa_invert+0x9c>
    655e:	67 0f       	add	r22, r23
    6560:	78 1f       	adc	r23, r24
    6562:	89 1f       	adc	r24, r25
    6564:	9a 1f       	adc	r25, r26
    6566:	a1 1d       	adc	r26, r1
    6568:	68 0f       	add	r22, r24
    656a:	79 1f       	adc	r23, r25
    656c:	8a 1f       	adc	r24, r26
    656e:	91 1d       	adc	r25, r1
    6570:	a1 1d       	adc	r26, r1
    6572:	6a 0f       	add	r22, r26
    6574:	71 1d       	adc	r23, r1
    6576:	81 1d       	adc	r24, r1
    6578:	91 1d       	adc	r25, r1
    657a:	a1 1d       	adc	r26, r1
    657c:	20 d0       	rcall	.+64     	; 0x65be <__ultoa_invert+0x84>
    657e:	09 f4       	brne	.+2      	; 0x6582 <__ultoa_invert+0x48>
    6580:	68 94       	set
    6582:	3f 91       	pop	r19
    6584:	2a e0       	ldi	r18, 0x0A	; 10
    6586:	26 9f       	mul	r18, r22
    6588:	11 24       	eor	r1, r1
    658a:	30 19       	sub	r19, r0
    658c:	30 5d       	subi	r19, 0xD0	; 208
    658e:	31 93       	st	Z+, r19
    6590:	de f6       	brtc	.-74     	; 0x6548 <__ultoa_invert+0xe>
    6592:	cf 01       	movw	r24, r30
    6594:	08 95       	ret
    6596:	46 2f       	mov	r20, r22
    6598:	47 70       	andi	r20, 0x07	; 7
    659a:	40 5d       	subi	r20, 0xD0	; 208
    659c:	41 93       	st	Z+, r20
    659e:	b3 e0       	ldi	r27, 0x03	; 3
    65a0:	0f d0       	rcall	.+30     	; 0x65c0 <__ultoa_invert+0x86>
    65a2:	c9 f7       	brne	.-14     	; 0x6596 <__ultoa_invert+0x5c>
    65a4:	f6 cf       	rjmp	.-20     	; 0x6592 <__ultoa_invert+0x58>
    65a6:	46 2f       	mov	r20, r22
    65a8:	4f 70       	andi	r20, 0x0F	; 15
    65aa:	40 5d       	subi	r20, 0xD0	; 208
    65ac:	4a 33       	cpi	r20, 0x3A	; 58
    65ae:	18 f0       	brcs	.+6      	; 0x65b6 <__ultoa_invert+0x7c>
    65b0:	49 5d       	subi	r20, 0xD9	; 217
    65b2:	31 fd       	sbrc	r19, 1
    65b4:	40 52       	subi	r20, 0x20	; 32
    65b6:	41 93       	st	Z+, r20
    65b8:	02 d0       	rcall	.+4      	; 0x65be <__ultoa_invert+0x84>
    65ba:	a9 f7       	brne	.-22     	; 0x65a6 <__ultoa_invert+0x6c>
    65bc:	ea cf       	rjmp	.-44     	; 0x6592 <__ultoa_invert+0x58>
    65be:	b4 e0       	ldi	r27, 0x04	; 4
    65c0:	a6 95       	lsr	r26
    65c2:	97 95       	ror	r25
    65c4:	87 95       	ror	r24
    65c6:	77 95       	ror	r23
    65c8:	67 95       	ror	r22
    65ca:	ba 95       	dec	r27
    65cc:	c9 f7       	brne	.-14     	; 0x65c0 <__ultoa_invert+0x86>
    65ce:	00 97       	sbiw	r24, 0x00	; 0
    65d0:	61 05       	cpc	r22, r1
    65d2:	71 05       	cpc	r23, r1
    65d4:	08 95       	ret
    65d6:	9b 01       	movw	r18, r22
    65d8:	ac 01       	movw	r20, r24
    65da:	0a 2e       	mov	r0, r26
    65dc:	06 94       	lsr	r0
    65de:	57 95       	ror	r21
    65e0:	47 95       	ror	r20
    65e2:	37 95       	ror	r19
    65e4:	27 95       	ror	r18
    65e6:	ba 95       	dec	r27
    65e8:	c9 f7       	brne	.-14     	; 0x65dc <__ultoa_invert+0xa2>
    65ea:	62 0f       	add	r22, r18
    65ec:	73 1f       	adc	r23, r19
    65ee:	84 1f       	adc	r24, r20
    65f0:	95 1f       	adc	r25, r21
    65f2:	a0 1d       	adc	r26, r0
    65f4:	08 95       	ret

000065f6 <_exit>:
    65f6:	f8 94       	cli

000065f8 <__stop_program>:
    65f8:	ff cf       	rjmp	.-2      	; 0x65f8 <__stop_program>
